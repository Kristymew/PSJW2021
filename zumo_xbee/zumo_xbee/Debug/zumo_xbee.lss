
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000000a  00800100  00000254  000002c8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000254  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  000002d2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000304  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000078  00000000  00000000  00000344  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f47  00000000  00000000  000003bc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000baa  00000000  00000000  00001303  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000004ee  00000000  00000000  00001ead  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000f4  00000000  00000000  0000239c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000005ce  00000000  00000000  00002490  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000252  00000000  00000000  00002a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000068  00000000  00000000  00002cb0  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
   c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  10:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  14:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  18:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  1c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  20:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  24:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  28:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  2c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  30:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  34:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  38:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  3c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  40:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  44:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  48:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  4c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  50:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  54:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  58:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  5c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  60:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  64:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  68:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  6c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  70:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  74:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  78:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  7c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  80:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  84:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  88:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  8c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  90:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  94:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  98:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  9c:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a0:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a4:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>
  a8:	0c 94 6b 00 	jmp	0xd6	; 0xd6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e5       	ldi	r30, 0x54	; 84
  c0:	f2 e0       	ldi	r31, 0x02	; 2
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	aa 30       	cpi	r26, 0x0A	; 10
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>
  ce:	0e 94 07 01 	call	0x20e	; 0x20e <main>
  d2:	0c 94 28 01 	jmp	0x250	; 0x250 <_exit>

000000d6 <__bad_interrupt>:
  d6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000da <initUsart1>:

void writeInt(int16_t i) {
	char buffer[8];								// Array in memory waar de string opgeslagen moet worden
	itoa(i, buffer, 10);						// Zet de ingelezen integer i om in een string (weergave: 10 = decimaal, 16 = hex, 2 = binary)
	writeString(buffer);						// Verstuur de waarde van i, die opgeslagen is op de locatie van de buffer
}
  da:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
  de:	88 e1       	ldi	r24, 0x18	; 24
  e0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
  e4:	86 e0       	ldi	r24, 0x06	; 6
  e6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
  ea:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
  ee:	87 e6       	ldi	r24, 0x67	; 103
  f0:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
  f4:	08 95       	ret

000000f6 <initPWM>:
  f6:	80 ea       	ldi	r24, 0xA0	; 160
  f8:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
  fc:	81 e1       	ldi	r24, 0x11	; 17
  fe:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 102:	80 e9       	ldi	r24, 0x90	; 144
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 10a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 10e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 112:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 116:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 11a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 11e:	84 b1       	in	r24, 0x04	; 4
 120:	86 66       	ori	r24, 0x66	; 102
 122:	84 b9       	out	0x04, r24	; 4
 124:	08 95       	ret

00000126 <writeChar>:
 126:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 12a:	95 ff       	sbrs	r25, 5
 12c:	fc cf       	rjmp	.-8      	; 0x126 <writeChar>
 12e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 132:	08 95       	ret

00000134 <writeString>:
 134:	0f 93       	push	r16
 136:	1f 93       	push	r17
 138:	cf 93       	push	r28
 13a:	8c 01       	movw	r16, r24
 13c:	c0 e0       	ldi	r28, 0x00	; 0
 13e:	03 c0       	rjmp	.+6      	; 0x146 <writeString+0x12>
 140:	0e 94 93 00 	call	0x126	; 0x126 <writeChar>
 144:	cf 5f       	subi	r28, 0xFF	; 255
 146:	f8 01       	movw	r30, r16
 148:	ec 0f       	add	r30, r28
 14a:	f1 1d       	adc	r31, r1
 14c:	80 81       	ld	r24, Z
 14e:	81 11       	cpse	r24, r1
 150:	f7 cf       	rjmp	.-18     	; 0x140 <writeString+0xc>
 152:	cf 91       	pop	r28
 154:	1f 91       	pop	r17
 156:	0f 91       	pop	r16
 158:	08 95       	ret

0000015a <readChar>:

unsigned char readChar() {
	while(!(UCSR1A & (1 << RXC1)));				// Wait for data to be received
 15a:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 15e:	88 23       	and	r24, r24
 160:	e4 f7       	brge	.-8      	; 0x15a <readChar>
	return UDR1;								// Get and return received data from buffer
 162:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
}
 166:	08 95       	ret

00000168 <forward>:

/* Controlling the motors with PWM */
void forward(int speed) {
	PORTB = (0 << PORTB1) | (0 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// Set left and right motors forward
 168:	20 e6       	ldi	r18, 0x60	; 96
 16a:	25 b9       	out	0x05, r18	; 5
	OCR1A = speed;   							// Set the speed of the left motor with PWM
 16c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 170:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed;   						// Set the speed of the right motor with PWM
 174:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 178:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 17c:	08 95       	ret

0000017e <turnRight>:
}

void turnRight(int speed) {
	PORTB = (0 << PORTB2) | (1 << PORTB6);		// PORTB2 LOW = move forward, PORTB5 controls left motor PWM
 17e:	20 e4       	ldi	r18, 0x40	; 64
 180:	25 b9       	out	0x05, r18	; 5
	OCR1B = speed;
 182:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 186:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 18a:	08 95       	ret

0000018c <turnLeft>:
}

void turnLeft(int speed) {
	PORTB = (0 << PORTB1) | (1 << PORTB5);		// PORTB1 LOW = move forward, PORTB5 controls right motor PWM
 18c:	20 e2       	ldi	r18, 0x20	; 32
 18e:	25 b9       	out	0x05, r18	; 5
	OCR1A = speed;
 190:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 194:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 198:	08 95       	ret

0000019a <backward>:
}

void backward(int speed) {
	PORTB = (1 << PORTB1) | (1 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// PORTB1 + PORTB2 HIGH = move backward, PORTB5 = left + PORTB6 = right control motor PWM
 19a:	26 e6       	ldi	r18, 0x66	; 102
 19c:	25 b9       	out	0x05, r18	; 5
	
	OCR1A = speed;   							// Set the speed of the left motor with PWM
 19e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 1a2:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed;   						// Set the speed of the right motor with PWM
 1a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 1aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 1ae:	08 95       	ret

000001b0 <direction>:
}

/* Function that calls the function of the PWM motor to give instructions depending on the input from the user */
void direction(char inputKeyboard) {
	switch(inputKeyboard) {
 1b0:	84 36       	cpi	r24, 0x64	; 100
 1b2:	b9 f0       	breq	.+46     	; 0x1e2 <direction+0x32>
 1b4:	18 f4       	brcc	.+6      	; 0x1bc <direction+0xc>
 1b6:	81 36       	cpi	r24, 0x61	; 97
 1b8:	79 f0       	breq	.+30     	; 0x1d8 <direction+0x28>
 1ba:	18 c0       	rjmp	.+48     	; 0x1ec <direction+0x3c>
 1bc:	83 37       	cpi	r24, 0x73	; 115
 1be:	39 f0       	breq	.+14     	; 0x1ce <direction+0x1e>
 1c0:	87 37       	cpi	r24, 0x77	; 119
 1c2:	a1 f4       	brne	.+40     	; 0x1ec <direction+0x3c>
		case 'w':
			forward(150);
 1c4:	86 e9       	ldi	r24, 0x96	; 150
 1c6:	90 e0       	ldi	r25, 0x00	; 0
 1c8:	0e 94 b4 00 	call	0x168	; 0x168 <forward>
			break;
 1cc:	08 95       	ret
		case 's':
			backward(150);
 1ce:	86 e9       	ldi	r24, 0x96	; 150
 1d0:	90 e0       	ldi	r25, 0x00	; 0
 1d2:	0e 94 cd 00 	call	0x19a	; 0x19a <backward>
			break;
 1d6:	08 95       	ret
		case 'a':
			turnLeft(150);
 1d8:	86 e9       	ldi	r24, 0x96	; 150
 1da:	90 e0       	ldi	r25, 0x00	; 0
 1dc:	0e 94 c6 00 	call	0x18c	; 0x18c <turnLeft>
			break;
 1e0:	08 95       	ret
		case 'd':
			turnRight(150);
 1e2:	86 e9       	ldi	r24, 0x96	; 150
 1e4:	90 e0       	ldi	r25, 0x00	; 0
 1e6:	0e 94 bf 00 	call	0x17e	; 0x17e <turnRight>
			break;
 1ea:	08 95       	ret
		default:								// By no input, no actions
			forward(0);
 1ec:	80 e0       	ldi	r24, 0x00	; 0
 1ee:	90 e0       	ldi	r25, 0x00	; 0
 1f0:	0e 94 b4 00 	call	0x168	; 0x168 <forward>
			backward(0);
 1f4:	80 e0       	ldi	r24, 0x00	; 0
 1f6:	90 e0       	ldi	r25, 0x00	; 0
 1f8:	0e 94 cd 00 	call	0x19a	; 0x19a <backward>
			turnLeft(0);
 1fc:	80 e0       	ldi	r24, 0x00	; 0
 1fe:	90 e0       	ldi	r25, 0x00	; 0
 200:	0e 94 c6 00 	call	0x18c	; 0x18c <turnLeft>
			turnRight(0);
 204:	80 e0       	ldi	r24, 0x00	; 0
 206:	90 e0       	ldi	r25, 0x00	; 0
 208:	0e 94 bf 00 	call	0x17e	; 0x17e <turnRight>
 20c:	08 95       	ret

0000020e <main>:
void turnLeft(int speed);
void backward(int speed);
void direction(char inputKeyboard);				// Function to drive in a certain direction

int main(void) {
	initUsart1();								// Initialization for the registers
 20e:	0e 94 6d 00 	call	0xda	; 0xda <initUsart1>
	initPWM();
 212:	0e 94 7b 00 	call	0xf6	; 0xf6 <initPWM>
	
	char receivedData = ' ';     				// Create char to store input from keyboard
	
	while(1) {
		//writeChar('\f');						// Clear screen
		writeString("input: \n");
 216:	80 e0       	ldi	r24, 0x00	; 0
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	0e 94 9a 00 	call	0x134	; 0x134 <writeString>
		receivedData = readChar();				// Read the incoming byte (data from the keyboard)
 21e:	0e 94 ad 00 	call	0x15a	; 0x15a <readChar>
 222:	c8 2f       	mov	r28, r24
		writeChar(receivedData);				// Weergeeft de ontvangen data vanaf de computer
 224:	0e 94 93 00 	call	0x126	; 0x126 <writeChar>
		writeString("\n");
 228:	87 e0       	ldi	r24, 0x07	; 7
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	0e 94 9a 00 	call	0x134	; 0x134 <writeString>
		
		direction(receivedData);				// Send the receivedData as paramater to the function direction
 230:	8c 2f       	mov	r24, r28
 232:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <direction>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 236:	2f ef       	ldi	r18, 0xFF	; 255
 238:	83 ec       	ldi	r24, 0xC3	; 195
 23a:	99 e0       	ldi	r25, 0x09	; 9
 23c:	21 50       	subi	r18, 0x01	; 1
 23e:	80 40       	sbci	r24, 0x00	; 0
 240:	90 40       	sbci	r25, 0x00	; 0
 242:	e1 f7       	brne	.-8      	; 0x23c <main+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <main+0x38>
 246:	00 00       	nop
		
		
		// WRONG!!! MUST BE INTERRUPT OR SOMETHING!!!
		_delay_ms(200);							// Wait 200 ms
		receivedData = ' ';
		direction(receivedData);
 248:	80 e2       	ldi	r24, 0x20	; 32
 24a:	0e 94 d8 00 	call	0x1b0	; 0x1b0 <direction>
 24e:	e3 cf       	rjmp	.-58     	; 0x216 <main+0x8>

00000250 <_exit>:
 250:	f8 94       	cli

00000252 <__stop_program>:
 252:	ff cf       	rjmp	.-2      	; 0x252 <__stop_program>
