
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000042  00800100  0000058e  00000622  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000058e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800142  00800142  00000664  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000664  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000694  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d8  00000000  00000000  000006d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012fa  00000000  00000000  000007ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d2e  00000000  00000000  00001aa6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000785  00000000  00000000  000027d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000254  00000000  00000000  00002f5c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000006b6  00000000  00000000  000031b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000465  00000000  00000000  00003866  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a8  00000000  00000000  00003ccb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 ec 00 	jmp	0x1d8	; 0x1d8 <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 27 01 	jmp	0x24e	; 0x24e <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	ee e8       	ldi	r30, 0x8E	; 142
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 34       	cpi	r26, 0x42	; 66
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e4       	ldi	r26, 0x42	; 66
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	aa 34       	cpi	r26, 0x4A	; 74
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 85 01 	call	0x30a	; 0x30a <main>
  e2:	0c 94 c5 02 	jmp	0x58a	; 0x58a <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <initUsart1>:
  ea:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
  ee:	88 ed       	ldi	r24, 0xD8	; 216
  f0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
  fa:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <writeChar>:
 108:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 10c:	95 ff       	sbrs	r25, 5
 10e:	fc cf       	rjmp	.-8      	; 0x108 <writeChar>
 110:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 114:	08 95       	ret

00000116 <writeString>:
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	8c 01       	movw	r16, r24
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <writeString+0x12>
 122:	0e 94 84 00 	call	0x108	; 0x108 <writeChar>
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	f1 1d       	adc	r31, r1
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <writeString+0xc>
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <writeInt>:
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	28 97       	sbiw	r28, 0x08	; 8
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	0e 94 90 02 	call	0x520	; 0x520 <__itoa_ncheck>
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
 164:	28 96       	adiw	r28, 0x08	; 8
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <readChar>:
 176:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <readChar>
 17e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 182:	08 95       	ret

00000184 <__vector_25>:
/*ISR(USART1_TX_vect) {							// Send the data of gyroscope
	counter++;	// dummy
	writeInt(counter);
}*/

ISR(USART1_RX_vect) {							// When you receive data, calls the ISR
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	receivedData = readChar();					// Read the incoming byte (data from the keyboard)
 1a6:	0e 94 bb 00 	call	0x176	; 0x176 <readChar>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	direction(receivedData);					// Send the receivedData as parameter to the function direction
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	0e 94 1e 02 	call	0x43c	; 0x43c <direction>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <__vector_7>:

// Right
ISR(INT6_vect) {								// Enable interrupt on PE6 for the right encoder
 1d8:	1f 92       	push	r1
 1da:	0f 92       	push	r0
 1dc:	0f b6       	in	r0, 0x3f	; 63
 1de:	0f 92       	push	r0
 1e0:	11 24       	eor	r1, r1
 1e2:	2f 93       	push	r18
 1e4:	3f 93       	push	r19
 1e6:	4f 93       	push	r20
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	uint8_t rightEncoderTicks;
	rightEncoderTicks = PINE & (1<<PORTE6);
	
	if(rightEncoderTicks) {
 1fa:	66 9b       	sbis	0x0c, 6	; 12
 1fc:	17 c0       	rjmp	.+46     	; 0x22c <__vector_7+0x54>
		ticksRight++;
 1fe:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticksRight>
 202:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticksRight+0x1>
 206:	01 96       	adiw	r24, 0x01	; 1
 208:	90 93 47 01 	sts	0x0147, r25	; 0x800147 <ticksRight+0x1>
 20c:	80 93 46 01 	sts	0x0146, r24	; 0x800146 <ticksRight>
		writeString("rightEncoderTicks: ");
 210:	81 e0       	ldi	r24, 0x01	; 1
 212:	91 e0       	ldi	r25, 0x01	; 1
 214:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeInt(ticksRight);
 218:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticksRight>
 21c:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticksRight+0x1>
 220:	0e 94 9e 00 	call	0x13c	; 0x13c <writeInt>
		writeString("\r\n");
 224:	85 e1       	ldi	r24, 0x15	; 21
 226:	91 e0       	ldi	r25, 0x01	; 1
 228:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
	}
}
 22c:	ff 91       	pop	r31
 22e:	ef 91       	pop	r30
 230:	bf 91       	pop	r27
 232:	af 91       	pop	r26
 234:	9f 91       	pop	r25
 236:	8f 91       	pop	r24
 238:	7f 91       	pop	r23
 23a:	6f 91       	pop	r22
 23c:	5f 91       	pop	r21
 23e:	4f 91       	pop	r20
 240:	3f 91       	pop	r19
 242:	2f 91       	pop	r18
 244:	0f 90       	pop	r0
 246:	0f be       	out	0x3f, r0	; 63
 248:	0f 90       	pop	r0
 24a:	1f 90       	pop	r1
 24c:	18 95       	reti

0000024e <__vector_9>:

// Left
ISR(PCINT0_vect) {								// Enable interrupt on PB4 for the left encoder
 24e:	1f 92       	push	r1
 250:	0f 92       	push	r0
 252:	0f b6       	in	r0, 0x3f	; 63
 254:	0f 92       	push	r0
 256:	11 24       	eor	r1, r1
 258:	2f 93       	push	r18
 25a:	3f 93       	push	r19
 25c:	4f 93       	push	r20
 25e:	5f 93       	push	r21
 260:	6f 93       	push	r22
 262:	7f 93       	push	r23
 264:	8f 93       	push	r24
 266:	9f 93       	push	r25
 268:	af 93       	push	r26
 26a:	bf 93       	push	r27
 26c:	ef 93       	push	r30
 26e:	ff 93       	push	r31
	uint8_t leftEncoderTicks;
	leftEncoderTicks = PINB & (1<<PINB4);
	
	if(leftEncoderTicks) {
 270:	1c 9b       	sbis	0x03, 4	; 3
 272:	17 c0       	rjmp	.+46     	; 0x2a2 <__vector_9+0x54>
		ticksLeft++;
 274:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ticksLeft>
 278:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <ticksLeft+0x1>
 27c:	01 96       	adiw	r24, 0x01	; 1
 27e:	90 93 49 01 	sts	0x0149, r25	; 0x800149 <ticksLeft+0x1>
 282:	80 93 48 01 	sts	0x0148, r24	; 0x800148 <ticksLeft>
		writeString("leftEncoderTicks: ");
 286:	88 e1       	ldi	r24, 0x18	; 24
 288:	91 e0       	ldi	r25, 0x01	; 1
 28a:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeInt(ticksLeft);
 28e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ticksLeft>
 292:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <ticksLeft+0x1>
 296:	0e 94 9e 00 	call	0x13c	; 0x13c <writeInt>
		writeString("\r\n");
 29a:	85 e1       	ldi	r24, 0x15	; 21
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>

	}
}
 2a2:	ff 91       	pop	r31
 2a4:	ef 91       	pop	r30
 2a6:	bf 91       	pop	r27
 2a8:	af 91       	pop	r26
 2aa:	9f 91       	pop	r25
 2ac:	8f 91       	pop	r24
 2ae:	7f 91       	pop	r23
 2b0:	6f 91       	pop	r22
 2b2:	5f 91       	pop	r21
 2b4:	4f 91       	pop	r20
 2b6:	3f 91       	pop	r19
 2b8:	2f 91       	pop	r18
 2ba:	0f 90       	pop	r0
 2bc:	0f be       	out	0x3f, r0	; 63
 2be:	0f 90       	pop	r0
 2c0:	1f 90       	pop	r1
 2c2:	18 95       	reti

000002c4 <initEncoders>:
		_delay_ms(1000);						// Show data every second
	}
}

void initEncoders() {
	cli();
 2c4:	f8 94       	cli
	// Enable interrupt on PE6 for the right encoder
	DDRE &= ~(1<<PORTE6);						// Set PE6 as input, right encoder XORed signal
 2c6:	8d b1       	in	r24, 0x0d	; 13
 2c8:	8f 7b       	andi	r24, 0xBF	; 191
 2ca:	8d b9       	out	0x0d, r24	; 13
	DDRF &= ~(1<<PORTF0);						// Set PF0 as input
 2cc:	80 b3       	in	r24, 0x10	; 16
 2ce:	8e 7f       	andi	r24, 0xFE	; 254
 2d0:	80 bb       	out	0x10, r24	; 16
	EICRB |= (1<<ISC60) | ~(1<<ISC61);			// Sets the interrupt type
 2d2:	ea e6       	ldi	r30, 0x6A	; 106
 2d4:	f0 e0       	ldi	r31, 0x00	; 0
 2d6:	80 81       	ld	r24, Z
 2d8:	8f 6d       	ori	r24, 0xDF	; 223
 2da:	80 83       	st	Z, r24
	EIMSK |= (1<<INT6);							// Activates the interrupt
 2dc:	8d b3       	in	r24, 0x1d	; 29
 2de:	80 64       	ori	r24, 0x40	; 64
 2e0:	8d bb       	out	0x1d, r24	; 29
	// Enable pin-change interrupt on PB4 for left encoder, and disable other pin-change interrupts
	DDRB &= ~(1<<PINB4);						// Set PB4 as input, left encoder XORed signal
 2e2:	84 b1       	in	r24, 0x04	; 4
 2e4:	8f 7e       	andi	r24, 0xEF	; 239
 2e6:	84 b9       	out	0x04, r24	; 4
	DDRE &= ~(1<<PORTE2);						// Set PE2 as input
 2e8:	8d b1       	in	r24, 0x0d	; 13
 2ea:	8b 7f       	andi	r24, 0xFB	; 251
 2ec:	8d b9       	out	0x0d, r24	; 13
	PCICR |= (1 << PCIE0);						// Set PCIE0 to enable PCMSK0 scan
 2ee:	e8 e6       	ldi	r30, 0x68	; 104
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	80 81       	ld	r24, Z
 2f4:	81 60       	ori	r24, 0x01	; 1
 2f6:	80 83       	st	Z, r24
	PCMSK0 |= (1 << PCINT4);					// Set PCINT4 to trigger an interrupt on state change
 2f8:	eb e6       	ldi	r30, 0x6B	; 107
 2fa:	f0 e0       	ldi	r31, 0x00	; 0
 2fc:	80 81       	ld	r24, Z
 2fe:	80 61       	ori	r24, 0x10	; 16
 300:	80 83       	st	Z, r24
	PCIFR = (1 << PCIF0);						// Clear its interrupt flag by writing a 1.
 302:	81 e0       	ldi	r24, 0x01	; 1
 304:	8b bb       	out	0x1b, r24	; 27
	sei();										// Turn on interrupts
 306:	78 94       	sei
 308:	08 95       	ret

0000030a <main>:

	}
}

int main(void) {
	initUsart1();								// Initialization for the registers
 30a:	0e 94 75 00 	call	0xea	; 0xea <initUsart1>
	initPWM();
 30e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <initPWM>
	initEncoders();
 312:	0e 94 62 01 	call	0x2c4	; 0x2c4 <initEncoders>
	
	//writeChar('\f');							// Clear screen
	
	while(1) {
		writeString("Direction: ");
 316:	8b e2       	ldi	r24, 0x2B	; 43
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeChar(receivedData);				// Show received input from pc
 31e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 322:	0e 94 84 00 	call	0x108	; 0x108 <writeChar>
		writeString("\r\n");
 326:	85 e1       	ldi	r24, 0x15	; 21
 328:	91 e0       	ldi	r25, 0x01	; 1
 32a:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		
		ticksTotal = (ticksLeft/2)+(ticksRight/2);
 32e:	80 91 48 01 	lds	r24, 0x0148	; 0x800148 <ticksLeft>
 332:	90 91 49 01 	lds	r25, 0x0149	; 0x800149 <ticksLeft+0x1>
 336:	9c 01       	movw	r18, r24
 338:	36 95       	lsr	r19
 33a:	27 95       	ror	r18
 33c:	80 91 46 01 	lds	r24, 0x0146	; 0x800146 <ticksRight>
 340:	90 91 47 01 	lds	r25, 0x0147	; 0x800147 <ticksRight+0x1>
 344:	96 95       	lsr	r25
 346:	87 95       	ror	r24
 348:	82 0f       	add	r24, r18
 34a:	93 1f       	adc	r25, r19
 34c:	90 93 45 01 	sts	0x0145, r25	; 0x800145 <ticksTotal+0x1>
 350:	80 93 44 01 	sts	0x0144, r24	; 0x800144 <ticksTotal>
		distance = (ticksTotal/1204)*12;		// (ticks/cpr)*(pi*diameter), pi*3.9cm = 12.2522113490 ~12
 354:	80 91 44 01 	lds	r24, 0x0144	; 0x800144 <ticksTotal>
 358:	90 91 45 01 	lds	r25, 0x0145	; 0x800145 <ticksTotal+0x1>
 35c:	64 eb       	ldi	r22, 0xB4	; 180
 35e:	74 e0       	ldi	r23, 0x04	; 4
 360:	0e 94 68 02 	call	0x4d0	; 0x4d0 <__divmodhi4>
 364:	cb 01       	movw	r24, r22
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	68 0f       	add	r22, r24
 36c:	79 1f       	adc	r23, r25
 36e:	66 0f       	add	r22, r22
 370:	77 1f       	adc	r23, r23
 372:	66 0f       	add	r22, r22
 374:	77 1f       	adc	r23, r23
 376:	70 93 43 01 	sts	0x0143, r23	; 0x800143 <__data_end+0x1>
 37a:	60 93 42 01 	sts	0x0142, r22	; 0x800142 <__data_end>
		
		writeString("Distance: ");
 37e:	87 e3       	ldi	r24, 0x37	; 55
 380:	91 e0       	ldi	r25, 0x01	; 1
 382:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeInt(distance);						// Show the distance
 386:	80 91 42 01 	lds	r24, 0x0142	; 0x800142 <__data_end>
 38a:	90 91 43 01 	lds	r25, 0x0143	; 0x800143 <__data_end+0x1>
 38e:	0e 94 9e 00 	call	0x13c	; 0x13c <writeInt>
		writeString("\r\n");
 392:	85 e1       	ldi	r24, 0x15	; 21
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 39a:	2f ef       	ldi	r18, 0xFF	; 255
 39c:	83 ed       	ldi	r24, 0xD3	; 211
 39e:	90 e3       	ldi	r25, 0x30	; 48
 3a0:	21 50       	subi	r18, 0x01	; 1
 3a2:	80 40       	sbci	r24, 0x00	; 0
 3a4:	90 40       	sbci	r25, 0x00	; 0
 3a6:	e1 f7       	brne	.-8      	; 0x3a0 <main+0x96>
 3a8:	00 c0       	rjmp	.+0      	; 0x3aa <main+0xa0>
 3aa:	00 00       	nop
 3ac:	b4 cf       	rjmp	.-152    	; 0x316 <main+0xc>

000003ae <initPWM>:
 3ae:	80 ea       	ldi	r24, 0xA0	; 160
 3b0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 3b4:	81 e1       	ldi	r24, 0x11	; 17
 3b6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 3ba:	80 e9       	ldi	r24, 0x90	; 144
 3bc:	91 e0       	ldi	r25, 0x01	; 1
 3be:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 3c2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 3c6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3ca:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3ce:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3d2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3d6:	84 b1       	in	r24, 0x04	; 4
 3d8:	86 66       	ori	r24, 0x66	; 102
 3da:	84 b9       	out	0x04, r24	; 4
 3dc:	08 95       	ret

000003de <forward>:
 3de:	20 e6       	ldi	r18, 0x60	; 96
 3e0:	25 b9       	out	0x05, r18	; 5
 3e2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3e6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3ea:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3ee:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3f2:	08 95       	ret

000003f4 <turnRight>:
 3f4:	20 e4       	ldi	r18, 0x40	; 64
 3f6:	25 b9       	out	0x05, r18	; 5
 3f8:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3fc:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 400:	08 95       	ret

00000402 <turnLeft>:
 402:	20 e2       	ldi	r18, 0x20	; 32
 404:	25 b9       	out	0x05, r18	; 5
 406:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 40a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 40e:	08 95       	ret

00000410 <backward>:
 410:	26 e6       	ldi	r18, 0x66	; 102
 412:	25 b9       	out	0x05, r18	; 5
 414:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 418:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 41c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 420:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 424:	08 95       	ret

00000426 <turnLeftWide>:
 426:	20 e6       	ldi	r18, 0x60	; 96
 428:	25 b9       	out	0x05, r18	; 5
 42a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 42e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 432:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 436:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 43a:	08 95       	ret

0000043c <direction>:
 43c:	85 36       	cpi	r24, 0x65	; 101
 43e:	81 f1       	breq	.+96     	; 0x4a0 <direction+0x64>
 440:	28 f4       	brcc	.+10     	; 0x44c <direction+0x10>
 442:	81 36       	cpi	r24, 0x61	; 97
 444:	a1 f0       	breq	.+40     	; 0x46e <direction+0x32>
 446:	84 36       	cpi	r24, 0x64	; 100
 448:	d9 f0       	breq	.+54     	; 0x480 <direction+0x44>
 44a:	31 c0       	rjmp	.+98     	; 0x4ae <direction+0x72>
 44c:	83 37       	cpi	r24, 0x73	; 115
 44e:	51 f0       	breq	.+20     	; 0x464 <direction+0x28>
 450:	87 37       	cpi	r24, 0x77	; 119
 452:	19 f0       	breq	.+6      	; 0x45a <direction+0x1e>
 454:	81 37       	cpi	r24, 0x71	; 113
 456:	59 f5       	brne	.+86     	; 0x4ae <direction+0x72>
 458:	1c c0       	rjmp	.+56     	; 0x492 <direction+0x56>
 45a:	80 e9       	ldi	r24, 0x90	; 144
 45c:	91 e0       	ldi	r25, 0x01	; 1
 45e:	0e 94 ef 01 	call	0x3de	; 0x3de <forward>
 462:	08 95       	ret
 464:	80 e9       	ldi	r24, 0x90	; 144
 466:	91 e0       	ldi	r25, 0x01	; 1
 468:	0e 94 08 02 	call	0x410	; 0x410 <backward>
 46c:	08 95       	ret
 46e:	80 e9       	ldi	r24, 0x90	; 144
 470:	91 e0       	ldi	r25, 0x01	; 1
 472:	0e 94 01 02 	call	0x402	; 0x402 <turnLeft>
 476:	80 e0       	ldi	r24, 0x00	; 0
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <turnRight>
 47e:	08 95       	ret
 480:	80 e9       	ldi	r24, 0x90	; 144
 482:	91 e0       	ldi	r25, 0x01	; 1
 484:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <turnRight>
 488:	80 e0       	ldi	r24, 0x00	; 0
 48a:	90 e0       	ldi	r25, 0x00	; 0
 48c:	0e 94 01 02 	call	0x402	; 0x402 <turnLeft>
 490:	08 95       	ret
 492:	68 ec       	ldi	r22, 0xC8	; 200
 494:	70 e0       	ldi	r23, 0x00	; 0
 496:	80 e9       	ldi	r24, 0x90	; 144
 498:	91 e0       	ldi	r25, 0x01	; 1
 49a:	0e 94 13 02 	call	0x426	; 0x426 <turnLeftWide>
 49e:	08 95       	ret
 4a0:	60 e9       	ldi	r22, 0x90	; 144
 4a2:	71 e0       	ldi	r23, 0x01	; 1
 4a4:	88 ec       	ldi	r24, 0xC8	; 200
 4a6:	90 e0       	ldi	r25, 0x00	; 0
 4a8:	0e 94 13 02 	call	0x426	; 0x426 <turnLeftWide>
 4ac:	08 95       	ret
 4ae:	80 e0       	ldi	r24, 0x00	; 0
 4b0:	90 e0       	ldi	r25, 0x00	; 0
 4b2:	0e 94 ef 01 	call	0x3de	; 0x3de <forward>
 4b6:	80 e0       	ldi	r24, 0x00	; 0
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	0e 94 08 02 	call	0x410	; 0x410 <backward>
 4be:	80 e0       	ldi	r24, 0x00	; 0
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	0e 94 01 02 	call	0x402	; 0x402 <turnLeft>
 4c6:	80 e0       	ldi	r24, 0x00	; 0
 4c8:	90 e0       	ldi	r25, 0x00	; 0
 4ca:	0e 94 fa 01 	call	0x3f4	; 0x3f4 <turnRight>
 4ce:	08 95       	ret

000004d0 <__divmodhi4>:
 4d0:	97 fb       	bst	r25, 7
 4d2:	07 2e       	mov	r0, r23
 4d4:	16 f4       	brtc	.+4      	; 0x4da <__divmodhi4+0xa>
 4d6:	00 94       	com	r0
 4d8:	07 d0       	rcall	.+14     	; 0x4e8 <__divmodhi4_neg1>
 4da:	77 fd       	sbrc	r23, 7
 4dc:	09 d0       	rcall	.+18     	; 0x4f0 <__divmodhi4_neg2>
 4de:	0e 94 7c 02 	call	0x4f8	; 0x4f8 <__udivmodhi4>
 4e2:	07 fc       	sbrc	r0, 7
 4e4:	05 d0       	rcall	.+10     	; 0x4f0 <__divmodhi4_neg2>
 4e6:	3e f4       	brtc	.+14     	; 0x4f6 <__divmodhi4_exit>

000004e8 <__divmodhi4_neg1>:
 4e8:	90 95       	com	r25
 4ea:	81 95       	neg	r24
 4ec:	9f 4f       	sbci	r25, 0xFF	; 255
 4ee:	08 95       	ret

000004f0 <__divmodhi4_neg2>:
 4f0:	70 95       	com	r23
 4f2:	61 95       	neg	r22
 4f4:	7f 4f       	sbci	r23, 0xFF	; 255

000004f6 <__divmodhi4_exit>:
 4f6:	08 95       	ret

000004f8 <__udivmodhi4>:
 4f8:	aa 1b       	sub	r26, r26
 4fa:	bb 1b       	sub	r27, r27
 4fc:	51 e1       	ldi	r21, 0x11	; 17
 4fe:	07 c0       	rjmp	.+14     	; 0x50e <__udivmodhi4_ep>

00000500 <__udivmodhi4_loop>:
 500:	aa 1f       	adc	r26, r26
 502:	bb 1f       	adc	r27, r27
 504:	a6 17       	cp	r26, r22
 506:	b7 07       	cpc	r27, r23
 508:	10 f0       	brcs	.+4      	; 0x50e <__udivmodhi4_ep>
 50a:	a6 1b       	sub	r26, r22
 50c:	b7 0b       	sbc	r27, r23

0000050e <__udivmodhi4_ep>:
 50e:	88 1f       	adc	r24, r24
 510:	99 1f       	adc	r25, r25
 512:	5a 95       	dec	r21
 514:	a9 f7       	brne	.-22     	; 0x500 <__udivmodhi4_loop>
 516:	80 95       	com	r24
 518:	90 95       	com	r25
 51a:	bc 01       	movw	r22, r24
 51c:	cd 01       	movw	r24, r26
 51e:	08 95       	ret

00000520 <__itoa_ncheck>:
 520:	bb 27       	eor	r27, r27
 522:	4a 30       	cpi	r20, 0x0A	; 10
 524:	31 f4       	brne	.+12     	; 0x532 <__itoa_ncheck+0x12>
 526:	99 23       	and	r25, r25
 528:	22 f4       	brpl	.+8      	; 0x532 <__itoa_ncheck+0x12>
 52a:	bd e2       	ldi	r27, 0x2D	; 45
 52c:	90 95       	com	r25
 52e:	81 95       	neg	r24
 530:	9f 4f       	sbci	r25, 0xFF	; 255
 532:	0c 94 9c 02 	jmp	0x538	; 0x538 <__utoa_common>

00000536 <__utoa_ncheck>:
 536:	bb 27       	eor	r27, r27

00000538 <__utoa_common>:
 538:	fb 01       	movw	r30, r22
 53a:	55 27       	eor	r21, r21
 53c:	aa 27       	eor	r26, r26
 53e:	88 0f       	add	r24, r24
 540:	99 1f       	adc	r25, r25
 542:	aa 1f       	adc	r26, r26
 544:	a4 17       	cp	r26, r20
 546:	10 f0       	brcs	.+4      	; 0x54c <__utoa_common+0x14>
 548:	a4 1b       	sub	r26, r20
 54a:	83 95       	inc	r24
 54c:	50 51       	subi	r21, 0x10	; 16
 54e:	b9 f7       	brne	.-18     	; 0x53e <__utoa_common+0x6>
 550:	a0 5d       	subi	r26, 0xD0	; 208
 552:	aa 33       	cpi	r26, 0x3A	; 58
 554:	08 f0       	brcs	.+2      	; 0x558 <__utoa_common+0x20>
 556:	a9 5d       	subi	r26, 0xD9	; 217
 558:	a1 93       	st	Z+, r26
 55a:	00 97       	sbiw	r24, 0x00	; 0
 55c:	79 f7       	brne	.-34     	; 0x53c <__utoa_common+0x4>
 55e:	b1 11       	cpse	r27, r1
 560:	b1 93       	st	Z+, r27
 562:	11 92       	st	Z+, r1
 564:	cb 01       	movw	r24, r22
 566:	0c 94 b5 02 	jmp	0x56a	; 0x56a <strrev>

0000056a <strrev>:
 56a:	dc 01       	movw	r26, r24
 56c:	fc 01       	movw	r30, r24
 56e:	67 2f       	mov	r22, r23
 570:	71 91       	ld	r23, Z+
 572:	77 23       	and	r23, r23
 574:	e1 f7       	brne	.-8      	; 0x56e <strrev+0x4>
 576:	32 97       	sbiw	r30, 0x02	; 2
 578:	04 c0       	rjmp	.+8      	; 0x582 <strrev+0x18>
 57a:	7c 91       	ld	r23, X
 57c:	6d 93       	st	X+, r22
 57e:	70 83       	st	Z, r23
 580:	62 91       	ld	r22, -Z
 582:	ae 17       	cp	r26, r30
 584:	bf 07       	cpc	r27, r31
 586:	c8 f3       	brcs	.-14     	; 0x57a <strrev+0x10>
 588:	08 95       	ret

0000058a <_exit>:
 58a:	f8 94       	cli

0000058c <__stop_program>:
 58c:	ff cf       	rjmp	.-2      	; 0x58c <__stop_program>
