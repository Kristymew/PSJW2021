
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000022  00800100  000003b6  0000044a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000003b6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  00800122  00800122  0000046c  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000049c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000c0  00000000  00000000  000004dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000011cf  00000000  00000000  0000059c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d1a  00000000  00000000  0000176b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000006b0  00000000  00000000  00002485  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000194  00000000  00000000  00002b38  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000628  00000000  00000000  00002ccc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000002cf  00000000  00000000  000032f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000090  00000000  00000000  000035c3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 c2 00 	jmp	0x184	; 0x184 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e6 eb       	ldi	r30, 0xB6	; 182
  c0:	f3 e0       	ldi	r31, 0x03	; 3
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a2 32       	cpi	r26, 0x22	; 34
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a2 e2       	ldi	r26, 0x22	; 34
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a3 32       	cpi	r26, 0x23	; 35
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 ec 00 	call	0x1d8	; 0x1d8 <main>
  e2:	0c 94 d9 01 	jmp	0x3b2	; 0x3b2 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <initUsart1>:
#include <util/delay.h>

#include "USART1_irq.h"

void initUsart1() {
	UCSR1A = 0;
  ea:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1B = (1 << RXEN1) | (1 << TXEN1) | (1 << RXCIE1) | (1 << RXCIE1);	// Enables the receiver and transmitter, TX=PD1 RX=PD0, also enable RX and TX interrupts
  ee:	88 e9       	ldi	r24, 0x98	; 152
  f0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = (1 << UCSZ11) | (1 << UCSZ10);		// Set data frame format: asynchronous mode, no parity, 1 stop bit, 8 bit size
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>

	/* Set the baudrate to 9600 */
	UBRR1H = 00;              					// Load lower 8-bits UBRR register
  fa:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = 103;             					// Load upper 8-bits of to high byte  UBRR register
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
	sei();										// The sei() function converts the I bit in the SREG of the microcontroller set leaving the microcontroller on	interrupts can respond
 104:	78 94       	sei
 106:	08 95       	ret

00000108 <writeChar>:
}

/* USART RX and TX */
void writeChar(char data) {
	while(!(UCSR1A & (1 << UDRE1)));			// Wait for empty transmit buffer
 108:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 10c:	95 ff       	sbrs	r25, 5
 10e:	fc cf       	rjmp	.-8      	; 0x108 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
 110:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 114:	08 95       	ret

00000116 <writeString>:
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
 116:	0f 93       	push	r16
 118:	1f 93       	push	r17
 11a:	cf 93       	push	r28
 11c:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i = 0; st[i] != 0 ; i++) {				// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 11e:	c0 e0       	ldi	r28, 0x00	; 0
 120:	03 c0       	rjmp	.+6      	; 0x128 <writeString+0x12>
		writeChar(st[i]);						// Verstuur de string via USARTn
 122:	0e 94 84 00 	call	0x108	; 0x108 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
	uint8_t i;
	for(i = 0; st[i] != 0 ; i++) {				// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 126:	cf 5f       	subi	r28, 0xFF	; 255
 128:	f8 01       	movw	r30, r16
 12a:	ec 0f       	add	r30, r28
 12c:	f1 1d       	adc	r31, r1
 12e:	80 81       	ld	r24, Z
 130:	81 11       	cpse	r24, r1
 132:	f7 cf       	rjmp	.-18     	; 0x122 <writeString+0xc>
		writeChar(st[i]);						// Verstuur de string via USARTn
	}
}
 134:	cf 91       	pop	r28
 136:	1f 91       	pop	r17
 138:	0f 91       	pop	r16
 13a:	08 95       	ret

0000013c <writeInt>:

void writeInt(int16_t i) {
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
 144:	28 97       	sbiw	r28, 0x08	; 8
 146:	0f b6       	in	r0, 0x3f	; 63
 148:	f8 94       	cli
 14a:	de bf       	out	0x3e, r29	; 62
 14c:	0f be       	out	0x3f, r0	; 63
 14e:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 150:	4a e0       	ldi	r20, 0x0A	; 10
 152:	be 01       	movw	r22, r28
 154:	6f 5f       	subi	r22, 0xFF	; 255
 156:	7f 4f       	sbci	r23, 0xFF	; 255
 158:	0e 94 a4 01 	call	0x348	; 0x348 <__itoa_ncheck>
	char buffer[8];								// Array in memory waar de string opgeslagen moet worden
	itoa(i, buffer, 10);						// Zet de ingelezen integer i om in een string (weergave: 10 = decimaal, 16 = hex, 2 = binary)
	writeString(buffer);						// Verstuur de waarde van i, die opgeslagen is op de locatie van de buffer
 15c:	ce 01       	movw	r24, r28
 15e:	01 96       	adiw	r24, 0x01	; 1
 160:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
}
 164:	28 96       	adiw	r28, 0x08	; 8
 166:	0f b6       	in	r0, 0x3f	; 63
 168:	f8 94       	cli
 16a:	de bf       	out	0x3e, r29	; 62
 16c:	0f be       	out	0x3f, r0	; 63
 16e:	cd bf       	out	0x3d, r28	; 61
 170:	df 91       	pop	r29
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <readChar>:

unsigned char readChar() {
	while(!(UCSR1A & (1 << RXC1)));				// Wait for data to be received
 176:	80 91 c8 00 	lds	r24, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 17a:	88 23       	and	r24, r24
 17c:	e4 f7       	brge	.-8      	; 0x176 <readChar>
	return UDR1;								// Get and return received data from buffer
 17e:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 182:	08 95       	ret

00000184 <__vector_25>:
	counter++;

	_delay_ms(1000);
}*/

ISR(USART1_RX_vect) {							// When you receive data, calls the ISR
 184:	1f 92       	push	r1
 186:	0f 92       	push	r0
 188:	0f b6       	in	r0, 0x3f	; 63
 18a:	0f 92       	push	r0
 18c:	11 24       	eor	r1, r1
 18e:	2f 93       	push	r18
 190:	3f 93       	push	r19
 192:	4f 93       	push	r20
 194:	5f 93       	push	r21
 196:	6f 93       	push	r22
 198:	7f 93       	push	r23
 19a:	8f 93       	push	r24
 19c:	9f 93       	push	r25
 19e:	af 93       	push	r26
 1a0:	bf 93       	push	r27
 1a2:	ef 93       	push	r30
 1a4:	ff 93       	push	r31
	receivedData = readChar();					// Read the incoming byte (data from the keyboard)
 1a6:	0e 94 bb 00 	call	0x176	; 0x176 <readChar>
 1aa:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	direction(receivedData);					// Send the receivedData as parameter to the function direction
 1ae:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1b2:	0e 94 5a 01 	call	0x2b4	; 0x2b4 <direction>
}
 1b6:	ff 91       	pop	r31
 1b8:	ef 91       	pop	r30
 1ba:	bf 91       	pop	r27
 1bc:	af 91       	pop	r26
 1be:	9f 91       	pop	r25
 1c0:	8f 91       	pop	r24
 1c2:	7f 91       	pop	r23
 1c4:	6f 91       	pop	r22
 1c6:	5f 91       	pop	r21
 1c8:	4f 91       	pop	r20
 1ca:	3f 91       	pop	r19
 1cc:	2f 91       	pop	r18
 1ce:	0f 90       	pop	r0
 1d0:	0f be       	out	0x3f, r0	; 63
 1d2:	0f 90       	pop	r0
 1d4:	1f 90       	pop	r1
 1d6:	18 95       	reti

000001d8 <main>:

int main(void) {
	initUsart1();								// Initialization for the registers
 1d8:	0e 94 75 00 	call	0xea	; 0xea <initUsart1>
	initPWM();
 1dc:	0e 94 13 01 	call	0x226	; 0x226 <initPWM>
	
	while(1) {
		//writeChar('\f');						// Clear screen
		writeString("Sensordata Temp: ");
 1e0:	81 e0       	ldi	r24, 0x01	; 1
 1e2:	91 e0       	ldi	r25, 0x01	; 1
 1e4:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeInt(counter);						// Print the counter data every 1ms, should be done with timer
 1e8:	80 91 22 01 	lds	r24, 0x0122	; 0x800122 <__data_end>
 1ec:	90 e0       	ldi	r25, 0x00	; 0
 1ee:	0e 94 9e 00 	call	0x13c	; 0x13c <writeInt>
		writeString("\n");
 1f2:	83 e1       	ldi	r24, 0x13	; 19
 1f4:	91 e0       	ldi	r25, 0x01	; 1
 1f6:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		
		writeString("Direction: ");
 1fa:	85 e1       	ldi	r24, 0x15	; 21
 1fc:	91 e0       	ldi	r25, 0x01	; 1
 1fe:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
		writeChar(receivedData);				// Show received input from pc
 202:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 206:	0e 94 84 00 	call	0x108	; 0x108 <writeChar>
		writeString("\n");
 20a:	83 e1       	ldi	r24, 0x13	; 19
 20c:	91 e0       	ldi	r25, 0x01	; 1
 20e:	0e 94 8b 00 	call	0x116	; 0x116 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 212:	2f ef       	ldi	r18, 0xFF	; 255
 214:	83 ed       	ldi	r24, 0xD3	; 211
 216:	90 e3       	ldi	r25, 0x30	; 48
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <main+0x40>
 220:	00 c0       	rjmp	.+0      	; 0x222 <main+0x4a>
 222:	00 00       	nop
 224:	dd cf       	rjmp	.-70     	; 0x1e0 <main+0x8>

00000226 <initPWM>:
}

void turnRightWide(int speed, int speed2) {		// Left motor PWM higher than right motor
	PORTB = (0 << PORTB1) | (0 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// Set left and right motors forward
	OCR1A = speed;   							// Set the speed of the left motor with PWM
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 226:	80 ea       	ldi	r24, 0xA0	; 160
 228:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 22c:	81 e1       	ldi	r24, 0x11	; 17
 22e:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 232:	80 e9       	ldi	r24, 0x90	; 144
 234:	91 e0       	ldi	r25, 0x01	; 1
 236:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 23a:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 23e:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 242:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 246:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 24a:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 24e:	84 b1       	in	r24, 0x04	; 4
 250:	86 66       	ori	r24, 0x66	; 102
 252:	84 b9       	out	0x04, r24	; 4
 254:	08 95       	ret

00000256 <forward>:
 256:	20 e6       	ldi	r18, 0x60	; 96
 258:	25 b9       	out	0x05, r18	; 5
 25a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 25e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 262:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 266:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 26a:	08 95       	ret

0000026c <turnRight>:
 26c:	20 e4       	ldi	r18, 0x40	; 64
 26e:	25 b9       	out	0x05, r18	; 5
 270:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 274:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 278:	08 95       	ret

0000027a <turnLeft>:
 27a:	20 e2       	ldi	r18, 0x20	; 32
 27c:	25 b9       	out	0x05, r18	; 5
 27e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 282:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 286:	08 95       	ret

00000288 <backward>:
 288:	26 e6       	ldi	r18, 0x66	; 102
 28a:	25 b9       	out	0x05, r18	; 5
 28c:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 290:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 294:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 298:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 29c:	08 95       	ret

0000029e <turnLeftWide>:
}

void turnLeftWide(int speed, int speed2) {		// Right motor PWM higher than left motor
	PORTB = (0 << PORTB1) | (0 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// Set left and right motors forward
 29e:	20 e6       	ldi	r18, 0x60	; 96
 2a0:	25 b9       	out	0x05, r18	; 5
	OCR1A = speed;   							// Set the speed of the left motor with PWM
 2a2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 2a6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 2aa:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 2ae:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 2b2:	08 95       	ret

000002b4 <direction>:
}

/* Function that calls the function of the PWM motor to give instructions depending on the input from the user */
void direction(char inputKeyboard) {
	switch(inputKeyboard) {
 2b4:	85 36       	cpi	r24, 0x65	; 101
 2b6:	81 f1       	breq	.+96     	; 0x318 <direction+0x64>
 2b8:	28 f4       	brcc	.+10     	; 0x2c4 <direction+0x10>
 2ba:	81 36       	cpi	r24, 0x61	; 97
 2bc:	a1 f0       	breq	.+40     	; 0x2e6 <direction+0x32>
 2be:	84 36       	cpi	r24, 0x64	; 100
 2c0:	d9 f0       	breq	.+54     	; 0x2f8 <direction+0x44>
 2c2:	31 c0       	rjmp	.+98     	; 0x326 <direction+0x72>
 2c4:	83 37       	cpi	r24, 0x73	; 115
 2c6:	51 f0       	breq	.+20     	; 0x2dc <direction+0x28>
 2c8:	87 37       	cpi	r24, 0x77	; 119
 2ca:	19 f0       	breq	.+6      	; 0x2d2 <direction+0x1e>
 2cc:	81 37       	cpi	r24, 0x71	; 113
 2ce:	59 f5       	brne	.+86     	; 0x326 <direction+0x72>
 2d0:	1c c0       	rjmp	.+56     	; 0x30a <direction+0x56>
		case 'w':
			forward(150);
 2d2:	86 e9       	ldi	r24, 0x96	; 150
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	0e 94 2b 01 	call	0x256	; 0x256 <forward>
			break;
 2da:	08 95       	ret
		case 's':
			backward(150);
 2dc:	86 e9       	ldi	r24, 0x96	; 150
 2de:	90 e0       	ldi	r25, 0x00	; 0
 2e0:	0e 94 44 01 	call	0x288	; 0x288 <backward>
			break;
 2e4:	08 95       	ret
		case 'a':
			turnLeft(150);
 2e6:	86 e9       	ldi	r24, 0x96	; 150
 2e8:	90 e0       	ldi	r25, 0x00	; 0
 2ea:	0e 94 3d 01 	call	0x27a	; 0x27a <turnLeft>
			turnRight(0);
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	90 e0       	ldi	r25, 0x00	; 0
 2f2:	0e 94 36 01 	call	0x26c	; 0x26c <turnRight>
			break;
 2f6:	08 95       	ret
		case 'd':
			turnRight(150);
 2f8:	86 e9       	ldi	r24, 0x96	; 150
 2fa:	90 e0       	ldi	r25, 0x00	; 0
 2fc:	0e 94 36 01 	call	0x26c	; 0x26c <turnRight>
			turnLeft(0);
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	90 e0       	ldi	r25, 0x00	; 0
 304:	0e 94 3d 01 	call	0x27a	; 0x27a <turnLeft>
			break;
 308:	08 95       	ret
		case 'q':
			turnLeftWide(150, 50);
 30a:	62 e3       	ldi	r22, 0x32	; 50
 30c:	70 e0       	ldi	r23, 0x00	; 0
 30e:	86 e9       	ldi	r24, 0x96	; 150
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 4f 01 	call	0x29e	; 0x29e <turnLeftWide>
			break;
 316:	08 95       	ret
		case 'e':
			turnLeftWide(50, 150);
 318:	66 e9       	ldi	r22, 0x96	; 150
 31a:	70 e0       	ldi	r23, 0x00	; 0
 31c:	82 e3       	ldi	r24, 0x32	; 50
 31e:	90 e0       	ldi	r25, 0x00	; 0
 320:	0e 94 4f 01 	call	0x29e	; 0x29e <turnLeftWide>
			break;
 324:	08 95       	ret
		default:								// By no input, no actions
			forward(0);
 326:	80 e0       	ldi	r24, 0x00	; 0
 328:	90 e0       	ldi	r25, 0x00	; 0
 32a:	0e 94 2b 01 	call	0x256	; 0x256 <forward>
			backward(0);
 32e:	80 e0       	ldi	r24, 0x00	; 0
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 44 01 	call	0x288	; 0x288 <backward>
			turnLeft(0);
 336:	80 e0       	ldi	r24, 0x00	; 0
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 3d 01 	call	0x27a	; 0x27a <turnLeft>
			turnRight(0);
 33e:	80 e0       	ldi	r24, 0x00	; 0
 340:	90 e0       	ldi	r25, 0x00	; 0
 342:	0e 94 36 01 	call	0x26c	; 0x26c <turnRight>
 346:	08 95       	ret

00000348 <__itoa_ncheck>:
 348:	bb 27       	eor	r27, r27
 34a:	4a 30       	cpi	r20, 0x0A	; 10
 34c:	31 f4       	brne	.+12     	; 0x35a <__itoa_ncheck+0x12>
 34e:	99 23       	and	r25, r25
 350:	22 f4       	brpl	.+8      	; 0x35a <__itoa_ncheck+0x12>
 352:	bd e2       	ldi	r27, 0x2D	; 45
 354:	90 95       	com	r25
 356:	81 95       	neg	r24
 358:	9f 4f       	sbci	r25, 0xFF	; 255
 35a:	0c 94 b0 01 	jmp	0x360	; 0x360 <__utoa_common>

0000035e <__utoa_ncheck>:
 35e:	bb 27       	eor	r27, r27

00000360 <__utoa_common>:
 360:	fb 01       	movw	r30, r22
 362:	55 27       	eor	r21, r21
 364:	aa 27       	eor	r26, r26
 366:	88 0f       	add	r24, r24
 368:	99 1f       	adc	r25, r25
 36a:	aa 1f       	adc	r26, r26
 36c:	a4 17       	cp	r26, r20
 36e:	10 f0       	brcs	.+4      	; 0x374 <__utoa_common+0x14>
 370:	a4 1b       	sub	r26, r20
 372:	83 95       	inc	r24
 374:	50 51       	subi	r21, 0x10	; 16
 376:	b9 f7       	brne	.-18     	; 0x366 <__utoa_common+0x6>
 378:	a0 5d       	subi	r26, 0xD0	; 208
 37a:	aa 33       	cpi	r26, 0x3A	; 58
 37c:	08 f0       	brcs	.+2      	; 0x380 <__utoa_common+0x20>
 37e:	a9 5d       	subi	r26, 0xD9	; 217
 380:	a1 93       	st	Z+, r26
 382:	00 97       	sbiw	r24, 0x00	; 0
 384:	79 f7       	brne	.-34     	; 0x364 <__utoa_common+0x4>
 386:	b1 11       	cpse	r27, r1
 388:	b1 93       	st	Z+, r27
 38a:	11 92       	st	Z+, r1
 38c:	cb 01       	movw	r24, r22
 38e:	0c 94 c9 01 	jmp	0x392	; 0x392 <strrev>

00000392 <strrev>:
 392:	dc 01       	movw	r26, r24
 394:	fc 01       	movw	r30, r24
 396:	67 2f       	mov	r22, r23
 398:	71 91       	ld	r23, Z+
 39a:	77 23       	and	r23, r23
 39c:	e1 f7       	brne	.-8      	; 0x396 <strrev+0x4>
 39e:	32 97       	sbiw	r30, 0x02	; 2
 3a0:	04 c0       	rjmp	.+8      	; 0x3aa <strrev+0x18>
 3a2:	7c 91       	ld	r23, X
 3a4:	6d 93       	st	X+, r22
 3a6:	70 83       	st	Z, r23
 3a8:	62 91       	ld	r22, -Z
 3aa:	ae 17       	cp	r26, r30
 3ac:	bf 07       	cpc	r27, r31
 3ae:	c8 f3       	brcs	.-14     	; 0x3a2 <strrev+0x10>
 3b0:	08 95       	ret

000003b2 <_exit>:
 3b2:	f8 94       	cli

000003b4 <__stop_program>:
 3b4:	ff cf       	rjmp	.-2      	; 0x3b4 <__stop_program>
