
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000038  00800100  00000514  000005a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000514  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800138  00800138  000005e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000005e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000610  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000000d0  00000000  00000000  00000650  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000012e4  00000000  00000000  00000720  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000d16  00000000  00000000  00001a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000074c  00000000  00000000  0000271a  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000001dc  00000000  00000000  00002e68  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000674  00000000  00000000  00003044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000361  00000000  00000000  000036b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000a0  00000000  00000000  00003a19  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 56 00 	jmp	0xac	; 0xac <__ctors_end>
   4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
   c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  10:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  14:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  18:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  1c:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <__vector_7>
  20:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  24:	0c 94 fd 00 	jmp	0x1fa	; 0x1fa <__vector_9>
  28:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  2c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  30:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  34:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  38:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  3c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  40:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  44:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  48:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  4c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  50:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  54:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  58:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  5c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  60:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  64:	0c 94 ba 00 	jmp	0x174	; 0x174 <__vector_25>
  68:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  6c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  70:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  74:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  78:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  7c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  80:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  84:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  88:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  8c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  90:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  94:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  98:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  9c:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a0:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a4:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>
  a8:	0c 94 73 00 	jmp	0xe6	; 0xe6 <__bad_interrupt>

000000ac <__ctors_end>:
  ac:	11 24       	eor	r1, r1
  ae:	1f be       	out	0x3f, r1	; 63
  b0:	cf ef       	ldi	r28, 0xFF	; 255
  b2:	da e0       	ldi	r29, 0x0A	; 10
  b4:	de bf       	out	0x3e, r29	; 62
  b6:	cd bf       	out	0x3d, r28	; 61

000000b8 <__do_copy_data>:
  b8:	11 e0       	ldi	r17, 0x01	; 1
  ba:	a0 e0       	ldi	r26, 0x00	; 0
  bc:	b1 e0       	ldi	r27, 0x01	; 1
  be:	e4 e1       	ldi	r30, 0x14	; 20
  c0:	f5 e0       	ldi	r31, 0x05	; 5
  c2:	02 c0       	rjmp	.+4      	; 0xc8 <__do_copy_data+0x10>
  c4:	05 90       	lpm	r0, Z+
  c6:	0d 92       	st	X+, r0
  c8:	a8 33       	cpi	r26, 0x38	; 56
  ca:	b1 07       	cpc	r27, r17
  cc:	d9 f7       	brne	.-10     	; 0xc4 <__do_copy_data+0xc>

000000ce <__do_clear_bss>:
  ce:	21 e0       	ldi	r18, 0x01	; 1
  d0:	a8 e3       	ldi	r26, 0x38	; 56
  d2:	b1 e0       	ldi	r27, 0x01	; 1
  d4:	01 c0       	rjmp	.+2      	; 0xd8 <.do_clear_bss_start>

000000d6 <.do_clear_bss_loop>:
  d6:	1d 92       	st	X+, r1

000000d8 <.do_clear_bss_start>:
  d8:	a0 34       	cpi	r26, 0x40	; 64
  da:	b2 07       	cpc	r27, r18
  dc:	e1 f7       	brne	.-8      	; 0xd6 <.do_clear_bss_loop>
  de:	0e 94 34 01 	call	0x268	; 0x268 <main>
  e2:	0c 94 88 02 	jmp	0x510	; 0x510 <_exit>

000000e6 <__bad_interrupt>:
  e6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ea <initUsart1>:
#include <util/delay.h>

#include "USART1_irq.h"

void initUsart1() {
	UCSR1A = 0;
  ea:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);	// Enables the receiver and transmitter, TX=PD1 RX=PD0, also enable RX and TX interrupts
  ee:	88 e9       	ldi	r24, 0x98	; 152
  f0:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);		// Set data frame format: asynchronous mode, no parity, 1 stop bit, 8 bit size
  f4:	86 e0       	ldi	r24, 0x06	; 6
  f6:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>

	/* Set the baudrate to 9600 */
	UBRR1H = 00;              					// Load lower 8-bits UBRR register
  fa:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = 103;             					// Load upper 8-bits of to high byte  UBRR register
  fe:	87 e6       	ldi	r24, 0x67	; 103
 100:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 104:	08 95       	ret

00000106 <writeChar>:
}

/* USART RX */
void writeChar(char data) {
	while(!(UCSR1A & (1<<UDRE1)));				// Wait for empty transmit buffer
 106:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 10a:	95 ff       	sbrs	r25, 5
 10c:	fc cf       	rjmp	.-8      	; 0x106 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
 10e:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 112:	08 95       	ret

00000114 <writeString>:
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
 114:	0f 93       	push	r16
 116:	1f 93       	push	r17
 118:	cf 93       	push	r28
 11a:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; st[i]!=0 ; i++) {					// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 11c:	c0 e0       	ldi	r28, 0x00	; 0
 11e:	03 c0       	rjmp	.+6      	; 0x126 <writeString+0x12>
		writeChar(st[i]);						// Verstuur de string via USARTn
 120:	0e 94 83 00 	call	0x106	; 0x106 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
	uint8_t i;
	for(i=0; st[i]!=0 ; i++) {					// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 124:	cf 5f       	subi	r28, 0xFF	; 255
 126:	f8 01       	movw	r30, r16
 128:	ec 0f       	add	r30, r28
 12a:	f1 1d       	adc	r31, r1
 12c:	80 81       	ld	r24, Z
 12e:	81 11       	cpse	r24, r1
 130:	f7 cf       	rjmp	.-18     	; 0x120 <writeString+0xc>
		writeChar(st[i]);						// Verstuur de string via USARTn
	}
}
 132:	cf 91       	pop	r28
 134:	1f 91       	pop	r17
 136:	0f 91       	pop	r16
 138:	08 95       	ret

0000013a <writeInt>:

void writeInt(int16_t i) {
 13a:	cf 93       	push	r28
 13c:	df 93       	push	r29
 13e:	cd b7       	in	r28, 0x3d	; 61
 140:	de b7       	in	r29, 0x3e	; 62
 142:	28 97       	sbiw	r28, 0x08	; 8
 144:	0f b6       	in	r0, 0x3f	; 63
 146:	f8 94       	cli
 148:	de bf       	out	0x3e, r29	; 62
 14a:	0f be       	out	0x3f, r0	; 63
 14c:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 14e:	4a e0       	ldi	r20, 0x0A	; 10
 150:	be 01       	movw	r22, r28
 152:	6f 5f       	subi	r22, 0xFF	; 255
 154:	7f 4f       	sbci	r23, 0xFF	; 255
 156:	0e 94 53 02 	call	0x4a6	; 0x4a6 <__itoa_ncheck>
	char buffer[8];								// Array in memory waar de string opgeslagen moet worden
	itoa(i, buffer, 10);						// Zet de ingelezen integer i om in een string (weergave: 10 = decimaal, 16 = hex, 2 = binary)
	writeString(buffer);						// Verstuur de waarde van i, die opgeslagen is op de locatie van de buffer
 15a:	ce 01       	movw	r24, r28
 15c:	01 96       	adiw	r24, 0x01	; 1
 15e:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
 162:	28 96       	adiw	r28, 0x08	; 8
 164:	0f b6       	in	r0, 0x3f	; 63
 166:	f8 94       	cli
 168:	de bf       	out	0x3e, r29	; 62
 16a:	0f be       	out	0x3f, r0	; 63
 16c:	cd bf       	out	0x3d, r28	; 61
 16e:	df 91       	pop	r29
 170:	cf 91       	pop	r28
 172:	08 95       	ret

00000174 <__vector_25>:
static volatile uint16_t ticksLeft;
static volatile uint16_t ticksRight;
static volatile uint16_t ticksTotal;
static volatile uint16_t distance;

ISR(USART1_RX_vect) {							// When you receive data, calls the ISR
 174:	1f 92       	push	r1
 176:	0f 92       	push	r0
 178:	0f b6       	in	r0, 0x3f	; 63
 17a:	0f 92       	push	r0
 17c:	11 24       	eor	r1, r1
 17e:	2f 93       	push	r18
 180:	3f 93       	push	r19
 182:	4f 93       	push	r20
 184:	5f 93       	push	r21
 186:	6f 93       	push	r22
 188:	7f 93       	push	r23
 18a:	8f 93       	push	r24
 18c:	9f 93       	push	r25
 18e:	af 93       	push	r26
 190:	bf 93       	push	r27
 192:	ef 93       	push	r30
 194:	ff 93       	push	r31
	receivedData = UDR1;						// Read the incoming byte (data from the keyboard)
 196:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 19a:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	direction(receivedData);					// Send the receivedData as parameter to the function direction
 19e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 1a2:	0e 94 f5 01 	call	0x3ea	; 0x3ea <direction>
}
 1a6:	ff 91       	pop	r31
 1a8:	ef 91       	pop	r30
 1aa:	bf 91       	pop	r27
 1ac:	af 91       	pop	r26
 1ae:	9f 91       	pop	r25
 1b0:	8f 91       	pop	r24
 1b2:	7f 91       	pop	r23
 1b4:	6f 91       	pop	r22
 1b6:	5f 91       	pop	r21
 1b8:	4f 91       	pop	r20
 1ba:	3f 91       	pop	r19
 1bc:	2f 91       	pop	r18
 1be:	0f 90       	pop	r0
 1c0:	0f be       	out	0x3f, r0	; 63
 1c2:	0f 90       	pop	r0
 1c4:	1f 90       	pop	r1
 1c6:	18 95       	reti

000001c8 <__vector_7>:

// Right
ISR(INT6_vect) {								// Enable interrupt on PE6 for the right encoder
 1c8:	1f 92       	push	r1
 1ca:	0f 92       	push	r0
 1cc:	0f b6       	in	r0, 0x3f	; 63
 1ce:	0f 92       	push	r0
 1d0:	11 24       	eor	r1, r1
 1d2:	8f 93       	push	r24
 1d4:	9f 93       	push	r25
	uint8_t rightEncoderTicks;
	rightEncoderTicks = PORTE & (1<<PORTE6);

	if(rightEncoderTicks) {
 1d6:	76 9b       	sbis	0x0e, 6	; 14
 1d8:	09 c0       	rjmp	.+18     	; 0x1ec <__vector_7+0x24>
		ticksRight++;
 1da:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ticksRight>
 1de:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ticksRight+0x1>
 1e2:	01 96       	adiw	r24, 0x01	; 1
 1e4:	90 93 3d 01 	sts	0x013D, r25	; 0x80013d <ticksRight+0x1>
 1e8:	80 93 3c 01 	sts	0x013C, r24	; 0x80013c <ticksRight>
	}
}
 1ec:	9f 91       	pop	r25
 1ee:	8f 91       	pop	r24
 1f0:	0f 90       	pop	r0
 1f2:	0f be       	out	0x3f, r0	; 63
 1f4:	0f 90       	pop	r0
 1f6:	1f 90       	pop	r1
 1f8:	18 95       	reti

000001fa <__vector_9>:

// Left
ISR(PCINT0_vect) {								// Enable interrupt on PB4 for the left encoder
 1fa:	1f 92       	push	r1
 1fc:	0f 92       	push	r0
 1fe:	0f b6       	in	r0, 0x3f	; 63
 200:	0f 92       	push	r0
 202:	11 24       	eor	r1, r1
 204:	8f 93       	push	r24
 206:	9f 93       	push	r25
	uint8_t leftEncoderTicks;
	leftEncoderTicks = PINB & (1<<PINB4);

	if(leftEncoderTicks) {
 208:	1c 9b       	sbis	0x03, 4	; 3
 20a:	09 c0       	rjmp	.+18     	; 0x21e <__vector_9+0x24>
		ticksLeft++;
 20c:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ticksLeft>
 210:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ticksLeft+0x1>
 214:	01 96       	adiw	r24, 0x01	; 1
 216:	90 93 3f 01 	sts	0x013F, r25	; 0x80013f <ticksLeft+0x1>
 21a:	80 93 3e 01 	sts	0x013E, r24	; 0x80013e <ticksLeft>
	}
}
 21e:	9f 91       	pop	r25
 220:	8f 91       	pop	r24
 222:	0f 90       	pop	r0
 224:	0f be       	out	0x3f, r0	; 63
 226:	0f 90       	pop	r0
 228:	1f 90       	pop	r1
 22a:	18 95       	reti

0000022c <initEncoders>:
	}
}

void initEncoders() {
	// Enable interrupt on PE6 for the right encoder
	DDRE &= ~(1<<PORTE6);						// Set PE6 as input, right encoder XORed signal
 22c:	8d b1       	in	r24, 0x0d	; 13
 22e:	8f 7b       	andi	r24, 0xBF	; 191
 230:	8d b9       	out	0x0d, r24	; 13
	DDRF &= ~(1<<PORTF0);						// Set PF0 as input
 232:	80 b3       	in	r24, 0x10	; 16
 234:	8e 7f       	andi	r24, 0xFE	; 254
 236:	80 bb       	out	0x10, r24	; 16
	EICRB = (1<<ISC60) | ~(1<<ISC61);			// Trigger off the rising edge of INT6
 238:	8f ed       	ldi	r24, 0xDF	; 223
 23a:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
	EIMSK = 1<<INT6;							// Enable INT6 interrupt
 23e:	80 e4       	ldi	r24, 0x40	; 64
 240:	8d bb       	out	0x1d, r24	; 29
	//EIFR = 1<<INT6;								//Enables Flag

	// Enable pin-change interrupt on PB4 for left encoder, and disable other pin-change interrupts
	DDRB &= ~(1<<PINB4);						// Set PB4 as input, left encoder XORed signal
 242:	84 b1       	in	r24, 0x04	; 4
 244:	8f 7e       	andi	r24, 0xEF	; 239
 246:	84 b9       	out	0x04, r24	; 4
	DDRE &= ~(1<<PORTE2);						// Set PE2 as input
 248:	8d b1       	in	r24, 0x0d	; 13
 24a:	8b 7f       	andi	r24, 0xFB	; 251
 24c:	8d b9       	out	0x0d, r24	; 13
	PCICR |= 1<<PCIE0;						// Set PCIE0 to enable PCMSK0 scan
 24e:	e8 e6       	ldi	r30, 0x68	; 104
 250:	f0 e0       	ldi	r31, 0x00	; 0
 252:	80 81       	ld	r24, Z
 254:	81 60       	ori	r24, 0x01	; 1
 256:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT4;						// Set PCINT4 to trigger an interrupt on state change
 258:	eb e6       	ldi	r30, 0x6B	; 107
 25a:	f0 e0       	ldi	r31, 0x00	; 0
 25c:	80 81       	ld	r24, Z
 25e:	80 61       	ori	r24, 0x10	; 16
 260:	80 83       	st	Z, r24
	PCIFR = 1<<PCIF0;							// Clear its interrupt flag by writing a 1
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	8b bb       	out	0x1b, r24	; 27
 266:	08 95       	ret

00000268 <main>:
		ticksLeft++;
	}
}

int main(void) {
	initUsart1();								// Initialization for the registers
 268:	0e 94 75 00 	call	0xea	; 0xea <initUsart1>
	initPWM();
 26c:	0e 94 ae 01 	call	0x35c	; 0x35c <initPWM>
	initEncoders();
 270:	0e 94 16 01 	call	0x22c	; 0x22c <initEncoders>
	sei();										// The sei() function converts the I bit in the SREG of the microcontroller set leaving the microcontroller on	interrupts can respond
 274:	78 94       	sei

	DDRC |= (1<PORTC7);
 276:	87 b1       	in	r24, 0x07	; 7
 278:	81 60       	ori	r24, 0x01	; 1
 27a:	87 b9       	out	0x07, r24	; 7

	while(1) {
		ticksTotal = ticksLeft+ticksRight;		// (ticksLeft/2)+(ticksRight/2);
 27c:	20 91 3e 01 	lds	r18, 0x013E	; 0x80013e <ticksLeft>
 280:	30 91 3f 01 	lds	r19, 0x013F	; 0x80013f <ticksLeft+0x1>
 284:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ticksRight>
 288:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ticksRight+0x1>
 28c:	82 0f       	add	r24, r18
 28e:	93 1f       	adc	r25, r19
 290:	90 93 3b 01 	sts	0x013B, r25	; 0x80013b <ticksTotal+0x1>
 294:	80 93 3a 01 	sts	0x013A, r24	; 0x80013a <ticksTotal>
		distance = (ticksTotal/1204)*12;		// (ticks/cpr)*(pi*diameter), pi*3.9cm = 12.2522113490 ~12
 298:	80 91 3a 01 	lds	r24, 0x013A	; 0x80013a <ticksTotal>
 29c:	90 91 3b 01 	lds	r25, 0x013B	; 0x80013b <ticksTotal+0x1>
 2a0:	64 eb       	ldi	r22, 0xB4	; 180
 2a2:	74 e0       	ldi	r23, 0x04	; 4
 2a4:	0e 94 3f 02 	call	0x47e	; 0x47e <__udivmodhi4>
 2a8:	cb 01       	movw	r24, r22
 2aa:	88 0f       	add	r24, r24
 2ac:	99 1f       	adc	r25, r25
 2ae:	68 0f       	add	r22, r24
 2b0:	79 1f       	adc	r23, r25
 2b2:	66 0f       	add	r22, r22
 2b4:	77 1f       	adc	r23, r23
 2b6:	66 0f       	add	r22, r22
 2b8:	77 1f       	adc	r23, r23
 2ba:	70 93 39 01 	sts	0x0139, r23	; 0x800139 <__data_end+0x1>
 2be:	60 93 38 01 	sts	0x0138, r22	; 0x800138 <__data_end>
		
		if(ticksLeft >= 2000) {
 2c2:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ticksLeft>
 2c6:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ticksLeft+0x1>
 2ca:	80 3d       	cpi	r24, 0xD0	; 208
 2cc:	97 40       	sbci	r25, 0x07	; 7
 2ce:	10 f0       	brcs	.+4      	; 0x2d4 <main+0x6c>
			PORTC = 1<<PORTC7;
 2d0:	80 e8       	ldi	r24, 0x80	; 128
 2d2:	88 b9       	out	0x08, r24	; 8
		}
		
		writeString("Direction: ");
 2d4:	81 e0       	ldi	r24, 0x01	; 1
 2d6:	91 e0       	ldi	r25, 0x01	; 1
 2d8:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeChar(receivedData);				// Show received input from pc
 2dc:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 2e0:	0e 94 83 00 	call	0x106	; 0x106 <writeChar>
		writeString("\r\n");
 2e4:	8d e0       	ldi	r24, 0x0D	; 13
 2e6:	91 e0       	ldi	r25, 0x01	; 1
 2e8:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>

		writeString("ticksLeft: ");
 2ec:	80 e1       	ldi	r24, 0x10	; 16
 2ee:	91 e0       	ldi	r25, 0x01	; 1
 2f0:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeInt(ticksLeft);
 2f4:	80 91 3e 01 	lds	r24, 0x013E	; 0x80013e <ticksLeft>
 2f8:	90 91 3f 01 	lds	r25, 0x013F	; 0x80013f <ticksLeft+0x1>
 2fc:	0e 94 9d 00 	call	0x13a	; 0x13a <writeInt>
		writeString("\n\r");
 300:	8c e1       	ldi	r24, 0x1C	; 28
 302:	91 e0       	ldi	r25, 0x01	; 1
 304:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>

		writeString("ticksRight: ");
 308:	8f e1       	ldi	r24, 0x1F	; 31
 30a:	91 e0       	ldi	r25, 0x01	; 1
 30c:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeInt(ticksRight);
 310:	80 91 3c 01 	lds	r24, 0x013C	; 0x80013c <ticksRight>
 314:	90 91 3d 01 	lds	r25, 0x013D	; 0x80013d <ticksRight+0x1>
 318:	0e 94 9d 00 	call	0x13a	; 0x13a <writeInt>
		writeString("\n\r");
 31c:	8c e1       	ldi	r24, 0x1C	; 28
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>

		writeString("Distance: ");
 324:	8c e2       	ldi	r24, 0x2C	; 44
 326:	91 e0       	ldi	r25, 0x01	; 1
 328:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeInt(distance);						// Show the distance
 32c:	80 91 38 01 	lds	r24, 0x0138	; 0x800138 <__data_end>
 330:	90 91 39 01 	lds	r25, 0x0139	; 0x800139 <__data_end+0x1>
 334:	0e 94 9d 00 	call	0x13a	; 0x13a <writeInt>
		writeString("\r\n");
 338:	8d e0       	ldi	r24, 0x0D	; 13
 33a:	91 e0       	ldi	r25, 0x01	; 1
 33c:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
		writeString("\r\n");
 340:	8d e0       	ldi	r24, 0x0D	; 13
 342:	91 e0       	ldi	r25, 0x01	; 1
 344:	0e 94 8a 00 	call	0x114	; 0x114 <writeString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 348:	8f ef       	ldi	r24, 0xFF	; 255
 34a:	93 ed       	ldi	r25, 0xD3	; 211
 34c:	20 e3       	ldi	r18, 0x30	; 48
 34e:	81 50       	subi	r24, 0x01	; 1
 350:	90 40       	sbci	r25, 0x00	; 0
 352:	20 40       	sbci	r18, 0x00	; 0
 354:	e1 f7       	brne	.-8      	; 0x34e <main+0xe6>
 356:	00 c0       	rjmp	.+0      	; 0x358 <main+0xf0>
 358:	00 00       	nop
 35a:	90 cf       	rjmp	.-224    	; 0x27c <main+0x14>

0000035c <initPWM>:
}

void turnRightWide(int speed, int speed2) {		// Left motor PWM higher than right motor
	PORTB = (0 << PORTB1) | (0 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// Set left and right motors forward
	OCR1A = speed;   							// Set the speed of the left motor with PWM
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 35c:	80 ea       	ldi	r24, 0xA0	; 160
 35e:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 362:	81 e1       	ldi	r24, 0x11	; 17
 364:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 368:	80 e9       	ldi	r24, 0x90	; 144
 36a:	91 e0       	ldi	r25, 0x01	; 1
 36c:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 370:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 374:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 378:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 37c:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 380:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 384:	84 b1       	in	r24, 0x04	; 4
 386:	86 66       	ori	r24, 0x66	; 102
 388:	84 b9       	out	0x04, r24	; 4
 38a:	08 95       	ret

0000038c <forward>:
 38c:	20 e6       	ldi	r18, 0x60	; 96
 38e:	25 b9       	out	0x05, r18	; 5
 390:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 394:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 398:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 39c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3a0:	08 95       	ret

000003a2 <turnRight>:
 3a2:	20 e4       	ldi	r18, 0x40	; 64
 3a4:	25 b9       	out	0x05, r18	; 5
 3a6:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3aa:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3ae:	08 95       	ret

000003b0 <turnLeft>:
 3b0:	20 e2       	ldi	r18, 0x20	; 32
 3b2:	25 b9       	out	0x05, r18	; 5
 3b4:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3b8:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3bc:	08 95       	ret

000003be <backward>:
 3be:	26 e6       	ldi	r18, 0x66	; 102
 3c0:	25 b9       	out	0x05, r18	; 5
 3c2:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3c6:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 3ca:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3ce:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3d2:	08 95       	ret

000003d4 <turnLeftWide>:
}

void turnLeftWide(int speed, int speed2) {		// Right motor PWM higher than left motor
	PORTB = (0 << PORTB1) | (0 << PORTB2) | (1 << PORTB5) | (1 << PORTB6);		// Set left and right motors forward
 3d4:	20 e6       	ldi	r18, 0x60	; 96
 3d6:	25 b9       	out	0x05, r18	; 5
	OCR1A = speed;   							// Set the speed of the left motor with PWM
 3d8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 3dc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 3e0:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 3e4:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 3e8:	08 95       	ret

000003ea <direction>:
}

/* Function that calls the function of the PWM motor to give instructions depending on the input from the user */
void direction(char inputKeyboard) {
	switch(inputKeyboard) {
 3ea:	85 36       	cpi	r24, 0x65	; 101
 3ec:	81 f1       	breq	.+96     	; 0x44e <__EEPROM_REGION_LENGTH__+0x4e>
 3ee:	28 f4       	brcc	.+10     	; 0x3fa <direction+0x10>
 3f0:	81 36       	cpi	r24, 0x61	; 97
 3f2:	a1 f0       	breq	.+40     	; 0x41c <__EEPROM_REGION_LENGTH__+0x1c>
 3f4:	84 36       	cpi	r24, 0x64	; 100
 3f6:	d9 f0       	breq	.+54     	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 3f8:	31 c0       	rjmp	.+98     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 3fa:	83 37       	cpi	r24, 0x73	; 115
 3fc:	51 f0       	breq	.+20     	; 0x412 <__EEPROM_REGION_LENGTH__+0x12>
 3fe:	87 37       	cpi	r24, 0x77	; 119
 400:	19 f0       	breq	.+6      	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
 402:	81 37       	cpi	r24, 0x71	; 113
 404:	59 f5       	brne	.+86     	; 0x45c <__EEPROM_REGION_LENGTH__+0x5c>
 406:	1c c0       	rjmp	.+56     	; 0x440 <__EEPROM_REGION_LENGTH__+0x40>
		case 'w':
			forward(200);
 408:	88 ec       	ldi	r24, 0xC8	; 200
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	0e 94 c6 01 	call	0x38c	; 0x38c <forward>
			break;
 410:	08 95       	ret
		case 's':
			backward(200);
 412:	88 ec       	ldi	r24, 0xC8	; 200
 414:	90 e0       	ldi	r25, 0x00	; 0
 416:	0e 94 df 01 	call	0x3be	; 0x3be <backward>
			break;
 41a:	08 95       	ret
		case 'a':
			turnLeft(200);
 41c:	88 ec       	ldi	r24, 0xC8	; 200
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <turnLeft>
			turnRight(0);
 424:	80 e0       	ldi	r24, 0x00	; 0
 426:	90 e0       	ldi	r25, 0x00	; 0
 428:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <turnRight>
			break;
 42c:	08 95       	ret
		case 'd':
			turnRight(200);
 42e:	88 ec       	ldi	r24, 0xC8	; 200
 430:	90 e0       	ldi	r25, 0x00	; 0
 432:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <turnRight>
			turnLeft(0);
 436:	80 e0       	ldi	r24, 0x00	; 0
 438:	90 e0       	ldi	r25, 0x00	; 0
 43a:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <turnLeft>
			break;
 43e:	08 95       	ret
		case 'q':
			turnLeftWide(200, 100);
 440:	64 e6       	ldi	r22, 0x64	; 100
 442:	70 e0       	ldi	r23, 0x00	; 0
 444:	88 ec       	ldi	r24, 0xC8	; 200
 446:	90 e0       	ldi	r25, 0x00	; 0
 448:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <turnLeftWide>
			break;
 44c:	08 95       	ret
		case 'e':
			turnLeftWide(100, 200);
 44e:	68 ec       	ldi	r22, 0xC8	; 200
 450:	70 e0       	ldi	r23, 0x00	; 0
 452:	84 e6       	ldi	r24, 0x64	; 100
 454:	90 e0       	ldi	r25, 0x00	; 0
 456:	0e 94 ea 01 	call	0x3d4	; 0x3d4 <turnLeftWide>
			break;
 45a:	08 95       	ret
		default:								// By no input, no actions
			forward(0);
 45c:	80 e0       	ldi	r24, 0x00	; 0
 45e:	90 e0       	ldi	r25, 0x00	; 0
 460:	0e 94 c6 01 	call	0x38c	; 0x38c <forward>
			backward(0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	90 e0       	ldi	r25, 0x00	; 0
 468:	0e 94 df 01 	call	0x3be	; 0x3be <backward>
			turnLeft(0);
 46c:	80 e0       	ldi	r24, 0x00	; 0
 46e:	90 e0       	ldi	r25, 0x00	; 0
 470:	0e 94 d8 01 	call	0x3b0	; 0x3b0 <turnLeft>
			turnRight(0);
 474:	80 e0       	ldi	r24, 0x00	; 0
 476:	90 e0       	ldi	r25, 0x00	; 0
 478:	0e 94 d1 01 	call	0x3a2	; 0x3a2 <turnRight>
 47c:	08 95       	ret

0000047e <__udivmodhi4>:
 47e:	aa 1b       	sub	r26, r26
 480:	bb 1b       	sub	r27, r27
 482:	51 e1       	ldi	r21, 0x11	; 17
 484:	07 c0       	rjmp	.+14     	; 0x494 <__udivmodhi4_ep>

00000486 <__udivmodhi4_loop>:
 486:	aa 1f       	adc	r26, r26
 488:	bb 1f       	adc	r27, r27
 48a:	a6 17       	cp	r26, r22
 48c:	b7 07       	cpc	r27, r23
 48e:	10 f0       	brcs	.+4      	; 0x494 <__udivmodhi4_ep>
 490:	a6 1b       	sub	r26, r22
 492:	b7 0b       	sbc	r27, r23

00000494 <__udivmodhi4_ep>:
 494:	88 1f       	adc	r24, r24
 496:	99 1f       	adc	r25, r25
 498:	5a 95       	dec	r21
 49a:	a9 f7       	brne	.-22     	; 0x486 <__udivmodhi4_loop>
 49c:	80 95       	com	r24
 49e:	90 95       	com	r25
 4a0:	bc 01       	movw	r22, r24
 4a2:	cd 01       	movw	r24, r26
 4a4:	08 95       	ret

000004a6 <__itoa_ncheck>:
 4a6:	bb 27       	eor	r27, r27
 4a8:	4a 30       	cpi	r20, 0x0A	; 10
 4aa:	31 f4       	brne	.+12     	; 0x4b8 <__itoa_ncheck+0x12>
 4ac:	99 23       	and	r25, r25
 4ae:	22 f4       	brpl	.+8      	; 0x4b8 <__itoa_ncheck+0x12>
 4b0:	bd e2       	ldi	r27, 0x2D	; 45
 4b2:	90 95       	com	r25
 4b4:	81 95       	neg	r24
 4b6:	9f 4f       	sbci	r25, 0xFF	; 255
 4b8:	0c 94 5f 02 	jmp	0x4be	; 0x4be <__utoa_common>

000004bc <__utoa_ncheck>:
 4bc:	bb 27       	eor	r27, r27

000004be <__utoa_common>:
 4be:	fb 01       	movw	r30, r22
 4c0:	55 27       	eor	r21, r21
 4c2:	aa 27       	eor	r26, r26
 4c4:	88 0f       	add	r24, r24
 4c6:	99 1f       	adc	r25, r25
 4c8:	aa 1f       	adc	r26, r26
 4ca:	a4 17       	cp	r26, r20
 4cc:	10 f0       	brcs	.+4      	; 0x4d2 <__utoa_common+0x14>
 4ce:	a4 1b       	sub	r26, r20
 4d0:	83 95       	inc	r24
 4d2:	50 51       	subi	r21, 0x10	; 16
 4d4:	b9 f7       	brne	.-18     	; 0x4c4 <__utoa_common+0x6>
 4d6:	a0 5d       	subi	r26, 0xD0	; 208
 4d8:	aa 33       	cpi	r26, 0x3A	; 58
 4da:	08 f0       	brcs	.+2      	; 0x4de <__utoa_common+0x20>
 4dc:	a9 5d       	subi	r26, 0xD9	; 217
 4de:	a1 93       	st	Z+, r26
 4e0:	00 97       	sbiw	r24, 0x00	; 0
 4e2:	79 f7       	brne	.-34     	; 0x4c2 <__utoa_common+0x4>
 4e4:	b1 11       	cpse	r27, r1
 4e6:	b1 93       	st	Z+, r27
 4e8:	11 92       	st	Z+, r1
 4ea:	cb 01       	movw	r24, r22
 4ec:	0c 94 78 02 	jmp	0x4f0	; 0x4f0 <strrev>

000004f0 <strrev>:
 4f0:	dc 01       	movw	r26, r24
 4f2:	fc 01       	movw	r30, r24
 4f4:	67 2f       	mov	r22, r23
 4f6:	71 91       	ld	r23, Z+
 4f8:	77 23       	and	r23, r23
 4fa:	e1 f7       	brne	.-8      	; 0x4f4 <strrev+0x4>
 4fc:	32 97       	sbiw	r30, 0x02	; 2
 4fe:	04 c0       	rjmp	.+8      	; 0x508 <strrev+0x18>
 500:	7c 91       	ld	r23, X
 502:	6d 93       	st	X+, r22
 504:	70 83       	st	Z, r23
 506:	62 91       	ld	r22, -Z
 508:	ae 17       	cp	r26, r30
 50a:	bf 07       	cpc	r27, r31
 50c:	c8 f3       	brcs	.-14     	; 0x500 <strrev+0x10>
 50e:	08 95       	ret

00000510 <_exit>:
 510:	f8 94       	cli

00000512 <__stop_program>:
 512:	ff cf       	rjmp	.-2      	; 0x512 <__stop_program>
