
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000d78  00000e0c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d78  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080015a  0080015a  00000e66  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000e66  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000e98  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000001e0  00000000  00000000  00000ed8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001f33  00000000  00000000  000010b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc8  00000000  00000000  00002feb  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f42  00000000  00000000  00003fb3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000428  00000000  00000000  00004ef8  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000083c  00000000  00000000  00005320  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000008f2  00000000  00000000  00005b5c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000198  00000000  00000000  0000644e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 8d 02 	jmp	0x51a	; 0x51a <__vector_7>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 a6 02 	jmp	0x54c	; 0x54c <__vector_9>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  64:	0c 94 63 02 	jmp	0x4c6	; 0x4c6 <__vector_25>
  68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  94:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  98:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  9c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  ac:	65 04       	cpc	r6, r5
  ae:	c3 04       	cpc	r12, r3
  b0:	b3 04       	cpc	r11, r3
  b2:	72 04       	cpc	r7, r2
  b4:	91 04       	cpc	r9, r1
  b6:	c3 04       	cpc	r12, r3
  b8:	c3 04       	cpc	r12, r3
  ba:	c3 04       	cpc	r12, r3
  bc:	c3 04       	cpc	r12, r3
  be:	c3 04       	cpc	r12, r3
  c0:	c3 04       	cpc	r12, r3
  c2:	c3 04       	cpc	r12, r3
  c4:	c3 04       	cpc	r12, r3
  c6:	c3 04       	cpc	r12, r3
  c8:	c3 04       	cpc	r12, r3
  ca:	c3 04       	cpc	r12, r3
  cc:	7f 04       	cpc	r7, r15
  ce:	c3 04       	cpc	r12, r3
  d0:	5e 04       	cpc	r5, r14
  d2:	c3 04       	cpc	r12, r3
  d4:	c3 04       	cpc	r12, r3
  d6:	c3 04       	cpc	r12, r3
  d8:	57 04       	cpc	r5, r7
  da:	c3 04       	cpc	r12, r3
  dc:	c3 04       	cpc	r12, r3
  de:	a1 04       	cpc	r10, r1

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	da e0       	ldi	r29, 0x0A	; 10
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	e8 e7       	ldi	r30, 0x78	; 120
  f4:	fd e0       	ldi	r31, 0x0D	; 13
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
  f8:	05 90       	lpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	aa 35       	cpi	r26, 0x5A	; 90
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	aa e5       	ldi	r26, 0x5A	; 90
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a6 37       	cpi	r26, 0x76	; 118
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	0e 94 af 03 	call	0x75e	; 0x75e <main>
 116:	0c 94 ba 06 	jmp	0xd74	; 0xd74 <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <initEncoders>:

#include "encoders_irq.h"

void initEncoders() {
	// Enable interrupt on PE6 for the right encoder
	DDRE &= ~(1<<PORTE6);						// Set PE6 as input, right encoder XORed signal
 11e:	8d b1       	in	r24, 0x0d	; 13
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	8d b9       	out	0x0d, r24	; 13
	DDRF &= ~(1<<PORTF0);						// Set PF0 as input
 124:	80 b3       	in	r24, 0x10	; 16
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 bb       	out	0x10, r24	; 16
	PORTE |= (1<<PORTE6);						// OR PORTE PE6 to 1
 12a:	8e b1       	in	r24, 0x0e	; 14
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
	EICRB = (1<<ISC60) | (1<<ISC61);			// Trigger off the rising edge of INT6
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
	EIMSK = 1<<INT6;							// Enable INT6 interrupt
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	8d bb       	out	0x1d, r24	; 29

	// Enable pin-change interrupt on PB4 for left encoder, and disable other pin-change interrupts
	DDRB &= ~(1<<PINB4);						// Set PB4 as input, left encoder XORed signal
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	84 b9       	out	0x04, r24	; 4
	DDRE &= ~(1<<PORTE2);						// Set PE2 as input
 140:	8d b1       	in	r24, 0x0d	; 13
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	8d b9       	out	0x0d, r24	; 13
	PCICR |= 1<<PCIE0;							// Set PCIE0 to enable PCMSK0 scan
 146:	e8 e6       	ldi	r30, 0x68	; 104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
	PCMSK0 |= 1<<PCINT4;						// Set PCINT4 to trigger an interrupt on state change
 150:	eb e6       	ldi	r30, 0x6B	; 107
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 61       	ori	r24, 0x10	; 16
 158:	80 83       	st	Z, r24
	PCIFR = 1<<PCIF0;							// Clear its interrupt flag by writing a 1
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	08 95       	ret

00000160 <zetGeleLedAan>:
void initialiseerGeleLed() {
	DDRC |= geleLED;
}

void zetGeleLedAan() {
	PORTC |= geleLED;    // Zet led aan
 160:	88 b1       	in	r24, 0x08	; 8
 162:	80 68       	ori	r24, 0x80	; 128
 164:	88 b9       	out	0x08, r24	; 8
 166:	08 95       	ret

00000168 <zetGeleLedUit>:
}

void zetGeleLedUit() {
	PORTC &= ~geleLED;	// Zet led uit
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	08 95       	ret

00000170 <initI2C>:

uint8_t i2cReadAck(void) {
	TWCR = (1<<TWEN)|(1<<TWINT)|(1<<TWEA);
	i2cWaitForComplete();
	return (TWDR);
}
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	83 60       	ori	r24, 0x03	; 3
 174:	8b b9       	out	0x0b, r24	; 11
 176:	88 e4       	ldi	r24, 0x48	; 72
 178:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 17c:	ec eb       	ldi	r30, 0xBC	; 188
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <i2cWaitForComplete>:
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <i2cWaitForComplete>
 190:	08 95       	ret

00000192 <i2cStart>:
 192:	84 ea       	ldi	r24, 0xA4	; 164
 194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 198:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
 19c:	08 95       	ret

0000019e <i2cStop>:
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	84 fd       	sbrc	r24, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <i2cStop+0x6>
 1ac:	08 95       	ret

000001ae <i2cReadNoAck>:

uint8_t i2cReadNoAck(void) {
	TWCR = (1<<TWEN)|(1<<TWINT);
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2cWaitForComplete();
 1b4:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
	return (TWDR);
 1b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
}
 1bc:	08 95       	ret

000001be <i2cSend>:

void i2cSend(uint8_t data) {
	TWDR = data;
 1be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = (1<<TWEN)|(1<<TWINT);
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	i2cWaitForComplete();
 1c8:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
 1cc:	08 95       	ret

000001ce <setRegister>:
}

void setRegister(uint8_t r) {
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
	i2cStart();
 1d2:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);									// I2C adres master schrijf
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(r);
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();
 1e2:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
}
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <readXL>:

uint8_t readXL() {
	i2cStart();
 1ea:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 1ee:	8b e3       	ldi	r24, 0x3B	; 59
 1f0:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t xl = i2cReadNoAck();
 1f4:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
	//i2cStop();
	return xl;
}
 1f8:	08 95       	ret

000001fa <readXH>:
uint8_t readXH() {
	i2cStart();
 1fa:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 1fe:	8b e3       	ldi	r24, 0x3B	; 59
 200:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t xh = i2cReadNoAck();
 204:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
	//i2cStop();
	return xh;
}
 208:	08 95       	ret

0000020a <readYL>:

uint8_t readYL() {
	i2cStart();
 20a:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 20e:	8b e3       	ldi	r24, 0x3B	; 59
 210:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t yl = i2cReadNoAck();
 214:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
	//i2cStop();
	return yl;
}
 218:	08 95       	ret

0000021a <readYH>:
uint8_t readYH() {
	i2cStart();
 21a:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 21e:	8b e3       	ldi	r24, 0x3B	; 59
 220:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t yh = i2cReadNoAck();
 224:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
	//i2cStop();
	return yh;
}
 228:	08 95       	ret

0000022a <readZL>:
uint8_t readZL() {
	i2cStart();
 22a:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 22e:	8b e3       	ldi	r24, 0x3B	; 59
 230:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t zl = i2cReadNoAck();
 234:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
	//i2cStop();
	return zl;
}
 238:	08 95       	ret

0000023a <readZH>:
uint8_t readZH() {
 23a:	cf 93       	push	r28
	i2cStart();
 23c:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresRead);
 240:	8b e3       	ldi	r24, 0x3B	; 59
 242:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t zh = i2cReadNoAck();
 246:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 24a:	c8 2f       	mov	r28, r24
	i2cStop();
 24c:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return zh;
}
 250:	8c 2f       	mov	r24, r28
 252:	cf 91       	pop	r28
 254:	08 95       	ret

00000256 <calibratie>:

void calibratie() {
 256:	2f 92       	push	r2
 258:	3f 92       	push	r3
 25a:	4f 92       	push	r4
 25c:	5f 92       	push	r5
 25e:	6f 92       	push	r6
 260:	7f 92       	push	r7
 262:	8f 92       	push	r8
 264:	9f 92       	push	r9
 266:	af 92       	push	r10
 268:	bf 92       	push	r11
 26a:	cf 92       	push	r12
 26c:	df 92       	push	r13
 26e:	ef 92       	push	r14
 270:	ff 92       	push	r15
 272:	0f 93       	push	r16
 274:	1f 93       	push	r17
 276:	cf 93       	push	r28
 278:	df 93       	push	r29
 27a:	00 d0       	rcall	.+0      	; 0x27c <calibratie+0x26>
 27c:	1f 92       	push	r1
 27e:	cd b7       	in	r28, 0x3d	; 61
 280:	de b7       	in	r29, 0x3e	; 62
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 282:	21 2c       	mov	r2, r1
 284:	31 2c       	mov	r3, r1
}

void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;
 286:	c1 2c       	mov	r12, r1
 288:	d1 2c       	mov	r13, r1
 28a:	76 01       	movw	r14, r12
	return zh;
}

void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
 28c:	81 2c       	mov	r8, r1
 28e:	91 2c       	mov	r9, r1
 290:	54 01       	movw	r10, r8
	i2cStop();
	return zh;
}

void calibratie() {
	int32_t xTotaal = 0;
 292:	41 2c       	mov	r4, r1
 294:	51 2c       	mov	r5, r1
 296:	32 01       	movw	r6, r4
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 298:	4a c0       	rjmp	.+148    	; 0x32e <calibratie+0xd8>
		// readGyroVars
		setRegister(OUT_X_L_M);
 29a:	88 e0       	ldi	r24, 0x08	; 8
 29c:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t XL = readXL();
 2a0:	0e 94 f5 00 	call	0x1ea	; 0x1ea <readXL>
 2a4:	18 2f       	mov	r17, r24
		setRegister(OUT_X_H_M);
 2a6:	89 e0       	ldi	r24, 0x09	; 9
 2a8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t XH = readXH();
 2ac:	0e 94 fd 00 	call	0x1fa	; 0x1fa <readXH>
		uint16_t X = (XH << 8 | XL);
 2b0:	28 2f       	mov	r18, r24
 2b2:	30 e0       	ldi	r19, 0x00	; 0
 2b4:	92 2f       	mov	r25, r18
 2b6:	88 27       	eor	r24, r24
 2b8:	81 2b       	or	r24, r17
 2ba:	9b 83       	std	Y+3, r25	; 0x03
 2bc:	8a 83       	std	Y+2, r24	; 0x02

		setRegister(OUT_Y_L_M);
 2be:	8a e0       	ldi	r24, 0x0A	; 10
 2c0:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t YL = readYL();
 2c4:	0e 94 05 01 	call	0x20a	; 0x20a <readYL>
 2c8:	18 2f       	mov	r17, r24
		setRegister(OUT_Y_H_M);
 2ca:	8b e0       	ldi	r24, 0x0B	; 11
 2cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t YH = readYH();
 2d0:	0e 94 0d 01 	call	0x21a	; 0x21a <readYH>
		uint16_t Y = (YH << 8 | YL);
 2d4:	90 e0       	ldi	r25, 0x00	; 0
 2d6:	98 2f       	mov	r25, r24
 2d8:	88 27       	eor	r24, r24
 2da:	fc 01       	movw	r30, r24
 2dc:	e1 2b       	or	r30, r17
 2de:	8f 01       	movw	r16, r30

		setRegister(OUT_Z_L_M);
 2e0:	8c e0       	ldi	r24, 0x0C	; 12
 2e2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t ZL = readZL();
 2e6:	0e 94 15 01 	call	0x22a	; 0x22a <readZL>
 2ea:	89 83       	std	Y+1, r24	; 0x01
		setRegister(OUT_Z_H_M);
 2ec:	8d e0       	ldi	r24, 0x0D	; 13
 2ee:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t ZH = readZH();
 2f2:	0e 94 1d 01 	call	0x23a	; 0x23a <readZH>
		uint16_t Z = (ZH << 8 | ZL);
 2f6:	90 e0       	ldi	r25, 0x00	; 0
 2f8:	98 2f       	mov	r25, r24
 2fa:	88 27       	eor	r24, r24
 2fc:	f9 81       	ldd	r31, Y+1	; 0x01
 2fe:	8f 2b       	or	r24, r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	ef e3       	ldi	r30, 0x3F	; 63
 302:	ff e1       	ldi	r31, 0x1F	; 31
 304:	31 97       	sbiw	r30, 0x01	; 1
 306:	f1 f7       	brne	.-4      	; 0x304 <calibratie+0xae>
 308:	00 c0       	rjmp	.+0      	; 0x30a <calibratie+0xb4>
 30a:	00 00       	nop

		_delay_ms(2);
		xTotaal = xTotaal + X;
 30c:	2a 81       	ldd	r18, Y+2	; 0x02
 30e:	3b 81       	ldd	r19, Y+3	; 0x03
 310:	42 0e       	add	r4, r18
 312:	53 1e       	adc	r5, r19
 314:	61 1c       	adc	r6, r1
 316:	71 1c       	adc	r7, r1
		yTotaal = yTotaal + Y;
 318:	80 0e       	add	r8, r16
 31a:	91 1e       	adc	r9, r17
 31c:	a1 1c       	adc	r10, r1
 31e:	b1 1c       	adc	r11, r1
		zTotaal = zTotaal + Z;
 320:	c8 0e       	add	r12, r24
 322:	d9 1e       	adc	r13, r25
 324:	e1 1c       	adc	r14, r1
 326:	f1 1c       	adc	r15, r1
void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 328:	3f ef       	ldi	r19, 0xFF	; 255
 32a:	23 1a       	sub	r2, r19
 32c:	33 0a       	sbc	r3, r19
 32e:	21 14       	cp	r2, r1
 330:	84 e0       	ldi	r24, 0x04	; 4
 332:	38 06       	cpc	r3, r24
 334:	0c f4       	brge	.+2      	; 0x338 <calibratie+0xe2>
 336:	b1 cf       	rjmp	.-158    	; 0x29a <calibratie+0x44>
		_delay_ms(2);
		xTotaal = xTotaal + X;
		yTotaal = yTotaal + Y;
		zTotaal = zTotaal + Z;
	}
	xOff = xTotaal / 1024;
 338:	d3 01       	movw	r26, r6
 33a:	c2 01       	movw	r24, r4
 33c:	77 20       	and	r7, r7
 33e:	24 f4       	brge	.+8      	; 0x348 <calibratie+0xf2>
 340:	81 50       	subi	r24, 0x01	; 1
 342:	9c 4f       	sbci	r25, 0xFC	; 252
 344:	af 4f       	sbci	r26, 0xFF	; 255
 346:	bf 4f       	sbci	r27, 0xFF	; 255
 348:	07 2e       	mov	r0, r23
 34a:	7a e0       	ldi	r23, 0x0A	; 10
 34c:	b5 95       	asr	r27
 34e:	a7 95       	ror	r26
 350:	97 95       	ror	r25
 352:	87 95       	ror	r24
 354:	7a 95       	dec	r23
 356:	d1 f7       	brne	.-12     	; 0x34c <calibratie+0xf6>
 358:	70 2d       	mov	r23, r0
 35a:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <xOff+0x1>
 35e:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <xOff>
	yOff = yTotaal / 1024;
 362:	d5 01       	movw	r26, r10
 364:	c4 01       	movw	r24, r8
 366:	bb 20       	and	r11, r11
 368:	24 f4       	brge	.+8      	; 0x372 <calibratie+0x11c>
 36a:	81 50       	subi	r24, 0x01	; 1
 36c:	9c 4f       	sbci	r25, 0xFC	; 252
 36e:	af 4f       	sbci	r26, 0xFF	; 255
 370:	bf 4f       	sbci	r27, 0xFF	; 255
 372:	07 2e       	mov	r0, r23
 374:	7a e0       	ldi	r23, 0x0A	; 10
 376:	b5 95       	asr	r27
 378:	a7 95       	ror	r26
 37a:	97 95       	ror	r25
 37c:	87 95       	ror	r24
 37e:	7a 95       	dec	r23
 380:	d1 f7       	brne	.-12     	; 0x376 <calibratie+0x120>
 382:	70 2d       	mov	r23, r0
 384:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <yOff+0x1>
 388:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <yOff>
	zOff = zTotaal / 1024;
 38c:	d7 01       	movw	r26, r14
 38e:	c6 01       	movw	r24, r12
 390:	ff 20       	and	r15, r15
 392:	24 f4       	brge	.+8      	; 0x39c <calibratie+0x146>
 394:	81 50       	subi	r24, 0x01	; 1
 396:	9c 4f       	sbci	r25, 0xFC	; 252
 398:	af 4f       	sbci	r26, 0xFF	; 255
 39a:	bf 4f       	sbci	r27, 0xFF	; 255
 39c:	07 2e       	mov	r0, r23
 39e:	7a e0       	ldi	r23, 0x0A	; 10
 3a0:	b5 95       	asr	r27
 3a2:	a7 95       	ror	r26
 3a4:	97 95       	ror	r25
 3a6:	87 95       	ror	r24
 3a8:	7a 95       	dec	r23
 3aa:	d1 f7       	brne	.-12     	; 0x3a0 <calibratie+0x14a>
 3ac:	70 2d       	mov	r23, r0
 3ae:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 3b2:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
}
 3b6:	0f 90       	pop	r0
 3b8:	0f 90       	pop	r0
 3ba:	0f 90       	pop	r0
 3bc:	df 91       	pop	r29
 3be:	cf 91       	pop	r28
 3c0:	1f 91       	pop	r17
 3c2:	0f 91       	pop	r16
 3c4:	ff 90       	pop	r15
 3c6:	ef 90       	pop	r14
 3c8:	df 90       	pop	r13
 3ca:	cf 90       	pop	r12
 3cc:	bf 90       	pop	r11
 3ce:	af 90       	pop	r10
 3d0:	9f 90       	pop	r9
 3d2:	8f 90       	pop	r8
 3d4:	7f 90       	pop	r7
 3d6:	6f 90       	pop	r6
 3d8:	5f 90       	pop	r5
 3da:	4f 90       	pop	r4
 3dc:	3f 90       	pop	r3
 3de:	2f 90       	pop	r2
 3e0:	08 95       	ret

000003e2 <magnetoMeter>:

void magnetoMeter() {
	/*---------- Enable magnetometer --------*/
	// 0x64 = 0b01100100
	i2cStart();									// Begin Transmission
 3e2:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 3e6:	8a e3       	ldi	r24, 0x3A	; 58
 3e8:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL5);								// Access register CTRL5
 3ec:	84 e2       	ldi	r24, 0x24	; 36
 3ee:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x64);								// Master stuurt deze waarde naar het CTRL1 register
 3f2:	84 e6       	ldi	r24, 0x64	; 100
 3f4:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 3f8:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>

	// 0x20
	i2cStart();									// Begin Transmission
 3fc:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 400:	8a e3       	ldi	r24, 0x3A	; 58
 402:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL6);								// Access register CTRL6
 406:	85 e2       	ldi	r24, 0x25	; 37
 408:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x20);								// Master stuurt deze waarde naar het CTRL1 register
 40c:	80 e2       	ldi	r24, 0x20	; 32
 40e:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 412:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>

	// 0x00
	i2cStart();									// Begin Transmission
 416:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 41a:	8a e3       	ldi	r24, 0x3A	; 58
 41c:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL7);								// Access register CTRL7
 420:	86 e2       	ldi	r24, 0x26	; 38
 422:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x00);								// Master stuurt deze waarde naar het CTRL1 register
 426:	80 e0       	ldi	r24, 0x00	; 0
 428:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 42c:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	calibratie();
 430:	0e 94 2b 01 	call	0x256	; 0x256 <calibratie>
 434:	08 95       	ret

00000436 <initUsart1>:
#include <stdlib.h>

#include "USART1_irq.h"

void initUsart1() {
	UCSR1A = 0;
 436:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
	UCSR1B = (1<<RXEN1) | (1<<TXEN1) | (1<<RXCIE1);	// Enables the receiver and transmitter, TX=PD1 RX=PD0, also enable RX and TX interrupts
 43a:	88 e9       	ldi	r24, 0x98	; 152
 43c:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
	UCSR1C = (1<<UCSZ11) | (1<<UCSZ10);			// Set data frame format: asynchronous mode, no parity, 1 stop bit, 8 bit size
 440:	86 e0       	ldi	r24, 0x06	; 6
 442:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>

	/* Set the baudrate to 9600 */
	UBRR1H = 00;              					// Load lower 8-bits UBRR register
 446:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
	UBRR1L = 103;             					// Load upper 8-bits of to high byte  UBRR register
 44a:	87 e6       	ldi	r24, 0x67	; 103
 44c:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 450:	08 95       	ret

00000452 <writeChar>:
}

/* USART RX */
void writeChar(char data) {
	while(!(UCSR1A & (1<<UDRE1)));				// Wait for empty transmit buffer
 452:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 456:	95 ff       	sbrs	r25, 5
 458:	fc cf       	rjmp	.-8      	; 0x452 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
 45a:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 45e:	08 95       	ret

00000460 <writeString>:
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
 460:	0f 93       	push	r16
 462:	1f 93       	push	r17
 464:	cf 93       	push	r28
 466:	8c 01       	movw	r16, r24
	uint8_t i;
	for(i=0; st[i]!=0 ; i++) {					// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 468:	c0 e0       	ldi	r28, 0x00	; 0
 46a:	03 c0       	rjmp	.+6      	; 0x472 <writeString+0x12>
		writeChar(st[i]);						// Verstuur de string via USARTn
 46c:	0e 94 29 02 	call	0x452	; 0x452 <writeChar>
	UDR1 = data;								// Put data into buffer, sends the data
}

void writeString(char st[]) {					// In c is een string hetzelfde als een array van characters
	uint8_t i;
	for(i=0; st[i]!=0 ; i++) {					// Aan het einde van een string wordt \0 toegevoegd, de for loop loopt zolang de string niet gelijk is aan 0
 470:	cf 5f       	subi	r28, 0xFF	; 255
 472:	f8 01       	movw	r30, r16
 474:	ec 0f       	add	r30, r28
 476:	f1 1d       	adc	r31, r1
 478:	80 81       	ld	r24, Z
 47a:	81 11       	cpse	r24, r1
 47c:	f7 cf       	rjmp	.-18     	; 0x46c <writeString+0xc>
		writeChar(st[i]);						// Verstuur de string via USARTn
	}
}
 47e:	cf 91       	pop	r28
 480:	1f 91       	pop	r17
 482:	0f 91       	pop	r16
 484:	08 95       	ret

00000486 <writeInt>:

void writeInt(int16_t i) {
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
 48a:	cd b7       	in	r28, 0x3d	; 61
 48c:	de b7       	in	r29, 0x3e	; 62
 48e:	28 97       	sbiw	r28, 0x08	; 8
 490:	0f b6       	in	r0, 0x3f	; 63
 492:	f8 94       	cli
 494:	de bf       	out	0x3e, r29	; 62
 496:	0f be       	out	0x3f, r0	; 63
 498:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 49a:	4a e0       	ldi	r20, 0x0A	; 10
 49c:	be 01       	movw	r22, r28
 49e:	6f 5f       	subi	r22, 0xFF	; 255
 4a0:	7f 4f       	sbci	r23, 0xFF	; 255
 4a2:	0e 94 85 06 	call	0xd0a	; 0xd0a <__itoa_ncheck>
	char buffer[8];								// Array in memory waar de string opgeslagen moet worden
	itoa(i, buffer, 10);						// Zet de ingelezen integer i om in een string (weergave: 10 = decimaal, 16 = hex, 2 = binary)
	writeString(buffer);						// Verstuur de waarde van i, die opgeslagen is op de locatie van de buffer
 4a6:	ce 01       	movw	r24, r28
 4a8:	01 96       	adiw	r24, 0x01	; 1
 4aa:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
}
 4ae:	28 96       	adiw	r28, 0x08	; 8
 4b0:	0f b6       	in	r0, 0x3f	; 63
 4b2:	f8 94       	cli
 4b4:	de bf       	out	0x3e, r29	; 62
 4b6:	0f be       	out	0x3f, r0	; 63
 4b8:	cd bf       	out	0x3d, r28	; 61
 4ba:	df 91       	pop	r29
 4bc:	cf 91       	pop	r28
 4be:	08 95       	ret

000004c0 <writeUnt>:

void writeUnt(uint16_t nr) {
	writeInt(nr);
 4c0:	0e 94 43 02 	call	0x486	; 0x486 <writeInt>
 4c4:	08 95       	ret

000004c6 <__vector_25>:
static volatile uint16_t ticksLeft;
static volatile uint16_t ticksRight;
static volatile float ticksTotal;
static volatile float distance;

ISR(USART1_RX_vect) {							// When you receive data, calls the ISR
 4c6:	1f 92       	push	r1
 4c8:	0f 92       	push	r0
 4ca:	0f b6       	in	r0, 0x3f	; 63
 4cc:	0f 92       	push	r0
 4ce:	11 24       	eor	r1, r1
 4d0:	2f 93       	push	r18
 4d2:	3f 93       	push	r19
 4d4:	4f 93       	push	r20
 4d6:	5f 93       	push	r21
 4d8:	6f 93       	push	r22
 4da:	7f 93       	push	r23
 4dc:	8f 93       	push	r24
 4de:	9f 93       	push	r25
 4e0:	af 93       	push	r26
 4e2:	bf 93       	push	r27
 4e4:	ef 93       	push	r30
 4e6:	ff 93       	push	r31
	receivedData = UDR1;						// Read the incoming byte (data from the keyboard)
 4e8:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 4ec:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	direction(receivedData);					// Send the receivedData as parameter to the function direction
 4f0:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 4f4:	0e 94 1b 04 	call	0x836	; 0x836 <direction>
}
 4f8:	ff 91       	pop	r31
 4fa:	ef 91       	pop	r30
 4fc:	bf 91       	pop	r27
 4fe:	af 91       	pop	r26
 500:	9f 91       	pop	r25
 502:	8f 91       	pop	r24
 504:	7f 91       	pop	r23
 506:	6f 91       	pop	r22
 508:	5f 91       	pop	r21
 50a:	4f 91       	pop	r20
 50c:	3f 91       	pop	r19
 50e:	2f 91       	pop	r18
 510:	0f 90       	pop	r0
 512:	0f be       	out	0x3f, r0	; 63
 514:	0f 90       	pop	r0
 516:	1f 90       	pop	r1
 518:	18 95       	reti

0000051a <__vector_7>:

// Right
ISR(INT6_vect) {								// Enable interrupt on PE6 for the right encoder
 51a:	1f 92       	push	r1
 51c:	0f 92       	push	r0
 51e:	0f b6       	in	r0, 0x3f	; 63
 520:	0f 92       	push	r0
 522:	11 24       	eor	r1, r1
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
	uint8_t rightEncoderTicks;
	rightEncoderTicks = PORTE & (1<<PORTE6);

	if(rightEncoderTicks) {
 528:	76 9b       	sbis	0x0e, 6	; 14
 52a:	09 c0       	rjmp	.+18     	; 0x53e <__vector_7+0x24>
		ticksRight++;
 52c:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 530:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 534:	01 96       	adiw	r24, 0x01	; 1
 536:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ticksRight+0x1>
 53a:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ticksRight>
	}
}
 53e:	9f 91       	pop	r25
 540:	8f 91       	pop	r24
 542:	0f 90       	pop	r0
 544:	0f be       	out	0x3f, r0	; 63
 546:	0f 90       	pop	r0
 548:	1f 90       	pop	r1
 54a:	18 95       	reti

0000054c <__vector_9>:

// Left
ISR(PCINT0_vect) {								// Enable interrupt on PB4 for the left encoder
 54c:	1f 92       	push	r1
 54e:	0f 92       	push	r0
 550:	0f b6       	in	r0, 0x3f	; 63
 552:	0f 92       	push	r0
 554:	11 24       	eor	r1, r1
 556:	8f 93       	push	r24
 558:	9f 93       	push	r25
	uint8_t leftEncoderTicks;
	leftEncoderTicks = PINB & (1<<PINB4);

	if(leftEncoderTicks) {
 55a:	1c 9b       	sbis	0x03, 4	; 3
 55c:	09 c0       	rjmp	.+18     	; 0x570 <__vector_9+0x24>
		ticksLeft++;
 55e:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <ticksLeft>
 562:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <ticksLeft+0x1>
 566:	01 96       	adiw	r24, 0x01	; 1
 568:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <ticksLeft+0x1>
 56c:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <ticksLeft>
	}
}
 570:	9f 91       	pop	r25
 572:	8f 91       	pop	r24
 574:	0f 90       	pop	r0
 576:	0f be       	out	0x3f, r0	; 63
 578:	0f 90       	pop	r0
 57a:	1f 90       	pop	r1
 57c:	18 95       	reti

0000057e <computeDistance>:
		printFunction();
	}
}

void computeDistance() {
	ticksTotal = ticksLeft+ticksRight;		// Add the ticks of the left and right encoder
 57e:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <ticksLeft>
 582:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <ticksLeft+0x1>
 586:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 58a:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 58e:	68 0f       	add	r22, r24
 590:	79 1f       	adc	r23, r25
 592:	80 e0       	ldi	r24, 0x00	; 0
 594:	90 e0       	ldi	r25, 0x00	; 0
 596:	0e 94 8a 05 	call	0xb14	; 0xb14 <__floatunsisf>
 59a:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <ticksTotal>
 59e:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <ticksTotal+0x1>
 5a2:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ticksTotal+0x2>
 5a6:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ticksTotal+0x3>
	distance = (ticksTotal/1204.44)*12.2522113490;	// (ticks/cpr)*(pi*diameter), pi*3.9cm = 12.2522113490, 100.37 x 12 = 1204.44 CPR (counts per revolution)
 5aa:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <ticksTotal>
 5ae:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <ticksTotal+0x1>
 5b2:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ticksTotal+0x2>
 5b6:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ticksTotal+0x3>
 5ba:	24 e1       	ldi	r18, 0x14	; 20
 5bc:	3e e8       	ldi	r19, 0x8E	; 142
 5be:	46 e9       	ldi	r20, 0x96	; 150
 5c0:	54 e4       	ldi	r21, 0x44	; 68
 5c2:	0e 94 e2 04 	call	0x9c4	; 0x9c4 <__divsf3>
 5c6:	2f e0       	ldi	r18, 0x0F	; 15
 5c8:	39 e0       	ldi	r19, 0x09	; 9
 5ca:	44 e4       	ldi	r20, 0x44	; 68
 5cc:	51 e4       	ldi	r21, 0x41	; 65
 5ce:	0e 94 18 06 	call	0xc30	; 0xc30 <__mulsf3>
 5d2:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <distance>
 5d6:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <distance+0x1>
 5da:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <distance+0x2>
 5de:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <distance+0x3>
 5e2:	08 95       	ret

000005e4 <blinkYellowLed>:
}

void blinkYellowLed() {
	// Show data every second, and blink every second
	zetGeleLedAan();
 5e4:	0e 94 b0 00 	call	0x160	; 0x160 <zetGeleLedAan>
 5e8:	2f ef       	ldi	r18, 0xFF	; 255
 5ea:	83 ed       	ldi	r24, 0xD3	; 211
 5ec:	90 e3       	ldi	r25, 0x30	; 48
 5ee:	21 50       	subi	r18, 0x01	; 1
 5f0:	80 40       	sbci	r24, 0x00	; 0
 5f2:	90 40       	sbci	r25, 0x00	; 0
 5f4:	e1 f7       	brne	.-8      	; 0x5ee <blinkYellowLed+0xa>
 5f6:	00 c0       	rjmp	.+0      	; 0x5f8 <blinkYellowLed+0x14>
 5f8:	00 00       	nop
	_delay_ms(1000);
	zetGeleLedUit();
 5fa:	0e 94 b4 00 	call	0x168	; 0x168 <zetGeleLedUit>
 5fe:	08 95       	ret

00000600 <printFunction>:
}

void printFunction() {
 600:	1f 93       	push	r17
 602:	cf 93       	push	r28
 604:	df 93       	push	r29
	writeString("Direction: ");
 606:	89 e0       	ldi	r24, 0x09	; 9
 608:	91 e0       	ldi	r25, 0x01	; 1
 60a:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeChar(receivedData);				// Show received input from pc
 60e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 612:	0e 94 29 02 	call	0x452	; 0x452 <writeChar>
	writeString("\r\n");
 616:	85 e1       	ldi	r24, 0x15	; 21
 618:	91 e0       	ldi	r25, 0x01	; 1
 61a:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	writeString("ticksLeft: ");
 61e:	88 e1       	ldi	r24, 0x18	; 24
 620:	91 e0       	ldi	r25, 0x01	; 1
 622:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeInt(ticksLeft);
 626:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <ticksLeft>
 62a:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <ticksLeft+0x1>
 62e:	0e 94 43 02 	call	0x486	; 0x486 <writeInt>
	writeString("\n\r");
 632:	84 e2       	ldi	r24, 0x24	; 36
 634:	91 e0       	ldi	r25, 0x01	; 1
 636:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	writeString("ticksRight: ");
 63a:	87 e2       	ldi	r24, 0x27	; 39
 63c:	91 e0       	ldi	r25, 0x01	; 1
 63e:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeInt(ticksRight);
 642:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 646:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 64a:	0e 94 43 02 	call	0x486	; 0x486 <writeInt>
	writeString("\n\r");
 64e:	84 e2       	ldi	r24, 0x24	; 36
 650:	91 e0       	ldi	r25, 0x01	; 1
 652:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	writeString("Distance: ");
 656:	84 e3       	ldi	r24, 0x34	; 52
 658:	91 e0       	ldi	r25, 0x01	; 1
 65a:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeInt(distance);						// Show the distance
 65e:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <distance>
 662:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <distance+0x1>
 666:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <distance+0x2>
 66a:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <distance+0x3>
 66e:	0e 94 54 05 	call	0xaa8	; 0xaa8 <__fixsfsi>
 672:	cb 01       	movw	r24, r22
 674:	0e 94 43 02 	call	0x486	; 0x486 <writeInt>
	writeString("\r\n");
 678:	85 e1       	ldi	r24, 0x15	; 21
 67a:	91 e0       	ldi	r25, 0x01	; 1
 67c:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	/*---------- I2C ----------*/
	writeString("Richting is: ");
 680:	8f e3       	ldi	r24, 0x3F	; 63
 682:	91 e0       	ldi	r25, 0x01	; 1
 684:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	
	setRegister(OUT_X_L_M);
 688:	88 e0       	ldi	r24, 0x08	; 8
 68a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t XL = readXL();
 68e:	0e 94 f5 00 	call	0x1ea	; 0x1ea <readXL>
 692:	18 2f       	mov	r17, r24
	setRegister(OUT_X_H_M);
 694:	89 e0       	ldi	r24, 0x09	; 9
 696:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t XH = readXH();
 69a:	0e 94 fd 00 	call	0x1fa	; 0x1fa <readXH>
	uint16_t X = (XH << 8 | XL);
 69e:	c8 2f       	mov	r28, r24
 6a0:	d0 e0       	ldi	r29, 0x00	; 0
 6a2:	dc 2f       	mov	r29, r28
 6a4:	cc 27       	eor	r28, r28
 6a6:	c1 2b       	or	r28, r17
	X = X - xOff;							// Lees X waarde af met X - average waarde
 6a8:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <xOff>
 6ac:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <xOff+0x1>
 6b0:	c8 1b       	sub	r28, r24
 6b2:	d9 0b       	sbc	r29, r25

	writeString("X: ");
 6b4:	8d e4       	ldi	r24, 0x4D	; 77
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeUnt(X);
 6bc:	ce 01       	movw	r24, r28
 6be:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeUnt>
	writeString(" ");
 6c2:	8f e4       	ldi	r24, 0x4F	; 79
 6c4:	91 e0       	ldi	r25, 0x01	; 1
 6c6:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	setRegister(OUT_Y_L_M);
 6ca:	8a e0       	ldi	r24, 0x0A	; 10
 6cc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t YL = readYL();
 6d0:	0e 94 05 01 	call	0x20a	; 0x20a <readYL>
 6d4:	18 2f       	mov	r17, r24
	setRegister(OUT_Y_H_M);
 6d6:	8b e0       	ldi	r24, 0x0B	; 11
 6d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t YH = readYH();
 6dc:	0e 94 0d 01 	call	0x21a	; 0x21a <readYH>
	uint16_t Y = (YH << 8 | YL);
 6e0:	c8 2f       	mov	r28, r24
 6e2:	d0 e0       	ldi	r29, 0x00	; 0
 6e4:	dc 2f       	mov	r29, r28
 6e6:	cc 27       	eor	r28, r28
 6e8:	c1 2b       	or	r28, r17
	Y = Y - yOff;							// Lees y waarde af met y - average waarde
 6ea:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <yOff>
 6ee:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <yOff+0x1>
 6f2:	c8 1b       	sub	r28, r24
 6f4:	d9 0b       	sbc	r29, r25

	writeString("Y: ");
 6f6:	81 e5       	ldi	r24, 0x51	; 81
 6f8:	91 e0       	ldi	r25, 0x01	; 1
 6fa:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeUnt(Y);
 6fe:	ce 01       	movw	r24, r28
 700:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeUnt>
	writeString(" ");
 704:	8f e4       	ldi	r24, 0x4F	; 79
 706:	91 e0       	ldi	r25, 0x01	; 1
 708:	0e 94 30 02 	call	0x460	; 0x460 <writeString>

	setRegister(OUT_Z_L_M);
 70c:	8c e0       	ldi	r24, 0x0C	; 12
 70e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t ZL = readZL();
 712:	0e 94 15 01 	call	0x22a	; 0x22a <readZL>
 716:	18 2f       	mov	r17, r24
	setRegister(OUT_Z_H_M);
 718:	8d e0       	ldi	r24, 0x0D	; 13
 71a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t ZH = readZH();
 71e:	0e 94 1d 01 	call	0x23a	; 0x23a <readZH>
	uint16_t Z = (ZH << 8 | ZL);
 722:	c8 2f       	mov	r28, r24
 724:	d0 e0       	ldi	r29, 0x00	; 0
 726:	dc 2f       	mov	r29, r28
 728:	cc 27       	eor	r28, r28
 72a:	c1 2b       	or	r28, r17
	Z = Z - zOff;							// Lees z waarde af met z - average waarde
 72c:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <zOff>
 730:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <zOff+0x1>
 734:	c8 1b       	sub	r28, r24
 736:	d9 0b       	sbc	r29, r25

	writeString("Z: ");
 738:	85 e5       	ldi	r24, 0x55	; 85
 73a:	91 e0       	ldi	r25, 0x01	; 1
 73c:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeUnt(Z);
 740:	ce 01       	movw	r24, r28
 742:	0e 94 60 02 	call	0x4c0	; 0x4c0 <writeUnt>
	writeString("\n\r");
 746:	84 e2       	ldi	r24, 0x24	; 36
 748:	91 e0       	ldi	r25, 0x01	; 1
 74a:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
	writeString("\n\r");
 74e:	84 e2       	ldi	r24, 0x24	; 36
 750:	91 e0       	ldi	r25, 0x01	; 1
 752:	0e 94 30 02 	call	0x460	; 0x460 <writeString>
 756:	df 91       	pop	r29
 758:	cf 91       	pop	r28
 75a:	1f 91       	pop	r17
 75c:	08 95       	ret

0000075e <main>:
		ticksLeft++;
	}
}

int main(void) {
	initUsart1();								// Initialization for the registers
 75e:	0e 94 1b 02 	call	0x436	; 0x436 <initUsart1>
	initPWM();
 762:	0e 94 c1 03 	call	0x782	; 0x782 <initPWM>
	initEncoders();
 766:	0e 94 8f 00 	call	0x11e	; 0x11e <initEncoders>
	initI2C();
 76a:	0e 94 b8 00 	call	0x170	; 0x170 <initI2C>
	magnetoMeter();
 76e:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <magnetoMeter>
	
	sei();										// The sei() function converts the I bit in the SREG of the microcontroller set leaving the microcontroller oninterrupts can respond
 772:	78 94       	sei

	while(1) {
		computeDistance();
 774:	0e 94 bf 02 	call	0x57e	; 0x57e <computeDistance>
		blinkYellowLed();
 778:	0e 94 f2 02 	call	0x5e4	; 0x5e4 <blinkYellowLed>
		printFunction();
 77c:	0e 94 00 03 	call	0x600	; 0x600 <printFunction>
 780:	f9 cf       	rjmp	.-14     	; 0x774 <main+0x16>

00000782 <initPWM>:
}

void turnRightWideBackward(int speed, int speed2) {		// Left motor PWM higher than right motor
	PORTB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5) | (1<<PORTB6);		// Set left and right motors backward
	OCR1A = speed;   							// Set the speed of the left motor with PWM
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 782:	80 ea       	ldi	r24, 0xA0	; 160
 784:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 788:	81 e1       	ldi	r24, 0x11	; 17
 78a:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 78e:	80 e9       	ldi	r24, 0x90	; 144
 790:	91 e0       	ldi	r25, 0x01	; 1
 792:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 796:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 79a:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 79e:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7a2:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7a6:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7aa:	84 b1       	in	r24, 0x04	; 4
 7ac:	86 66       	ori	r24, 0x66	; 102
 7ae:	84 b9       	out	0x04, r24	; 4
 7b0:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SPEED2>
 7b4:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SPEED2+0x1>
 7b8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 7bc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 7c0:	08 95       	ret

000007c2 <forward>:
 7c2:	20 e6       	ldi	r18, 0x60	; 96
 7c4:	25 b9       	out	0x05, r18	; 5
 7c6:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7ca:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7ce:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7d2:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7d6:	08 95       	ret

000007d8 <turnRight>:
 7d8:	20 e4       	ldi	r18, 0x40	; 64
 7da:	25 b9       	out	0x05, r18	; 5
 7dc:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7e0:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7e4:	08 95       	ret

000007e6 <turnLeft>:
 7e6:	20 e2       	ldi	r18, 0x20	; 32
 7e8:	25 b9       	out	0x05, r18	; 5
 7ea:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7ee:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7f2:	08 95       	ret

000007f4 <backward>:
 7f4:	26 e6       	ldi	r18, 0x66	; 102
 7f6:	25 b9       	out	0x05, r18	; 5
 7f8:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7fc:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 800:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 804:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 808:	08 95       	ret

0000080a <turnLeftWideForward>:
 80a:	20 e6       	ldi	r18, 0x60	; 96
 80c:	25 b9       	out	0x05, r18	; 5
 80e:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 812:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 816:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 81a:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 81e:	08 95       	ret

00000820 <turnLeftWideBackward>:
}

void turnLeftWideBackward(int speed, int speed2) {		// Right motor PWM higher than left motor
	PORTB = (1<<PORTB1) | (1<<PORTB2) | (1<<PORTB5) | (1<<PORTB6);		// Set left and right motors backward
 820:	26 e6       	ldi	r18, 0x66	; 102
 822:	25 b9       	out	0x05, r18	; 5
	OCR1A = speed;   							// Set the speed of the left motor with PWM
 824:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 828:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
	OCR1B = speed2;   							// Set the speed of the right motor with PWM
 82c:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 830:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 834:	08 95       	ret

00000836 <direction>:
}

/* Function that calls the function of the PWM motor to give instructions depending on the input from the user */
void direction(char inputKeyboard) {
 836:	e8 2f       	mov	r30, r24
	switch(inputKeyboard) {
 838:	82 33       	cpi	r24, 0x32	; 50
 83a:	91 f0       	breq	.+36     	; 0x860 <direction+0x2a>
 83c:	18 f4       	brcc	.+6      	; 0x844 <direction+0xe>
 83e:	81 33       	cpi	r24, 0x31	; 49
 840:	31 f0       	breq	.+12     	; 0x84e <direction+0x18>
 842:	28 c0       	rjmp	.+80     	; 0x894 <direction+0x5e>
 844:	83 33       	cpi	r24, 0x33	; 51
 846:	a9 f0       	breq	.+42     	; 0x872 <direction+0x3c>
 848:	84 33       	cpi	r24, 0x34	; 52
 84a:	e1 f0       	breq	.+56     	; 0x884 <direction+0x4e>
 84c:	23 c0       	rjmp	.+70     	; 0x894 <direction+0x5e>
		case '1':
			SET_SPEED = SPEED1;					// PWM 100
 84e:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <SPEED1>
 852:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <SPEED1+0x1>
 856:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 85a:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
			break;
 85e:	1a c0       	rjmp	.+52     	; 0x894 <direction+0x5e>
		case '2':
			SET_SPEED = SPEED2;					// PWM 200
 860:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SPEED2>
 864:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SPEED2+0x1>
 868:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 86c:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
			break;
 870:	11 c0       	rjmp	.+34     	; 0x894 <direction+0x5e>
		case '3':
			SET_SPEED = SPEED3;					// PWM 300
 872:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SPEED3>
 876:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <SPEED3+0x1>
 87a:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 87e:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
			break;
 882:	08 c0       	rjmp	.+16     	; 0x894 <direction+0x5e>
		case '4':
			SET_SPEED = SPEED4;					// PWM 400
 884:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <SPEED4>
 888:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <SPEED4+0x1>
 88c:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 890:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
			break;
	}

	switch(inputKeyboard) {
 894:	8e 2f       	mov	r24, r30
 896:	90 e0       	ldi	r25, 0x00	; 0
 898:	fc 01       	movw	r30, r24
 89a:	e1 56       	subi	r30, 0x61	; 97
 89c:	f1 09       	sbc	r31, r1
 89e:	ea 31       	cpi	r30, 0x1A	; 26
 8a0:	f1 05       	cpc	r31, r1
 8a2:	08 f0       	brcs	.+2      	; 0x8a6 <direction+0x70>
 8a4:	70 c0       	rjmp	.+224    	; 0x986 <direction+0x150>
 8a6:	ea 5a       	subi	r30, 0xAA	; 170
 8a8:	ff 4f       	sbci	r31, 0xFF	; 255
 8aa:	0c 94 dc 04 	jmp	0x9b8	; 0x9b8 <__tablejump2__>
		case 'w':
			forward(SET_SPEED);
 8ae:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8b2:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 8b6:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <forward>
			break;
 8ba:	08 95       	ret
		case 's':
			backward(SET_SPEED);
 8bc:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8c0:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 8c4:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <backward>
			break;
 8c8:	08 95       	ret
		case 'a':
			turnLeft(SET_SPEED);
 8ca:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8ce:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 8d2:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <turnLeft>
			turnRight(SPEED0);
 8d6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 8da:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 8de:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <turnRight>
			break;
 8e2:	08 95       	ret
		case 'd':
			turnLeft(SPEED0);
 8e4:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 8e8:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 8ec:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <turnLeft>
			turnRight(SET_SPEED);
 8f0:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8f4:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 8f8:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <turnRight>
			break;
 8fc:	08 95       	ret
		case 'q':
			turnLeftWideForward(SET_SPEED, SET_SPEED/2);
 8fe:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <SET_SPEED>
 902:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <SET_SPEED+0x1>
 906:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 90a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 90e:	b9 01       	movw	r22, r18
 910:	33 23       	and	r19, r19
 912:	14 f4       	brge	.+4      	; 0x918 <direction+0xe2>
 914:	6f 5f       	subi	r22, 0xFF	; 255
 916:	7f 4f       	sbci	r23, 0xFF	; 255
 918:	75 95       	asr	r23
 91a:	67 95       	ror	r22
 91c:	0e 94 05 04 	call	0x80a	; 0x80a <turnLeftWideForward>
			break;
 920:	08 95       	ret
		case 'e':
			turnLeftWideForward(SET_SPEED/2, SET_SPEED);
 922:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <SET_SPEED>
 926:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <SET_SPEED+0x1>
 92a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 92e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 932:	99 23       	and	r25, r25
 934:	0c f4       	brge	.+2      	; 0x938 <direction+0x102>
 936:	01 96       	adiw	r24, 0x01	; 1
 938:	95 95       	asr	r25
 93a:	87 95       	ror	r24
 93c:	0e 94 05 04 	call	0x80a	; 0x80a <turnLeftWideForward>
			break;
 940:	08 95       	ret
		case 'z':
			turnLeftWideBackward(SET_SPEED, SET_SPEED/2);
 942:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <SET_SPEED>
 946:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <SET_SPEED+0x1>
 94a:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 94e:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 952:	b9 01       	movw	r22, r18
 954:	33 23       	and	r19, r19
 956:	14 f4       	brge	.+4      	; 0x95c <direction+0x126>
 958:	6f 5f       	subi	r22, 0xFF	; 255
 95a:	7f 4f       	sbci	r23, 0xFF	; 255
 95c:	75 95       	asr	r23
 95e:	67 95       	ror	r22
 960:	0e 94 10 04 	call	0x820	; 0x820 <turnLeftWideBackward>
			break;
 964:	08 95       	ret
		case 'c':
			turnLeftWideBackward(SET_SPEED/2, SET_SPEED);
 966:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <SET_SPEED>
 96a:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <SET_SPEED+0x1>
 96e:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 972:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 976:	99 23       	and	r25, r25
 978:	0c f4       	brge	.+2      	; 0x97c <direction+0x146>
 97a:	01 96       	adiw	r24, 0x01	; 1
 97c:	95 95       	asr	r25
 97e:	87 95       	ror	r24
 980:	0e 94 10 04 	call	0x820	; 0x820 <turnLeftWideBackward>
			break;
 984:	08 95       	ret
		default:								// By no input, no actions
			forward(SPEED0);
 986:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 98a:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 98e:	0e 94 e1 03 	call	0x7c2	; 0x7c2 <forward>
			backward(SPEED0);
 992:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 996:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 99a:	0e 94 fa 03 	call	0x7f4	; 0x7f4 <backward>
			turnLeft(SPEED0);
 99e:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9a2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9a6:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <turnLeft>
			turnRight(SPEED0);
 9aa:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9ae:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9b2:	0e 94 ec 03 	call	0x7d8	; 0x7d8 <turnRight>
 9b6:	08 95       	ret

000009b8 <__tablejump2__>:
 9b8:	ee 0f       	add	r30, r30
 9ba:	ff 1f       	adc	r31, r31
 9bc:	05 90       	lpm	r0, Z+
 9be:	f4 91       	lpm	r31, Z
 9c0:	e0 2d       	mov	r30, r0
 9c2:	09 94       	ijmp

000009c4 <__divsf3>:
 9c4:	0e 94 f6 04 	call	0x9ec	; 0x9ec <__divsf3x>
 9c8:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
 9cc:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
 9d0:	58 f0       	brcs	.+22     	; 0x9e8 <__divsf3+0x24>
 9d2:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
 9d6:	40 f0       	brcs	.+16     	; 0x9e8 <__divsf3+0x24>
 9d8:	29 f4       	brne	.+10     	; 0x9e4 <__divsf3+0x20>
 9da:	5f 3f       	cpi	r21, 0xFF	; 255
 9dc:	29 f0       	breq	.+10     	; 0x9e8 <__divsf3+0x24>
 9de:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 9e2:	51 11       	cpse	r21, r1
 9e4:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 9e8:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>

000009ec <__divsf3x>:
 9ec:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
 9f0:	68 f3       	brcs	.-38     	; 0x9cc <__divsf3+0x8>

000009f2 <__divsf3_pse>:
 9f2:	99 23       	and	r25, r25
 9f4:	b1 f3       	breq	.-20     	; 0x9e2 <__divsf3+0x1e>
 9f6:	55 23       	and	r21, r21
 9f8:	91 f3       	breq	.-28     	; 0x9de <__divsf3+0x1a>
 9fa:	95 1b       	sub	r25, r21
 9fc:	55 0b       	sbc	r21, r21
 9fe:	bb 27       	eor	r27, r27
 a00:	aa 27       	eor	r26, r26
 a02:	62 17       	cp	r22, r18
 a04:	73 07       	cpc	r23, r19
 a06:	84 07       	cpc	r24, r20
 a08:	38 f0       	brcs	.+14     	; 0xa18 <__DATA_REGION_LENGTH__+0x18>
 a0a:	9f 5f       	subi	r25, 0xFF	; 255
 a0c:	5f 4f       	sbci	r21, 0xFF	; 255
 a0e:	22 0f       	add	r18, r18
 a10:	33 1f       	adc	r19, r19
 a12:	44 1f       	adc	r20, r20
 a14:	aa 1f       	adc	r26, r26
 a16:	a9 f3       	breq	.-22     	; 0xa02 <__DATA_REGION_LENGTH__+0x2>
 a18:	35 d0       	rcall	.+106    	; 0xa84 <__DATA_REGION_LENGTH__+0x84>
 a1a:	0e 2e       	mov	r0, r30
 a1c:	3a f0       	brmi	.+14     	; 0xa2c <__DATA_REGION_LENGTH__+0x2c>
 a1e:	e0 e8       	ldi	r30, 0x80	; 128
 a20:	32 d0       	rcall	.+100    	; 0xa86 <__DATA_REGION_LENGTH__+0x86>
 a22:	91 50       	subi	r25, 0x01	; 1
 a24:	50 40       	sbci	r21, 0x00	; 0
 a26:	e6 95       	lsr	r30
 a28:	00 1c       	adc	r0, r0
 a2a:	ca f7       	brpl	.-14     	; 0xa1e <__DATA_REGION_LENGTH__+0x1e>
 a2c:	2b d0       	rcall	.+86     	; 0xa84 <__DATA_REGION_LENGTH__+0x84>
 a2e:	fe 2f       	mov	r31, r30
 a30:	29 d0       	rcall	.+82     	; 0xa84 <__DATA_REGION_LENGTH__+0x84>
 a32:	66 0f       	add	r22, r22
 a34:	77 1f       	adc	r23, r23
 a36:	88 1f       	adc	r24, r24
 a38:	bb 1f       	adc	r27, r27
 a3a:	26 17       	cp	r18, r22
 a3c:	37 07       	cpc	r19, r23
 a3e:	48 07       	cpc	r20, r24
 a40:	ab 07       	cpc	r26, r27
 a42:	b0 e8       	ldi	r27, 0x80	; 128
 a44:	09 f0       	breq	.+2      	; 0xa48 <__DATA_REGION_LENGTH__+0x48>
 a46:	bb 0b       	sbc	r27, r27
 a48:	80 2d       	mov	r24, r0
 a4a:	bf 01       	movw	r22, r30
 a4c:	ff 27       	eor	r31, r31
 a4e:	93 58       	subi	r25, 0x83	; 131
 a50:	5f 4f       	sbci	r21, 0xFF	; 255
 a52:	3a f0       	brmi	.+14     	; 0xa62 <__DATA_REGION_LENGTH__+0x62>
 a54:	9e 3f       	cpi	r25, 0xFE	; 254
 a56:	51 05       	cpc	r21, r1
 a58:	78 f0       	brcs	.+30     	; 0xa78 <__DATA_REGION_LENGTH__+0x78>
 a5a:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 a5e:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 a62:	5f 3f       	cpi	r21, 0xFF	; 255
 a64:	e4 f3       	brlt	.-8      	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
 a66:	98 3e       	cpi	r25, 0xE8	; 232
 a68:	d4 f3       	brlt	.-12     	; 0xa5e <__DATA_REGION_LENGTH__+0x5e>
 a6a:	86 95       	lsr	r24
 a6c:	77 95       	ror	r23
 a6e:	67 95       	ror	r22
 a70:	b7 95       	ror	r27
 a72:	f7 95       	ror	r31
 a74:	9f 5f       	subi	r25, 0xFF	; 255
 a76:	c9 f7       	brne	.-14     	; 0xa6a <__DATA_REGION_LENGTH__+0x6a>
 a78:	88 0f       	add	r24, r24
 a7a:	91 1d       	adc	r25, r1
 a7c:	96 95       	lsr	r25
 a7e:	87 95       	ror	r24
 a80:	97 f9       	bld	r25, 7
 a82:	08 95       	ret
 a84:	e1 e0       	ldi	r30, 0x01	; 1
 a86:	66 0f       	add	r22, r22
 a88:	77 1f       	adc	r23, r23
 a8a:	88 1f       	adc	r24, r24
 a8c:	bb 1f       	adc	r27, r27
 a8e:	62 17       	cp	r22, r18
 a90:	73 07       	cpc	r23, r19
 a92:	84 07       	cpc	r24, r20
 a94:	ba 07       	cpc	r27, r26
 a96:	20 f0       	brcs	.+8      	; 0xaa0 <__DATA_REGION_LENGTH__+0xa0>
 a98:	62 1b       	sub	r22, r18
 a9a:	73 0b       	sbc	r23, r19
 a9c:	84 0b       	sbc	r24, r20
 a9e:	ba 0b       	sbc	r27, r26
 aa0:	ee 1f       	adc	r30, r30
 aa2:	88 f7       	brcc	.-30     	; 0xa86 <__DATA_REGION_LENGTH__+0x86>
 aa4:	e0 95       	com	r30
 aa6:	08 95       	ret

00000aa8 <__fixsfsi>:
 aa8:	0e 94 5b 05 	call	0xab6	; 0xab6 <__fixunssfsi>
 aac:	68 94       	set
 aae:	b1 11       	cpse	r27, r1
 ab0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 ab4:	08 95       	ret

00000ab6 <__fixunssfsi>:
 ab6:	0e 94 f7 05 	call	0xbee	; 0xbee <__fp_splitA>
 aba:	88 f0       	brcs	.+34     	; 0xade <__fixunssfsi+0x28>
 abc:	9f 57       	subi	r25, 0x7F	; 127
 abe:	98 f0       	brcs	.+38     	; 0xae6 <__fixunssfsi+0x30>
 ac0:	b9 2f       	mov	r27, r25
 ac2:	99 27       	eor	r25, r25
 ac4:	b7 51       	subi	r27, 0x17	; 23
 ac6:	b0 f0       	brcs	.+44     	; 0xaf4 <__fixunssfsi+0x3e>
 ac8:	e1 f0       	breq	.+56     	; 0xb02 <__stack+0x3>
 aca:	66 0f       	add	r22, r22
 acc:	77 1f       	adc	r23, r23
 ace:	88 1f       	adc	r24, r24
 ad0:	99 1f       	adc	r25, r25
 ad2:	1a f0       	brmi	.+6      	; 0xada <__fixunssfsi+0x24>
 ad4:	ba 95       	dec	r27
 ad6:	c9 f7       	brne	.-14     	; 0xaca <__fixunssfsi+0x14>
 ad8:	14 c0       	rjmp	.+40     	; 0xb02 <__stack+0x3>
 ada:	b1 30       	cpi	r27, 0x01	; 1
 adc:	91 f0       	breq	.+36     	; 0xb02 <__stack+0x3>
 ade:	0e 94 11 06 	call	0xc22	; 0xc22 <__fp_zero>
 ae2:	b1 e0       	ldi	r27, 0x01	; 1
 ae4:	08 95       	ret
 ae6:	0c 94 11 06 	jmp	0xc22	; 0xc22 <__fp_zero>
 aea:	67 2f       	mov	r22, r23
 aec:	78 2f       	mov	r23, r24
 aee:	88 27       	eor	r24, r24
 af0:	b8 5f       	subi	r27, 0xF8	; 248
 af2:	39 f0       	breq	.+14     	; 0xb02 <__stack+0x3>
 af4:	b9 3f       	cpi	r27, 0xF9	; 249
 af6:	cc f3       	brlt	.-14     	; 0xaea <__fixunssfsi+0x34>
 af8:	86 95       	lsr	r24
 afa:	77 95       	ror	r23
 afc:	67 95       	ror	r22
 afe:	b3 95       	inc	r27
 b00:	d9 f7       	brne	.-10     	; 0xaf8 <__fixunssfsi+0x42>
 b02:	3e f4       	brtc	.+14     	; 0xb12 <__stack+0x13>
 b04:	90 95       	com	r25
 b06:	80 95       	com	r24
 b08:	70 95       	com	r23
 b0a:	61 95       	neg	r22
 b0c:	7f 4f       	sbci	r23, 0xFF	; 255
 b0e:	8f 4f       	sbci	r24, 0xFF	; 255
 b10:	9f 4f       	sbci	r25, 0xFF	; 255
 b12:	08 95       	ret

00000b14 <__floatunsisf>:
 b14:	e8 94       	clt
 b16:	09 c0       	rjmp	.+18     	; 0xb2a <__floatsisf+0x12>

00000b18 <__floatsisf>:
 b18:	97 fb       	bst	r25, 7
 b1a:	3e f4       	brtc	.+14     	; 0xb2a <__floatsisf+0x12>
 b1c:	90 95       	com	r25
 b1e:	80 95       	com	r24
 b20:	70 95       	com	r23
 b22:	61 95       	neg	r22
 b24:	7f 4f       	sbci	r23, 0xFF	; 255
 b26:	8f 4f       	sbci	r24, 0xFF	; 255
 b28:	9f 4f       	sbci	r25, 0xFF	; 255
 b2a:	99 23       	and	r25, r25
 b2c:	a9 f0       	breq	.+42     	; 0xb58 <__floatsisf+0x40>
 b2e:	f9 2f       	mov	r31, r25
 b30:	96 e9       	ldi	r25, 0x96	; 150
 b32:	bb 27       	eor	r27, r27
 b34:	93 95       	inc	r25
 b36:	f6 95       	lsr	r31
 b38:	87 95       	ror	r24
 b3a:	77 95       	ror	r23
 b3c:	67 95       	ror	r22
 b3e:	b7 95       	ror	r27
 b40:	f1 11       	cpse	r31, r1
 b42:	f8 cf       	rjmp	.-16     	; 0xb34 <__floatsisf+0x1c>
 b44:	fa f4       	brpl	.+62     	; 0xb84 <__floatsisf+0x6c>
 b46:	bb 0f       	add	r27, r27
 b48:	11 f4       	brne	.+4      	; 0xb4e <__floatsisf+0x36>
 b4a:	60 ff       	sbrs	r22, 0
 b4c:	1b c0       	rjmp	.+54     	; 0xb84 <__floatsisf+0x6c>
 b4e:	6f 5f       	subi	r22, 0xFF	; 255
 b50:	7f 4f       	sbci	r23, 0xFF	; 255
 b52:	8f 4f       	sbci	r24, 0xFF	; 255
 b54:	9f 4f       	sbci	r25, 0xFF	; 255
 b56:	16 c0       	rjmp	.+44     	; 0xb84 <__floatsisf+0x6c>
 b58:	88 23       	and	r24, r24
 b5a:	11 f0       	breq	.+4      	; 0xb60 <__floatsisf+0x48>
 b5c:	96 e9       	ldi	r25, 0x96	; 150
 b5e:	11 c0       	rjmp	.+34     	; 0xb82 <__floatsisf+0x6a>
 b60:	77 23       	and	r23, r23
 b62:	21 f0       	breq	.+8      	; 0xb6c <__floatsisf+0x54>
 b64:	9e e8       	ldi	r25, 0x8E	; 142
 b66:	87 2f       	mov	r24, r23
 b68:	76 2f       	mov	r23, r22
 b6a:	05 c0       	rjmp	.+10     	; 0xb76 <__floatsisf+0x5e>
 b6c:	66 23       	and	r22, r22
 b6e:	71 f0       	breq	.+28     	; 0xb8c <__floatsisf+0x74>
 b70:	96 e8       	ldi	r25, 0x86	; 134
 b72:	86 2f       	mov	r24, r22
 b74:	70 e0       	ldi	r23, 0x00	; 0
 b76:	60 e0       	ldi	r22, 0x00	; 0
 b78:	2a f0       	brmi	.+10     	; 0xb84 <__floatsisf+0x6c>
 b7a:	9a 95       	dec	r25
 b7c:	66 0f       	add	r22, r22
 b7e:	77 1f       	adc	r23, r23
 b80:	88 1f       	adc	r24, r24
 b82:	da f7       	brpl	.-10     	; 0xb7a <__floatsisf+0x62>
 b84:	88 0f       	add	r24, r24
 b86:	96 95       	lsr	r25
 b88:	87 95       	ror	r24
 b8a:	97 f9       	bld	r25, 7
 b8c:	08 95       	ret

00000b8e <__fp_inf>:
 b8e:	97 f9       	bld	r25, 7
 b90:	9f 67       	ori	r25, 0x7F	; 127
 b92:	80 e8       	ldi	r24, 0x80	; 128
 b94:	70 e0       	ldi	r23, 0x00	; 0
 b96:	60 e0       	ldi	r22, 0x00	; 0
 b98:	08 95       	ret

00000b9a <__fp_nan>:
 b9a:	9f ef       	ldi	r25, 0xFF	; 255
 b9c:	80 ec       	ldi	r24, 0xC0	; 192
 b9e:	08 95       	ret

00000ba0 <__fp_pscA>:
 ba0:	00 24       	eor	r0, r0
 ba2:	0a 94       	dec	r0
 ba4:	16 16       	cp	r1, r22
 ba6:	17 06       	cpc	r1, r23
 ba8:	18 06       	cpc	r1, r24
 baa:	09 06       	cpc	r0, r25
 bac:	08 95       	ret

00000bae <__fp_pscB>:
 bae:	00 24       	eor	r0, r0
 bb0:	0a 94       	dec	r0
 bb2:	12 16       	cp	r1, r18
 bb4:	13 06       	cpc	r1, r19
 bb6:	14 06       	cpc	r1, r20
 bb8:	05 06       	cpc	r0, r21
 bba:	08 95       	ret

00000bbc <__fp_round>:
 bbc:	09 2e       	mov	r0, r25
 bbe:	03 94       	inc	r0
 bc0:	00 0c       	add	r0, r0
 bc2:	11 f4       	brne	.+4      	; 0xbc8 <__fp_round+0xc>
 bc4:	88 23       	and	r24, r24
 bc6:	52 f0       	brmi	.+20     	; 0xbdc <__fp_round+0x20>
 bc8:	bb 0f       	add	r27, r27
 bca:	40 f4       	brcc	.+16     	; 0xbdc <__fp_round+0x20>
 bcc:	bf 2b       	or	r27, r31
 bce:	11 f4       	brne	.+4      	; 0xbd4 <__fp_round+0x18>
 bd0:	60 ff       	sbrs	r22, 0
 bd2:	04 c0       	rjmp	.+8      	; 0xbdc <__fp_round+0x20>
 bd4:	6f 5f       	subi	r22, 0xFF	; 255
 bd6:	7f 4f       	sbci	r23, 0xFF	; 255
 bd8:	8f 4f       	sbci	r24, 0xFF	; 255
 bda:	9f 4f       	sbci	r25, 0xFF	; 255
 bdc:	08 95       	ret

00000bde <__fp_split3>:
 bde:	57 fd       	sbrc	r21, 7
 be0:	90 58       	subi	r25, 0x80	; 128
 be2:	44 0f       	add	r20, r20
 be4:	55 1f       	adc	r21, r21
 be6:	59 f0       	breq	.+22     	; 0xbfe <__fp_splitA+0x10>
 be8:	5f 3f       	cpi	r21, 0xFF	; 255
 bea:	71 f0       	breq	.+28     	; 0xc08 <__fp_splitA+0x1a>
 bec:	47 95       	ror	r20

00000bee <__fp_splitA>:
 bee:	88 0f       	add	r24, r24
 bf0:	97 fb       	bst	r25, 7
 bf2:	99 1f       	adc	r25, r25
 bf4:	61 f0       	breq	.+24     	; 0xc0e <__fp_splitA+0x20>
 bf6:	9f 3f       	cpi	r25, 0xFF	; 255
 bf8:	79 f0       	breq	.+30     	; 0xc18 <__fp_splitA+0x2a>
 bfa:	87 95       	ror	r24
 bfc:	08 95       	ret
 bfe:	12 16       	cp	r1, r18
 c00:	13 06       	cpc	r1, r19
 c02:	14 06       	cpc	r1, r20
 c04:	55 1f       	adc	r21, r21
 c06:	f2 cf       	rjmp	.-28     	; 0xbec <__fp_split3+0xe>
 c08:	46 95       	lsr	r20
 c0a:	f1 df       	rcall	.-30     	; 0xbee <__fp_splitA>
 c0c:	08 c0       	rjmp	.+16     	; 0xc1e <__fp_splitA+0x30>
 c0e:	16 16       	cp	r1, r22
 c10:	17 06       	cpc	r1, r23
 c12:	18 06       	cpc	r1, r24
 c14:	99 1f       	adc	r25, r25
 c16:	f1 cf       	rjmp	.-30     	; 0xbfa <__fp_splitA+0xc>
 c18:	86 95       	lsr	r24
 c1a:	71 05       	cpc	r23, r1
 c1c:	61 05       	cpc	r22, r1
 c1e:	08 94       	sec
 c20:	08 95       	ret

00000c22 <__fp_zero>:
 c22:	e8 94       	clt

00000c24 <__fp_szero>:
 c24:	bb 27       	eor	r27, r27
 c26:	66 27       	eor	r22, r22
 c28:	77 27       	eor	r23, r23
 c2a:	cb 01       	movw	r24, r22
 c2c:	97 f9       	bld	r25, 7
 c2e:	08 95       	ret

00000c30 <__mulsf3>:
 c30:	0e 94 2b 06 	call	0xc56	; 0xc56 <__mulsf3x>
 c34:	0c 94 de 05 	jmp	0xbbc	; 0xbbc <__fp_round>
 c38:	0e 94 d0 05 	call	0xba0	; 0xba0 <__fp_pscA>
 c3c:	38 f0       	brcs	.+14     	; 0xc4c <__mulsf3+0x1c>
 c3e:	0e 94 d7 05 	call	0xbae	; 0xbae <__fp_pscB>
 c42:	20 f0       	brcs	.+8      	; 0xc4c <__mulsf3+0x1c>
 c44:	95 23       	and	r25, r21
 c46:	11 f0       	breq	.+4      	; 0xc4c <__mulsf3+0x1c>
 c48:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 c4c:	0c 94 cd 05 	jmp	0xb9a	; 0xb9a <__fp_nan>
 c50:	11 24       	eor	r1, r1
 c52:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>

00000c56 <__mulsf3x>:
 c56:	0e 94 ef 05 	call	0xbde	; 0xbde <__fp_split3>
 c5a:	70 f3       	brcs	.-36     	; 0xc38 <__mulsf3+0x8>

00000c5c <__mulsf3_pse>:
 c5c:	95 9f       	mul	r25, r21
 c5e:	c1 f3       	breq	.-16     	; 0xc50 <__mulsf3+0x20>
 c60:	95 0f       	add	r25, r21
 c62:	50 e0       	ldi	r21, 0x00	; 0
 c64:	55 1f       	adc	r21, r21
 c66:	62 9f       	mul	r22, r18
 c68:	f0 01       	movw	r30, r0
 c6a:	72 9f       	mul	r23, r18
 c6c:	bb 27       	eor	r27, r27
 c6e:	f0 0d       	add	r31, r0
 c70:	b1 1d       	adc	r27, r1
 c72:	63 9f       	mul	r22, r19
 c74:	aa 27       	eor	r26, r26
 c76:	f0 0d       	add	r31, r0
 c78:	b1 1d       	adc	r27, r1
 c7a:	aa 1f       	adc	r26, r26
 c7c:	64 9f       	mul	r22, r20
 c7e:	66 27       	eor	r22, r22
 c80:	b0 0d       	add	r27, r0
 c82:	a1 1d       	adc	r26, r1
 c84:	66 1f       	adc	r22, r22
 c86:	82 9f       	mul	r24, r18
 c88:	22 27       	eor	r18, r18
 c8a:	b0 0d       	add	r27, r0
 c8c:	a1 1d       	adc	r26, r1
 c8e:	62 1f       	adc	r22, r18
 c90:	73 9f       	mul	r23, r19
 c92:	b0 0d       	add	r27, r0
 c94:	a1 1d       	adc	r26, r1
 c96:	62 1f       	adc	r22, r18
 c98:	83 9f       	mul	r24, r19
 c9a:	a0 0d       	add	r26, r0
 c9c:	61 1d       	adc	r22, r1
 c9e:	22 1f       	adc	r18, r18
 ca0:	74 9f       	mul	r23, r20
 ca2:	33 27       	eor	r19, r19
 ca4:	a0 0d       	add	r26, r0
 ca6:	61 1d       	adc	r22, r1
 ca8:	23 1f       	adc	r18, r19
 caa:	84 9f       	mul	r24, r20
 cac:	60 0d       	add	r22, r0
 cae:	21 1d       	adc	r18, r1
 cb0:	82 2f       	mov	r24, r18
 cb2:	76 2f       	mov	r23, r22
 cb4:	6a 2f       	mov	r22, r26
 cb6:	11 24       	eor	r1, r1
 cb8:	9f 57       	subi	r25, 0x7F	; 127
 cba:	50 40       	sbci	r21, 0x00	; 0
 cbc:	9a f0       	brmi	.+38     	; 0xce4 <__mulsf3_pse+0x88>
 cbe:	f1 f0       	breq	.+60     	; 0xcfc <__mulsf3_pse+0xa0>
 cc0:	88 23       	and	r24, r24
 cc2:	4a f0       	brmi	.+18     	; 0xcd6 <__mulsf3_pse+0x7a>
 cc4:	ee 0f       	add	r30, r30
 cc6:	ff 1f       	adc	r31, r31
 cc8:	bb 1f       	adc	r27, r27
 cca:	66 1f       	adc	r22, r22
 ccc:	77 1f       	adc	r23, r23
 cce:	88 1f       	adc	r24, r24
 cd0:	91 50       	subi	r25, 0x01	; 1
 cd2:	50 40       	sbci	r21, 0x00	; 0
 cd4:	a9 f7       	brne	.-22     	; 0xcc0 <__mulsf3_pse+0x64>
 cd6:	9e 3f       	cpi	r25, 0xFE	; 254
 cd8:	51 05       	cpc	r21, r1
 cda:	80 f0       	brcs	.+32     	; 0xcfc <__mulsf3_pse+0xa0>
 cdc:	0c 94 c7 05 	jmp	0xb8e	; 0xb8e <__fp_inf>
 ce0:	0c 94 12 06 	jmp	0xc24	; 0xc24 <__fp_szero>
 ce4:	5f 3f       	cpi	r21, 0xFF	; 255
 ce6:	e4 f3       	brlt	.-8      	; 0xce0 <__mulsf3_pse+0x84>
 ce8:	98 3e       	cpi	r25, 0xE8	; 232
 cea:	d4 f3       	brlt	.-12     	; 0xce0 <__mulsf3_pse+0x84>
 cec:	86 95       	lsr	r24
 cee:	77 95       	ror	r23
 cf0:	67 95       	ror	r22
 cf2:	b7 95       	ror	r27
 cf4:	f7 95       	ror	r31
 cf6:	e7 95       	ror	r30
 cf8:	9f 5f       	subi	r25, 0xFF	; 255
 cfa:	c1 f7       	brne	.-16     	; 0xcec <__mulsf3_pse+0x90>
 cfc:	fe 2b       	or	r31, r30
 cfe:	88 0f       	add	r24, r24
 d00:	91 1d       	adc	r25, r1
 d02:	96 95       	lsr	r25
 d04:	87 95       	ror	r24
 d06:	97 f9       	bld	r25, 7
 d08:	08 95       	ret

00000d0a <__itoa_ncheck>:
 d0a:	bb 27       	eor	r27, r27
 d0c:	4a 30       	cpi	r20, 0x0A	; 10
 d0e:	31 f4       	brne	.+12     	; 0xd1c <__itoa_ncheck+0x12>
 d10:	99 23       	and	r25, r25
 d12:	22 f4       	brpl	.+8      	; 0xd1c <__itoa_ncheck+0x12>
 d14:	bd e2       	ldi	r27, 0x2D	; 45
 d16:	90 95       	com	r25
 d18:	81 95       	neg	r24
 d1a:	9f 4f       	sbci	r25, 0xFF	; 255
 d1c:	0c 94 91 06 	jmp	0xd22	; 0xd22 <__utoa_common>

00000d20 <__utoa_ncheck>:
 d20:	bb 27       	eor	r27, r27

00000d22 <__utoa_common>:
 d22:	fb 01       	movw	r30, r22
 d24:	55 27       	eor	r21, r21
 d26:	aa 27       	eor	r26, r26
 d28:	88 0f       	add	r24, r24
 d2a:	99 1f       	adc	r25, r25
 d2c:	aa 1f       	adc	r26, r26
 d2e:	a4 17       	cp	r26, r20
 d30:	10 f0       	brcs	.+4      	; 0xd36 <__utoa_common+0x14>
 d32:	a4 1b       	sub	r26, r20
 d34:	83 95       	inc	r24
 d36:	50 51       	subi	r21, 0x10	; 16
 d38:	b9 f7       	brne	.-18     	; 0xd28 <__utoa_common+0x6>
 d3a:	a0 5d       	subi	r26, 0xD0	; 208
 d3c:	aa 33       	cpi	r26, 0x3A	; 58
 d3e:	08 f0       	brcs	.+2      	; 0xd42 <__utoa_common+0x20>
 d40:	a9 5d       	subi	r26, 0xD9	; 217
 d42:	a1 93       	st	Z+, r26
 d44:	00 97       	sbiw	r24, 0x00	; 0
 d46:	79 f7       	brne	.-34     	; 0xd26 <__utoa_common+0x4>
 d48:	b1 11       	cpse	r27, r1
 d4a:	b1 93       	st	Z+, r27
 d4c:	11 92       	st	Z+, r1
 d4e:	cb 01       	movw	r24, r22
 d50:	0c 94 aa 06 	jmp	0xd54	; 0xd54 <strrev>

00000d54 <strrev>:
 d54:	dc 01       	movw	r26, r24
 d56:	fc 01       	movw	r30, r24
 d58:	67 2f       	mov	r22, r23
 d5a:	71 91       	ld	r23, Z+
 d5c:	77 23       	and	r23, r23
 d5e:	e1 f7       	brne	.-8      	; 0xd58 <strrev+0x4>
 d60:	32 97       	sbiw	r30, 0x02	; 2
 d62:	04 c0       	rjmp	.+8      	; 0xd6c <strrev+0x18>
 d64:	7c 91       	ld	r23, X
 d66:	6d 93       	st	X+, r22
 d68:	70 83       	st	Z, r23
 d6a:	62 91       	ld	r22, -Z
 d6c:	ae 17       	cp	r26, r30
 d6e:	bf 07       	cpc	r27, r31
 d70:	c8 f3       	brcs	.-14     	; 0xd64 <strrev+0x10>
 d72:	08 95       	ret

00000d74 <_exit>:
 d74:	f8 94       	cli

00000d76 <__stop_program>:
 d76:	ff cf       	rjmp	.-2      	; 0xd76 <__stop_program>
