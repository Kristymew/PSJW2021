
zumo_xbee.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000005a  00800100  00000db4  00000e48  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000db4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000001c  0080015a  0080015a  00000ea2  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000ea2  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000ed4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000210  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000215b  00000000  00000000  00001124  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000fc8  00000000  00000000  0000327f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000105b  00000000  00000000  00004247  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000004b8  00000000  00000000  000052a4  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000008a7  00000000  00000000  0000575c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000ab4  00000000  00000000  00006003  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001c8  00000000  00000000  00006ab7  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__ctors_end>
   4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
   c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  10:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  14:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  18:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  1c:	0c 94 ab 02 	jmp	0x556	; 0x556 <__vector_7>
  20:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  24:	0c 94 c4 02 	jmp	0x588	; 0x588 <__vector_9>
  28:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  2c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  30:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  34:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  38:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  3c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  40:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  44:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  48:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  4c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  50:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  54:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  58:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  5c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  60:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  64:	0c 94 81 02 	jmp	0x502	; 0x502 <__vector_25>
  68:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  6c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  70:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  74:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  78:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  7c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  80:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  84:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  88:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  8c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  90:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  94:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  98:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  9c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a0:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a4:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  a8:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__bad_interrupt>
  ac:	83 04       	cpc	r8, r3
  ae:	e1 04       	cpc	r14, r1
  b0:	d1 04       	cpc	r13, r1
  b2:	90 04       	cpc	r9, r0
  b4:	af 04       	cpc	r10, r15
  b6:	e1 04       	cpc	r14, r1
  b8:	e1 04       	cpc	r14, r1
  ba:	e1 04       	cpc	r14, r1
  bc:	e1 04       	cpc	r14, r1
  be:	e1 04       	cpc	r14, r1
  c0:	e1 04       	cpc	r14, r1
  c2:	e1 04       	cpc	r14, r1
  c4:	e1 04       	cpc	r14, r1
  c6:	e1 04       	cpc	r14, r1
  c8:	e1 04       	cpc	r14, r1
  ca:	e1 04       	cpc	r14, r1
  cc:	9d 04       	cpc	r9, r13
  ce:	e1 04       	cpc	r14, r1
  d0:	7c 04       	cpc	r7, r12
  d2:	e1 04       	cpc	r14, r1
  d4:	e1 04       	cpc	r14, r1
  d6:	e1 04       	cpc	r14, r1
  d8:	75 04       	cpc	r7, r5
  da:	e1 04       	cpc	r14, r1
  dc:	e1 04       	cpc	r14, r1
  de:	bf 04       	cpc	r11, r15

000000e0 <__ctors_end>:
  e0:	11 24       	eor	r1, r1
  e2:	1f be       	out	0x3f, r1	; 63
  e4:	cf ef       	ldi	r28, 0xFF	; 255
  e6:	da e0       	ldi	r29, 0x0A	; 10
  e8:	de bf       	out	0x3e, r29	; 62
  ea:	cd bf       	out	0x3d, r28	; 61

000000ec <__do_copy_data>:
  ec:	11 e0       	ldi	r17, 0x01	; 1
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b1 e0       	ldi	r27, 0x01	; 1
  f2:	e4 eb       	ldi	r30, 0xB4	; 180
  f4:	fd e0       	ldi	r31, 0x0D	; 13
  f6:	02 c0       	rjmp	.+4      	; 0xfc <__do_copy_data+0x10>
  f8:	05 90       	lpm	r0, Z+
  fa:	0d 92       	st	X+, r0
  fc:	aa 35       	cpi	r26, 0x5A	; 90
  fe:	b1 07       	cpc	r27, r17
 100:	d9 f7       	brne	.-10     	; 0xf8 <__do_copy_data+0xc>

00000102 <__do_clear_bss>:
 102:	21 e0       	ldi	r18, 0x01	; 1
 104:	aa e5       	ldi	r26, 0x5A	; 90
 106:	b1 e0       	ldi	r27, 0x01	; 1
 108:	01 c0       	rjmp	.+2      	; 0x10c <.do_clear_bss_start>

0000010a <.do_clear_bss_loop>:
 10a:	1d 92       	st	X+, r1

0000010c <.do_clear_bss_start>:
 10c:	a6 37       	cpi	r26, 0x76	; 118
 10e:	b2 07       	cpc	r27, r18
 110:	e1 f7       	brne	.-8      	; 0x10a <.do_clear_bss_loop>
 112:	0e 94 cd 03 	call	0x79a	; 0x79a <main>
 116:	0c 94 d8 06 	jmp	0xdb0	; 0xdb0 <_exit>

0000011a <__bad_interrupt>:
 11a:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011e <initEncoders>:
 11e:	8d b1       	in	r24, 0x0d	; 13
 120:	8f 7b       	andi	r24, 0xBF	; 191
 122:	8d b9       	out	0x0d, r24	; 13
 124:	80 b3       	in	r24, 0x10	; 16
 126:	8e 7f       	andi	r24, 0xFE	; 254
 128:	80 bb       	out	0x10, r24	; 16
 12a:	8e b1       	in	r24, 0x0e	; 14
 12c:	80 64       	ori	r24, 0x40	; 64
 12e:	8e b9       	out	0x0e, r24	; 14
 130:	80 e3       	ldi	r24, 0x30	; 48
 132:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__TEXT_REGION_LENGTH__+0x7f806a>
 136:	80 e4       	ldi	r24, 0x40	; 64
 138:	8d bb       	out	0x1d, r24	; 29
 13a:	84 b1       	in	r24, 0x04	; 4
 13c:	8f 7e       	andi	r24, 0xEF	; 239
 13e:	84 b9       	out	0x04, r24	; 4
 140:	8d b1       	in	r24, 0x0d	; 13
 142:	8b 7f       	andi	r24, 0xFB	; 251
 144:	8d b9       	out	0x0d, r24	; 13
 146:	e8 e6       	ldi	r30, 0x68	; 104
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	81 60       	ori	r24, 0x01	; 1
 14e:	80 83       	st	Z, r24
 150:	eb e6       	ldi	r30, 0x6B	; 107
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	80 81       	ld	r24, Z
 156:	80 61       	ori	r24, 0x10	; 16
 158:	80 83       	st	Z, r24
 15a:	81 e0       	ldi	r24, 0x01	; 1
 15c:	8b bb       	out	0x1b, r24	; 27
 15e:	08 95       	ret

00000160 <zetGeleLedAan>:
 160:	88 b1       	in	r24, 0x08	; 8
 162:	80 68       	ori	r24, 0x80	; 128
 164:	88 b9       	out	0x08, r24	; 8
 166:	08 95       	ret

00000168 <zetGeleLedUit>:
 168:	88 b1       	in	r24, 0x08	; 8
 16a:	8f 77       	andi	r24, 0x7F	; 127
 16c:	88 b9       	out	0x08, r24	; 8
 16e:	08 95       	ret

00000170 <initI2C>:
	i2cStart();
	i2cSend(LSM303DAdresRead);
	uint8_t zh = i2cReadNoAck();
	i2cStop();
	return zh;
}
 170:	8b b1       	in	r24, 0x0b	; 11
 172:	83 60       	ori	r24, 0x03	; 3
 174:	8b b9       	out	0x0b, r24	; 11
 176:	88 e4       	ldi	r24, 0x48	; 72
 178:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
 17c:	ec eb       	ldi	r30, 0xBC	; 188
 17e:	f0 e0       	ldi	r31, 0x00	; 0
 180:	80 81       	ld	r24, Z
 182:	84 60       	ori	r24, 0x04	; 4
 184:	80 83       	st	Z, r24
 186:	08 95       	ret

00000188 <i2cWaitForComplete>:
 188:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 18c:	88 23       	and	r24, r24
 18e:	e4 f7       	brge	.-8      	; 0x188 <i2cWaitForComplete>
 190:	08 95       	ret

00000192 <i2cStart>:
 192:	84 ea       	ldi	r24, 0xA4	; 164
 194:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 198:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
 19c:	08 95       	ret

0000019e <i2cStop>:
 19e:	84 e9       	ldi	r24, 0x94	; 148
 1a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1a8:	84 fd       	sbrc	r24, 4
 1aa:	fc cf       	rjmp	.-8      	; 0x1a4 <i2cStop+0x6>
 1ac:	08 95       	ret

000001ae <i2cReadNoAck>:
 1ae:	84 e8       	ldi	r24, 0x84	; 132
 1b0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1b4:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
 1b8:	80 91 bb 00 	lds	r24, 0x00BB	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1bc:	08 95       	ret

000001be <i2cSend>:
 1be:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
 1c2:	84 e8       	ldi	r24, 0x84	; 132
 1c4:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1c8:	0e 94 c4 00 	call	0x188	; 0x188 <i2cWaitForComplete>
 1cc:	08 95       	ret

000001ce <setRegister>:
 1ce:	cf 93       	push	r28
 1d0:	c8 2f       	mov	r28, r24
 1d2:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
 1d6:	8a e3       	ldi	r24, 0x3A	; 58
 1d8:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
 1dc:	8c 2f       	mov	r24, r28
 1de:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
 1e2:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
 1e6:	cf 91       	pop	r28
 1e8:	08 95       	ret

000001ea <readXL>:

// --------------------------------- Gyroscoop ----------------------------
uint8_t readXL() {
 1ea:	cf 93       	push	r28
	i2cStart();
 1ec:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);   //i2c adres master read
 1f0:	87 ed       	ldi	r24, 0xD7	; 215
 1f2:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t xl = i2cReadNoAck();
 1f6:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 1fa:	c8 2f       	mov	r28, r24
	i2cStop();
 1fc:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return xl;
}
 200:	8c 2f       	mov	r24, r28
 202:	cf 91       	pop	r28
 204:	08 95       	ret

00000206 <readXH>:
uint8_t readXH() {
 206:	cf 93       	push	r28
	i2cStart();
 208:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);   //i2c adres master read
 20c:	87 ed       	ldi	r24, 0xD7	; 215
 20e:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t xh = i2cReadNoAck();
 212:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 216:	c8 2f       	mov	r28, r24
	i2cStop();
 218:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return xh;
}
 21c:	8c 2f       	mov	r24, r28
 21e:	cf 91       	pop	r28
 220:	08 95       	ret

00000222 <readYL>:

uint8_t readYL() {
 222:	cf 93       	push	r28
	i2cStart();
 224:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);	 //i2c adres master read
 228:	87 ed       	ldi	r24, 0xD7	; 215
 22a:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t yl = i2cReadNoAck();
 22e:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 232:	c8 2f       	mov	r28, r24
	i2cStop();
 234:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return yl;
}
 238:	8c 2f       	mov	r24, r28
 23a:	cf 91       	pop	r28
 23c:	08 95       	ret

0000023e <readYH>:
uint8_t readYH() {
 23e:	cf 93       	push	r28
	i2cStart();
 240:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);   //i2c adres master read
 244:	87 ed       	ldi	r24, 0xD7	; 215
 246:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t yh = i2cReadNoAck();
 24a:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 24e:	c8 2f       	mov	r28, r24
	i2cStop();
 250:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return yh;
}
 254:	8c 2f       	mov	r24, r28
 256:	cf 91       	pop	r28
 258:	08 95       	ret

0000025a <readZL>:
uint8_t readZL() {
 25a:	cf 93       	push	r28
	i2cStart();
 25c:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);   //i2c adres master read
 260:	87 ed       	ldi	r24, 0xD7	; 215
 262:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t zl = i2cReadNoAck();
 266:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 26a:	c8 2f       	mov	r28, r24
	i2cStop();
 26c:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return zl;
}
 270:	8c 2f       	mov	r24, r28
 272:	cf 91       	pop	r28
 274:	08 95       	ret

00000276 <readZH>:
uint8_t readZH() {
 276:	cf 93       	push	r28
	i2cStart();
 278:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(L3GD20HAdresRead);   //i2c adres master read
 27c:	87 ed       	ldi	r24, 0xD7	; 215
 27e:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	uint8_t zh = i2cReadNoAck();
 282:	0e 94 d7 00 	call	0x1ae	; 0x1ae <i2cReadNoAck>
 286:	c8 2f       	mov	r28, r24
	i2cStop();
 288:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	return zh;
}
 28c:	8c 2f       	mov	r24, r28
 28e:	cf 91       	pop	r28
 290:	08 95       	ret

00000292 <calibratie>:

void calibratie() {
 292:	2f 92       	push	r2
 294:	3f 92       	push	r3
 296:	4f 92       	push	r4
 298:	5f 92       	push	r5
 29a:	6f 92       	push	r6
 29c:	7f 92       	push	r7
 29e:	8f 92       	push	r8
 2a0:	9f 92       	push	r9
 2a2:	af 92       	push	r10
 2a4:	bf 92       	push	r11
 2a6:	cf 92       	push	r12
 2a8:	df 92       	push	r13
 2aa:	ef 92       	push	r14
 2ac:	ff 92       	push	r15
 2ae:	0f 93       	push	r16
 2b0:	1f 93       	push	r17
 2b2:	cf 93       	push	r28
 2b4:	df 93       	push	r29
 2b6:	00 d0       	rcall	.+0      	; 0x2b8 <calibratie+0x26>
 2b8:	1f 92       	push	r1
 2ba:	cd b7       	in	r28, 0x3d	; 61
 2bc:	de b7       	in	r29, 0x3e	; 62
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 2be:	21 2c       	mov	r2, r1
 2c0:	31 2c       	mov	r3, r1
}

void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;
 2c2:	c1 2c       	mov	r12, r1
 2c4:	d1 2c       	mov	r13, r1
 2c6:	76 01       	movw	r14, r12
	return zh;
}

void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
 2c8:	81 2c       	mov	r8, r1
 2ca:	91 2c       	mov	r9, r1
 2cc:	54 01       	movw	r10, r8
	i2cStop();
	return zh;
}

void calibratie() {
	int32_t xTotaal = 0;
 2ce:	41 2c       	mov	r4, r1
 2d0:	51 2c       	mov	r5, r1
 2d2:	32 01       	movw	r6, r4
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 2d4:	4a c0       	rjmp	.+148    	; 0x36a <calibratie+0xd8>
		// readGyroVars
		setRegister(OUT_X_L_M);
 2d6:	88 e0       	ldi	r24, 0x08	; 8
 2d8:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t XL = readXL();
 2dc:	0e 94 f5 00 	call	0x1ea	; 0x1ea <readXL>
 2e0:	18 2f       	mov	r17, r24
		setRegister(OUT_X_H_M);
 2e2:	89 e0       	ldi	r24, 0x09	; 9
 2e4:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t XH = readXH();
 2e8:	0e 94 03 01 	call	0x206	; 0x206 <readXH>
		uint16_t X = (XH << 8 | XL);
 2ec:	28 2f       	mov	r18, r24
 2ee:	30 e0       	ldi	r19, 0x00	; 0
 2f0:	92 2f       	mov	r25, r18
 2f2:	88 27       	eor	r24, r24
 2f4:	81 2b       	or	r24, r17
 2f6:	9b 83       	std	Y+3, r25	; 0x03
 2f8:	8a 83       	std	Y+2, r24	; 0x02

		setRegister(OUT_Y_L_M);
 2fa:	8a e0       	ldi	r24, 0x0A	; 10
 2fc:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t YL = readYL();
 300:	0e 94 11 01 	call	0x222	; 0x222 <readYL>
 304:	18 2f       	mov	r17, r24
		setRegister(OUT_Y_H_M);
 306:	8b e0       	ldi	r24, 0x0B	; 11
 308:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t YH = readYH();
 30c:	0e 94 1f 01 	call	0x23e	; 0x23e <readYH>
		uint16_t Y = (YH << 8 | YL);
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	98 2f       	mov	r25, r24
 314:	88 27       	eor	r24, r24
 316:	fc 01       	movw	r30, r24
 318:	e1 2b       	or	r30, r17
 31a:	8f 01       	movw	r16, r30

		setRegister(OUT_Z_L_M);
 31c:	8c e0       	ldi	r24, 0x0C	; 12
 31e:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t ZL = readZL();
 322:	0e 94 2d 01 	call	0x25a	; 0x25a <readZL>
 326:	89 83       	std	Y+1, r24	; 0x01
		setRegister(OUT_Z_H_M);
 328:	8d e0       	ldi	r24, 0x0D	; 13
 32a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
		uint8_t ZH = readZH();
 32e:	0e 94 3b 01 	call	0x276	; 0x276 <readZH>
		uint16_t Z = (ZH << 8 | ZL);
 332:	90 e0       	ldi	r25, 0x00	; 0
 334:	98 2f       	mov	r25, r24
 336:	88 27       	eor	r24, r24
 338:	f9 81       	ldd	r31, Y+1	; 0x01
 33a:	8f 2b       	or	r24, r31
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 33c:	ef e3       	ldi	r30, 0x3F	; 63
 33e:	ff e1       	ldi	r31, 0x1F	; 31
 340:	31 97       	sbiw	r30, 0x01	; 1
 342:	f1 f7       	brne	.-4      	; 0x340 <calibratie+0xae>
 344:	00 c0       	rjmp	.+0      	; 0x346 <calibratie+0xb4>
 346:	00 00       	nop

		_delay_ms(2);
		xTotaal = xTotaal + X;
 348:	2a 81       	ldd	r18, Y+2	; 0x02
 34a:	3b 81       	ldd	r19, Y+3	; 0x03
 34c:	42 0e       	add	r4, r18
 34e:	53 1e       	adc	r5, r19
 350:	61 1c       	adc	r6, r1
 352:	71 1c       	adc	r7, r1
		yTotaal = yTotaal + Y;
 354:	80 0e       	add	r8, r16
 356:	91 1e       	adc	r9, r17
 358:	a1 1c       	adc	r10, r1
 35a:	b1 1c       	adc	r11, r1
		zTotaal = zTotaal + Z;
 35c:	c8 0e       	add	r12, r24
 35e:	d9 1e       	adc	r13, r25
 360:	e1 1c       	adc	r14, r1
 362:	f1 1c       	adc	r15, r1
void calibratie() {
	int32_t xTotaal = 0;
	int32_t yTotaal = 0;
	int32_t zTotaal = 0;

	for(int i = 0; i < 1024; i++){
 364:	3f ef       	ldi	r19, 0xFF	; 255
 366:	23 1a       	sub	r2, r19
 368:	33 0a       	sbc	r3, r19
 36a:	21 14       	cp	r2, r1
 36c:	84 e0       	ldi	r24, 0x04	; 4
 36e:	38 06       	cpc	r3, r24
 370:	0c f4       	brge	.+2      	; 0x374 <calibratie+0xe2>
 372:	b1 cf       	rjmp	.-158    	; 0x2d6 <calibratie+0x44>
		_delay_ms(2);
		xTotaal = xTotaal + X;
		yTotaal = yTotaal + Y;
		zTotaal = zTotaal + Z;
	}
	xOff = xTotaal / 1024;
 374:	d3 01       	movw	r26, r6
 376:	c2 01       	movw	r24, r4
 378:	77 20       	and	r7, r7
 37a:	24 f4       	brge	.+8      	; 0x384 <calibratie+0xf2>
 37c:	81 50       	subi	r24, 0x01	; 1
 37e:	9c 4f       	sbci	r25, 0xFC	; 252
 380:	af 4f       	sbci	r26, 0xFF	; 255
 382:	bf 4f       	sbci	r27, 0xFF	; 255
 384:	07 2e       	mov	r0, r23
 386:	7a e0       	ldi	r23, 0x0A	; 10
 388:	b5 95       	asr	r27
 38a:	a7 95       	ror	r26
 38c:	97 95       	ror	r25
 38e:	87 95       	ror	r24
 390:	7a 95       	dec	r23
 392:	d1 f7       	brne	.-12     	; 0x388 <calibratie+0xf6>
 394:	70 2d       	mov	r23, r0
 396:	90 93 5f 01 	sts	0x015F, r25	; 0x80015f <xOff+0x1>
 39a:	80 93 5e 01 	sts	0x015E, r24	; 0x80015e <xOff>
	yOff = yTotaal / 1024;
 39e:	d5 01       	movw	r26, r10
 3a0:	c4 01       	movw	r24, r8
 3a2:	bb 20       	and	r11, r11
 3a4:	24 f4       	brge	.+8      	; 0x3ae <calibratie+0x11c>
 3a6:	81 50       	subi	r24, 0x01	; 1
 3a8:	9c 4f       	sbci	r25, 0xFC	; 252
 3aa:	af 4f       	sbci	r26, 0xFF	; 255
 3ac:	bf 4f       	sbci	r27, 0xFF	; 255
 3ae:	07 2e       	mov	r0, r23
 3b0:	7a e0       	ldi	r23, 0x0A	; 10
 3b2:	b5 95       	asr	r27
 3b4:	a7 95       	ror	r26
 3b6:	97 95       	ror	r25
 3b8:	87 95       	ror	r24
 3ba:	7a 95       	dec	r23
 3bc:	d1 f7       	brne	.-12     	; 0x3b2 <calibratie+0x120>
 3be:	70 2d       	mov	r23, r0
 3c0:	90 93 5d 01 	sts	0x015D, r25	; 0x80015d <yOff+0x1>
 3c4:	80 93 5c 01 	sts	0x015C, r24	; 0x80015c <yOff>
	zOff = zTotaal / 1024;
 3c8:	d7 01       	movw	r26, r14
 3ca:	c6 01       	movw	r24, r12
 3cc:	ff 20       	and	r15, r15
 3ce:	24 f4       	brge	.+8      	; 0x3d8 <calibratie+0x146>
 3d0:	81 50       	subi	r24, 0x01	; 1
 3d2:	9c 4f       	sbci	r25, 0xFC	; 252
 3d4:	af 4f       	sbci	r26, 0xFF	; 255
 3d6:	bf 4f       	sbci	r27, 0xFF	; 255
 3d8:	07 2e       	mov	r0, r23
 3da:	7a e0       	ldi	r23, 0x0A	; 10
 3dc:	b5 95       	asr	r27
 3de:	a7 95       	ror	r26
 3e0:	97 95       	ror	r25
 3e2:	87 95       	ror	r24
 3e4:	7a 95       	dec	r23
 3e6:	d1 f7       	brne	.-12     	; 0x3dc <calibratie+0x14a>
 3e8:	70 2d       	mov	r23, r0
 3ea:	90 93 5b 01 	sts	0x015B, r25	; 0x80015b <__data_end+0x1>
 3ee:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <__data_end>
}
 3f2:	0f 90       	pop	r0
 3f4:	0f 90       	pop	r0
 3f6:	0f 90       	pop	r0
 3f8:	df 91       	pop	r29
 3fa:	cf 91       	pop	r28
 3fc:	1f 91       	pop	r17
 3fe:	0f 91       	pop	r16
 400:	ff 90       	pop	r15
 402:	ef 90       	pop	r14
 404:	df 90       	pop	r13
 406:	cf 90       	pop	r12
 408:	bf 90       	pop	r11
 40a:	af 90       	pop	r10
 40c:	9f 90       	pop	r9
 40e:	8f 90       	pop	r8
 410:	7f 90       	pop	r7
 412:	6f 90       	pop	r6
 414:	5f 90       	pop	r5
 416:	4f 90       	pop	r4
 418:	3f 90       	pop	r3
 41a:	2f 90       	pop	r2
 41c:	08 95       	ret

0000041e <magnetoMeter>:

void magnetoMeter() {
	/*---------- Enable magnetometer --------*/
	// 0x64 = 0b01100100
	i2cStart();									// Begin Transmission
 41e:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 422:	8a e3       	ldi	r24, 0x3A	; 58
 424:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL5);								// Access register CTRL5
 428:	84 e2       	ldi	r24, 0x24	; 36
 42a:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x64);								// Master stuurt deze waarde naar het CTRL1 register
 42e:	84 e6       	ldi	r24, 0x64	; 100
 430:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 434:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>

	// 0x20
	i2cStart();									// Begin Transmission
 438:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 43c:	8a e3       	ldi	r24, 0x3A	; 58
 43e:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL6);								// Access register CTRL6
 442:	85 e2       	ldi	r24, 0x25	; 37
 444:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x20);								// Master stuurt deze waarde naar het CTRL1 register
 448:	80 e2       	ldi	r24, 0x20	; 32
 44a:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 44e:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>

	// 0x00
	i2cStart();									// Begin Transmission
 452:	0e 94 c9 00 	call	0x192	; 0x192 <i2cStart>
	i2cSend(LSM303DAdresWrite);					// Master in Transmit mode
 456:	8a e3       	ldi	r24, 0x3A	; 58
 458:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(CTRL7);								// Access register CTRL7
 45c:	86 e2       	ldi	r24, 0x26	; 38
 45e:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cSend(0x00);								// Master stuurt deze waarde naar het CTRL1 register
 462:	80 e0       	ldi	r24, 0x00	; 0
 464:	0e 94 df 00 	call	0x1be	; 0x1be <i2cSend>
	i2cStop();									// Stop transmission
 468:	0e 94 cf 00 	call	0x19e	; 0x19e <i2cStop>
	calibratie();
 46c:	0e 94 49 01 	call	0x292	; 0x292 <calibratie>
 470:	08 95       	ret

00000472 <initUsart1>:
 472:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 476:	88 e9       	ldi	r24, 0x98	; 152
 478:	80 93 c9 00 	sts	0x00C9, r24	; 0x8000c9 <__TEXT_REGION_LENGTH__+0x7f80c9>
 47c:	86 e0       	ldi	r24, 0x06	; 6
 47e:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <__TEXT_REGION_LENGTH__+0x7f80ca>
 482:	10 92 cd 00 	sts	0x00CD, r1	; 0x8000cd <__TEXT_REGION_LENGTH__+0x7f80cd>
 486:	87 e6       	ldi	r24, 0x67	; 103
 488:	80 93 cc 00 	sts	0x00CC, r24	; 0x8000cc <__TEXT_REGION_LENGTH__+0x7f80cc>
 48c:	08 95       	ret

0000048e <writeChar>:
 48e:	90 91 c8 00 	lds	r25, 0x00C8	; 0x8000c8 <__TEXT_REGION_LENGTH__+0x7f80c8>
 492:	95 ff       	sbrs	r25, 5
 494:	fc cf       	rjmp	.-8      	; 0x48e <writeChar>
 496:	80 93 ce 00 	sts	0x00CE, r24	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 49a:	08 95       	ret

0000049c <writeString>:
 49c:	0f 93       	push	r16
 49e:	1f 93       	push	r17
 4a0:	cf 93       	push	r28
 4a2:	8c 01       	movw	r16, r24
 4a4:	c0 e0       	ldi	r28, 0x00	; 0
 4a6:	03 c0       	rjmp	.+6      	; 0x4ae <writeString+0x12>
 4a8:	0e 94 47 02 	call	0x48e	; 0x48e <writeChar>
 4ac:	cf 5f       	subi	r28, 0xFF	; 255
 4ae:	f8 01       	movw	r30, r16
 4b0:	ec 0f       	add	r30, r28
 4b2:	f1 1d       	adc	r31, r1
 4b4:	80 81       	ld	r24, Z
 4b6:	81 11       	cpse	r24, r1
 4b8:	f7 cf       	rjmp	.-18     	; 0x4a8 <writeString+0xc>
 4ba:	cf 91       	pop	r28
 4bc:	1f 91       	pop	r17
 4be:	0f 91       	pop	r16
 4c0:	08 95       	ret

000004c2 <writeInt>:
 4c2:	cf 93       	push	r28
 4c4:	df 93       	push	r29
 4c6:	cd b7       	in	r28, 0x3d	; 61
 4c8:	de b7       	in	r29, 0x3e	; 62
 4ca:	28 97       	sbiw	r28, 0x08	; 8
 4cc:	0f b6       	in	r0, 0x3f	; 63
 4ce:	f8 94       	cli
 4d0:	de bf       	out	0x3e, r29	; 62
 4d2:	0f be       	out	0x3f, r0	; 63
 4d4:	cd bf       	out	0x3d, r28	; 61
    } else if (__radix < 2 || __radix > 36) {
	*__s = 0;
	return __s;
    } else {
	extern char *__itoa_ncheck (int, char *, unsigned char);
	return __itoa_ncheck (__val, __s, __radix);
 4d6:	4a e0       	ldi	r20, 0x0A	; 10
 4d8:	be 01       	movw	r22, r28
 4da:	6f 5f       	subi	r22, 0xFF	; 255
 4dc:	7f 4f       	sbci	r23, 0xFF	; 255
 4de:	0e 94 a3 06 	call	0xd46	; 0xd46 <__itoa_ncheck>
 4e2:	ce 01       	movw	r24, r28
 4e4:	01 96       	adiw	r24, 0x01	; 1
 4e6:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
 4ea:	28 96       	adiw	r28, 0x08	; 8
 4ec:	0f b6       	in	r0, 0x3f	; 63
 4ee:	f8 94       	cli
 4f0:	de bf       	out	0x3e, r29	; 62
 4f2:	0f be       	out	0x3f, r0	; 63
 4f4:	cd bf       	out	0x3d, r28	; 61
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	08 95       	ret

000004fc <writeUnt>:
 4fc:	0e 94 61 02 	call	0x4c2	; 0x4c2 <writeInt>
 500:	08 95       	ret

00000502 <__vector_25>:
static volatile uint16_t ticksLeft;
static volatile uint16_t ticksRight;
static volatile float ticksTotal;
static volatile float distance;

ISR(USART1_RX_vect) {							// When you receive data, calls the ISR
 502:	1f 92       	push	r1
 504:	0f 92       	push	r0
 506:	0f b6       	in	r0, 0x3f	; 63
 508:	0f 92       	push	r0
 50a:	11 24       	eor	r1, r1
 50c:	2f 93       	push	r18
 50e:	3f 93       	push	r19
 510:	4f 93       	push	r20
 512:	5f 93       	push	r21
 514:	6f 93       	push	r22
 516:	7f 93       	push	r23
 518:	8f 93       	push	r24
 51a:	9f 93       	push	r25
 51c:	af 93       	push	r26
 51e:	bf 93       	push	r27
 520:	ef 93       	push	r30
 522:	ff 93       	push	r31
	receivedData = UDR1;						// Read the incoming byte (data from the keyboard)
 524:	80 91 ce 00 	lds	r24, 0x00CE	; 0x8000ce <__TEXT_REGION_LENGTH__+0x7f80ce>
 528:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
	direction(receivedData);					// Send the receivedData as parameter to the function direction
 52c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 530:	0e 94 39 04 	call	0x872	; 0x872 <direction>
}
 534:	ff 91       	pop	r31
 536:	ef 91       	pop	r30
 538:	bf 91       	pop	r27
 53a:	af 91       	pop	r26
 53c:	9f 91       	pop	r25
 53e:	8f 91       	pop	r24
 540:	7f 91       	pop	r23
 542:	6f 91       	pop	r22
 544:	5f 91       	pop	r21
 546:	4f 91       	pop	r20
 548:	3f 91       	pop	r19
 54a:	2f 91       	pop	r18
 54c:	0f 90       	pop	r0
 54e:	0f be       	out	0x3f, r0	; 63
 550:	0f 90       	pop	r0
 552:	1f 90       	pop	r1
 554:	18 95       	reti

00000556 <__vector_7>:

// Right
ISR(INT6_vect) {								// Enable interrupt on PE6 for the right encoder
 556:	1f 92       	push	r1
 558:	0f 92       	push	r0
 55a:	0f b6       	in	r0, 0x3f	; 63
 55c:	0f 92       	push	r0
 55e:	11 24       	eor	r1, r1
 560:	8f 93       	push	r24
 562:	9f 93       	push	r25
	uint8_t rightEncoderTicks;
	rightEncoderTicks = PORTE & (1<<PORTE6);

	if(rightEncoderTicks) {
 564:	76 9b       	sbis	0x0e, 6	; 14
 566:	09 c0       	rjmp	.+18     	; 0x57a <__vector_7+0x24>
		ticksRight++;
 568:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 56c:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 570:	01 96       	adiw	r24, 0x01	; 1
 572:	90 93 69 01 	sts	0x0169, r25	; 0x800169 <ticksRight+0x1>
 576:	80 93 68 01 	sts	0x0168, r24	; 0x800168 <ticksRight>
	}
}
 57a:	9f 91       	pop	r25
 57c:	8f 91       	pop	r24
 57e:	0f 90       	pop	r0
 580:	0f be       	out	0x3f, r0	; 63
 582:	0f 90       	pop	r0
 584:	1f 90       	pop	r1
 586:	18 95       	reti

00000588 <__vector_9>:

// Left
ISR(PCINT0_vect) {								// Enable interrupt on PB4 for the left encoder
 588:	1f 92       	push	r1
 58a:	0f 92       	push	r0
 58c:	0f b6       	in	r0, 0x3f	; 63
 58e:	0f 92       	push	r0
 590:	11 24       	eor	r1, r1
 592:	8f 93       	push	r24
 594:	9f 93       	push	r25
	uint8_t leftEncoderTicks;
	leftEncoderTicks = PINB & (1<<PINB4);

	if(leftEncoderTicks) {
 596:	1c 9b       	sbis	0x03, 4	; 3
 598:	09 c0       	rjmp	.+18     	; 0x5ac <__vector_9+0x24>
		ticksLeft++;
 59a:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <ticksLeft>
 59e:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <ticksLeft+0x1>
 5a2:	01 96       	adiw	r24, 0x01	; 1
 5a4:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <ticksLeft+0x1>
 5a8:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <ticksLeft>
	}
}
 5ac:	9f 91       	pop	r25
 5ae:	8f 91       	pop	r24
 5b0:	0f 90       	pop	r0
 5b2:	0f be       	out	0x3f, r0	; 63
 5b4:	0f 90       	pop	r0
 5b6:	1f 90       	pop	r1
 5b8:	18 95       	reti

000005ba <computeDistance>:
		printFunction();
	}
}

void computeDistance() {
	ticksTotal = ticksLeft+ticksRight;		// Add the ticks of the left and right encoder
 5ba:	60 91 6a 01 	lds	r22, 0x016A	; 0x80016a <ticksLeft>
 5be:	70 91 6b 01 	lds	r23, 0x016B	; 0x80016b <ticksLeft+0x1>
 5c2:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 5c6:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 5ca:	68 0f       	add	r22, r24
 5cc:	79 1f       	adc	r23, r25
 5ce:	80 e0       	ldi	r24, 0x00	; 0
 5d0:	90 e0       	ldi	r25, 0x00	; 0
 5d2:	0e 94 a8 05 	call	0xb50	; 0xb50 <__floatunsisf>
 5d6:	60 93 64 01 	sts	0x0164, r22	; 0x800164 <ticksTotal>
 5da:	70 93 65 01 	sts	0x0165, r23	; 0x800165 <ticksTotal+0x1>
 5de:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <ticksTotal+0x2>
 5e2:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <ticksTotal+0x3>
	distance = (ticksTotal/1204.44)*12.2522113490;	// (ticks/cpr)*(pi*diameter), pi*3.9cm = 12.2522113490, 100.37 x 12 = 1204.44 CPR (counts per revolution)
 5e6:	60 91 64 01 	lds	r22, 0x0164	; 0x800164 <ticksTotal>
 5ea:	70 91 65 01 	lds	r23, 0x0165	; 0x800165 <ticksTotal+0x1>
 5ee:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <ticksTotal+0x2>
 5f2:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <ticksTotal+0x3>
 5f6:	24 e1       	ldi	r18, 0x14	; 20
 5f8:	3e e8       	ldi	r19, 0x8E	; 142
 5fa:	46 e9       	ldi	r20, 0x96	; 150
 5fc:	54 e4       	ldi	r21, 0x44	; 68
 5fe:	0e 94 00 05 	call	0xa00	; 0xa00 <__divsf3>
 602:	2f e0       	ldi	r18, 0x0F	; 15
 604:	39 e0       	ldi	r19, 0x09	; 9
 606:	44 e4       	ldi	r20, 0x44	; 68
 608:	51 e4       	ldi	r21, 0x41	; 65
 60a:	0e 94 36 06 	call	0xc6c	; 0xc6c <__mulsf3>
 60e:	60 93 60 01 	sts	0x0160, r22	; 0x800160 <distance>
 612:	70 93 61 01 	sts	0x0161, r23	; 0x800161 <distance+0x1>
 616:	80 93 62 01 	sts	0x0162, r24	; 0x800162 <distance+0x2>
 61a:	90 93 63 01 	sts	0x0163, r25	; 0x800163 <distance+0x3>
 61e:	08 95       	ret

00000620 <blinkYellowLed>:
}

void blinkYellowLed() {						// User Story 1
	// Show data every second, and blink every second
	zetGeleLedAan();
 620:	0e 94 b0 00 	call	0x160	; 0x160 <zetGeleLedAan>
 624:	2f ef       	ldi	r18, 0xFF	; 255
 626:	83 ed       	ldi	r24, 0xD3	; 211
 628:	90 e3       	ldi	r25, 0x30	; 48
 62a:	21 50       	subi	r18, 0x01	; 1
 62c:	80 40       	sbci	r24, 0x00	; 0
 62e:	90 40       	sbci	r25, 0x00	; 0
 630:	e1 f7       	brne	.-8      	; 0x62a <blinkYellowLed+0xa>
 632:	00 c0       	rjmp	.+0      	; 0x634 <blinkYellowLed+0x14>
 634:	00 00       	nop
	_delay_ms(1000);
	zetGeleLedUit();
 636:	0e 94 b4 00 	call	0x168	; 0x168 <zetGeleLedUit>
 63a:	08 95       	ret

0000063c <printFunction>:
}

void printFunction() {
 63c:	1f 93       	push	r17
 63e:	cf 93       	push	r28
 640:	df 93       	push	r29
	writeString("Direction: ");
 642:	89 e0       	ldi	r24, 0x09	; 9
 644:	91 e0       	ldi	r25, 0x01	; 1
 646:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeChar(receivedData);				// Show received input from pc
 64a:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__DATA_REGION_ORIGIN__>
 64e:	0e 94 47 02 	call	0x48e	; 0x48e <writeChar>
	writeString("\r\n");
 652:	85 e1       	ldi	r24, 0x15	; 21
 654:	91 e0       	ldi	r25, 0x01	; 1
 656:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	writeString("ticksLeft: ");
 65a:	88 e1       	ldi	r24, 0x18	; 24
 65c:	91 e0       	ldi	r25, 0x01	; 1
 65e:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeInt(ticksLeft);
 662:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <ticksLeft>
 666:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <ticksLeft+0x1>
 66a:	0e 94 61 02 	call	0x4c2	; 0x4c2 <writeInt>
	writeString("\n\r");
 66e:	84 e2       	ldi	r24, 0x24	; 36
 670:	91 e0       	ldi	r25, 0x01	; 1
 672:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	writeString("ticksRight: ");
 676:	87 e2       	ldi	r24, 0x27	; 39
 678:	91 e0       	ldi	r25, 0x01	; 1
 67a:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeInt(ticksRight);
 67e:	80 91 68 01 	lds	r24, 0x0168	; 0x800168 <ticksRight>
 682:	90 91 69 01 	lds	r25, 0x0169	; 0x800169 <ticksRight+0x1>
 686:	0e 94 61 02 	call	0x4c2	; 0x4c2 <writeInt>
	writeString("\n\r");
 68a:	84 e2       	ldi	r24, 0x24	; 36
 68c:	91 e0       	ldi	r25, 0x01	; 1
 68e:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	writeString("Distance: ");
 692:	84 e3       	ldi	r24, 0x34	; 52
 694:	91 e0       	ldi	r25, 0x01	; 1
 696:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeInt(distance);						// Show the distance
 69a:	60 91 60 01 	lds	r22, 0x0160	; 0x800160 <distance>
 69e:	70 91 61 01 	lds	r23, 0x0161	; 0x800161 <distance+0x1>
 6a2:	80 91 62 01 	lds	r24, 0x0162	; 0x800162 <distance+0x2>
 6a6:	90 91 63 01 	lds	r25, 0x0163	; 0x800163 <distance+0x3>
 6aa:	0e 94 72 05 	call	0xae4	; 0xae4 <__fixsfsi>
 6ae:	cb 01       	movw	r24, r22
 6b0:	0e 94 61 02 	call	0x4c2	; 0x4c2 <writeInt>
	writeString("\r\n");
 6b4:	85 e1       	ldi	r24, 0x15	; 21
 6b6:	91 e0       	ldi	r25, 0x01	; 1
 6b8:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	/*---------- I2C ----------*/
	writeString("Richting is: ");
 6bc:	8f e3       	ldi	r24, 0x3F	; 63
 6be:	91 e0       	ldi	r25, 0x01	; 1
 6c0:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	
	setRegister(OUT_X_L);
 6c4:	88 e2       	ldi	r24, 0x28	; 40
 6c6:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t XL = readXL();
 6ca:	0e 94 f5 00 	call	0x1ea	; 0x1ea <readXL>
 6ce:	18 2f       	mov	r17, r24
	setRegister(OUT_X_H);
 6d0:	89 e2       	ldi	r24, 0x29	; 41
 6d2:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t XH = readXH();
 6d6:	0e 94 03 01 	call	0x206	; 0x206 <readXH>
	uint16_t X = (XH << 8 | XL);
 6da:	c8 2f       	mov	r28, r24
 6dc:	d0 e0       	ldi	r29, 0x00	; 0
 6de:	dc 2f       	mov	r29, r28
 6e0:	cc 27       	eor	r28, r28
 6e2:	c1 2b       	or	r28, r17
	X = X - xOff;							// Lees X waarde af met X - average waarde
 6e4:	80 91 70 01 	lds	r24, 0x0170	; 0x800170 <xOff>
 6e8:	90 91 71 01 	lds	r25, 0x0171	; 0x800171 <xOff+0x1>
 6ec:	c8 1b       	sub	r28, r24
 6ee:	d9 0b       	sbc	r29, r25

	writeString("X: ");
 6f0:	8d e4       	ldi	r24, 0x4D	; 77
 6f2:	91 e0       	ldi	r25, 0x01	; 1
 6f4:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeUnt(X);
 6f8:	ce 01       	movw	r24, r28
 6fa:	0e 94 7e 02 	call	0x4fc	; 0x4fc <writeUnt>
	writeString(" ");
 6fe:	8f e4       	ldi	r24, 0x4F	; 79
 700:	91 e0       	ldi	r25, 0x01	; 1
 702:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	setRegister(OUT_Y_L);
 706:	8a e2       	ldi	r24, 0x2A	; 42
 708:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t YL = readYL();
 70c:	0e 94 11 01 	call	0x222	; 0x222 <readYL>
 710:	18 2f       	mov	r17, r24
	setRegister(OUT_Y_H);
 712:	8b e2       	ldi	r24, 0x2B	; 43
 714:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t YH = readYH();
 718:	0e 94 1f 01 	call	0x23e	; 0x23e <readYH>
	uint16_t Y = (YH << 8 | YL);
 71c:	c8 2f       	mov	r28, r24
 71e:	d0 e0       	ldi	r29, 0x00	; 0
 720:	dc 2f       	mov	r29, r28
 722:	cc 27       	eor	r28, r28
 724:	c1 2b       	or	r28, r17
	Y = Y - yOff;							// Lees y waarde af met y - average waarde
 726:	80 91 6e 01 	lds	r24, 0x016E	; 0x80016e <yOff>
 72a:	90 91 6f 01 	lds	r25, 0x016F	; 0x80016f <yOff+0x1>
 72e:	c8 1b       	sub	r28, r24
 730:	d9 0b       	sbc	r29, r25

	writeString("Y: ");
 732:	81 e5       	ldi	r24, 0x51	; 81
 734:	91 e0       	ldi	r25, 0x01	; 1
 736:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeUnt(Y);
 73a:	ce 01       	movw	r24, r28
 73c:	0e 94 7e 02 	call	0x4fc	; 0x4fc <writeUnt>
	writeString(" ");
 740:	8f e4       	ldi	r24, 0x4F	; 79
 742:	91 e0       	ldi	r25, 0x01	; 1
 744:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>

	setRegister(OUT_Z_L);
 748:	8c e2       	ldi	r24, 0x2C	; 44
 74a:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t ZL = readZL();
 74e:	0e 94 2d 01 	call	0x25a	; 0x25a <readZL>
 752:	18 2f       	mov	r17, r24
	setRegister(OUT_Z_H);
 754:	8d e2       	ldi	r24, 0x2D	; 45
 756:	0e 94 e7 00 	call	0x1ce	; 0x1ce <setRegister>
	uint8_t ZH = readZH();
 75a:	0e 94 3b 01 	call	0x276	; 0x276 <readZH>
	uint16_t Z = (ZH << 8 | ZL);
 75e:	c8 2f       	mov	r28, r24
 760:	d0 e0       	ldi	r29, 0x00	; 0
 762:	dc 2f       	mov	r29, r28
 764:	cc 27       	eor	r28, r28
 766:	c1 2b       	or	r28, r17
	Z = Z - zOff;							// Lees z waarde af met z - average waarde
 768:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <zOff>
 76c:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <zOff+0x1>
 770:	c8 1b       	sub	r28, r24
 772:	d9 0b       	sbc	r29, r25

	writeString("Z: ");
 774:	85 e5       	ldi	r24, 0x55	; 85
 776:	91 e0       	ldi	r25, 0x01	; 1
 778:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeUnt(Z);
 77c:	ce 01       	movw	r24, r28
 77e:	0e 94 7e 02 	call	0x4fc	; 0x4fc <writeUnt>
	writeString("\n\r");
 782:	84 e2       	ldi	r24, 0x24	; 36
 784:	91 e0       	ldi	r25, 0x01	; 1
 786:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
	writeString("\n\r");
 78a:	84 e2       	ldi	r24, 0x24	; 36
 78c:	91 e0       	ldi	r25, 0x01	; 1
 78e:	0e 94 4e 02 	call	0x49c	; 0x49c <writeString>
 792:	df 91       	pop	r29
 794:	cf 91       	pop	r28
 796:	1f 91       	pop	r17
 798:	08 95       	ret

0000079a <main>:
		ticksLeft++;
	}
}

int main(void) {
	initUsart1();								// Initialization for the registers
 79a:	0e 94 39 02 	call	0x472	; 0x472 <initUsart1>
	initPWM();
 79e:	0e 94 df 03 	call	0x7be	; 0x7be <initPWM>
	initEncoders();
 7a2:	0e 94 8f 00 	call	0x11e	; 0x11e <initEncoders>
	initI2C();
 7a6:	0e 94 b8 00 	call	0x170	; 0x170 <initI2C>
	magnetoMeter();
 7aa:	0e 94 0f 02 	call	0x41e	; 0x41e <magnetoMeter>
	
	sei();										// The sei() function converts the I bit in the SREG of the microcontroller set leaving the microcontroller oninterrupts can respond
 7ae:	78 94       	sei

	while(1) {
		computeDistance();
 7b0:	0e 94 dd 02 	call	0x5ba	; 0x5ba <computeDistance>
		blinkYellowLed();
 7b4:	0e 94 10 03 	call	0x620	; 0x620 <blinkYellowLed>
		printFunction();
 7b8:	0e 94 1e 03 	call	0x63c	; 0x63c <printFunction>
 7bc:	f9 cf       	rjmp	.-14     	; 0x7b0 <main+0x16>

000007be <initPWM>:
 7be:	80 ea       	ldi	r24, 0xA0	; 160
 7c0:	80 93 80 00 	sts	0x0080, r24	; 0x800080 <__TEXT_REGION_LENGTH__+0x7f8080>
 7c4:	81 e1       	ldi	r24, 0x11	; 17
 7c6:	80 93 81 00 	sts	0x0081, r24	; 0x800081 <__TEXT_REGION_LENGTH__+0x7f8081>
 7ca:	80 e9       	ldi	r24, 0x90	; 144
 7cc:	91 e0       	ldi	r25, 0x01	; 1
 7ce:	90 93 87 00 	sts	0x0087, r25	; 0x800087 <__TEXT_REGION_LENGTH__+0x7f8087>
 7d2:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__TEXT_REGION_LENGTH__+0x7f8086>
 7d6:	10 92 89 00 	sts	0x0089, r1	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 7da:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 7de:	10 92 8b 00 	sts	0x008B, r1	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 7e2:	10 92 8a 00 	sts	0x008A, r1	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 7e6:	84 b1       	in	r24, 0x04	; 4
 7e8:	86 66       	ori	r24, 0x66	; 102
 7ea:	84 b9       	out	0x04, r24	; 4
 7ec:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SPEED2>
 7f0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SPEED2+0x1>
 7f4:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 7f8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 7fc:	08 95       	ret

000007fe <forward>:
 7fe:	20 e6       	ldi	r18, 0x60	; 96
 800:	25 b9       	out	0x05, r18	; 5
 802:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 806:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 80a:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 80e:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 812:	08 95       	ret

00000814 <turnRight>:
 814:	20 e4       	ldi	r18, 0x40	; 64
 816:	25 b9       	out	0x05, r18	; 5
 818:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 81c:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 820:	08 95       	ret

00000822 <turnLeft>:
 822:	20 e2       	ldi	r18, 0x20	; 32
 824:	25 b9       	out	0x05, r18	; 5
 826:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 82a:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 82e:	08 95       	ret

00000830 <backward>:
 830:	26 e6       	ldi	r18, 0x66	; 102
 832:	25 b9       	out	0x05, r18	; 5
 834:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 838:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 83c:	90 93 8b 00 	sts	0x008B, r25	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 840:	80 93 8a 00 	sts	0x008A, r24	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 844:	08 95       	ret

00000846 <turnLeftWideForward>:
 846:	20 e6       	ldi	r18, 0x60	; 96
 848:	25 b9       	out	0x05, r18	; 5
 84a:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 84e:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 852:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 856:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 85a:	08 95       	ret

0000085c <turnLeftWideBackward>:
 85c:	26 e6       	ldi	r18, 0x66	; 102
 85e:	25 b9       	out	0x05, r18	; 5
 860:	90 93 89 00 	sts	0x0089, r25	; 0x800089 <__TEXT_REGION_LENGTH__+0x7f8089>
 864:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <__TEXT_REGION_LENGTH__+0x7f8088>
 868:	70 93 8b 00 	sts	0x008B, r23	; 0x80008b <__TEXT_REGION_LENGTH__+0x7f808b>
 86c:	60 93 8a 00 	sts	0x008A, r22	; 0x80008a <__TEXT_REGION_LENGTH__+0x7f808a>
 870:	08 95       	ret

00000872 <direction>:
 872:	e8 2f       	mov	r30, r24
 874:	82 33       	cpi	r24, 0x32	; 50
 876:	91 f0       	breq	.+36     	; 0x89c <direction+0x2a>
 878:	18 f4       	brcc	.+6      	; 0x880 <direction+0xe>
 87a:	81 33       	cpi	r24, 0x31	; 49
 87c:	31 f0       	breq	.+12     	; 0x88a <direction+0x18>
 87e:	28 c0       	rjmp	.+80     	; 0x8d0 <direction+0x5e>
 880:	83 33       	cpi	r24, 0x33	; 51
 882:	a9 f0       	breq	.+42     	; 0x8ae <direction+0x3c>
 884:	84 33       	cpi	r24, 0x34	; 52
 886:	e1 f0       	breq	.+56     	; 0x8c0 <direction+0x4e>
 888:	23 c0       	rjmp	.+70     	; 0x8d0 <direction+0x5e>
 88a:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <SPEED1>
 88e:	90 91 08 01 	lds	r25, 0x0108	; 0x800108 <SPEED1+0x1>
 892:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 896:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 89a:	1a c0       	rjmp	.+52     	; 0x8d0 <direction+0x5e>
 89c:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <SPEED2>
 8a0:	90 91 06 01 	lds	r25, 0x0106	; 0x800106 <SPEED2+0x1>
 8a4:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 8a8:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 8ac:	11 c0       	rjmp	.+34     	; 0x8d0 <direction+0x5e>
 8ae:	80 91 03 01 	lds	r24, 0x0103	; 0x800103 <SPEED3>
 8b2:	90 91 04 01 	lds	r25, 0x0104	; 0x800104 <SPEED3+0x1>
 8b6:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 8ba:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 8be:	08 c0       	rjmp	.+16     	; 0x8d0 <direction+0x5e>
 8c0:	80 91 01 01 	lds	r24, 0x0101	; 0x800101 <SPEED4>
 8c4:	90 91 02 01 	lds	r25, 0x0102	; 0x800102 <SPEED4+0x1>
 8c8:	90 93 73 01 	sts	0x0173, r25	; 0x800173 <SET_SPEED+0x1>
 8cc:	80 93 72 01 	sts	0x0172, r24	; 0x800172 <SET_SPEED>
 8d0:	8e 2f       	mov	r24, r30
 8d2:	90 e0       	ldi	r25, 0x00	; 0
 8d4:	fc 01       	movw	r30, r24
 8d6:	e1 56       	subi	r30, 0x61	; 97
 8d8:	f1 09       	sbc	r31, r1
 8da:	ea 31       	cpi	r30, 0x1A	; 26
 8dc:	f1 05       	cpc	r31, r1
 8de:	08 f0       	brcs	.+2      	; 0x8e2 <direction+0x70>
 8e0:	70 c0       	rjmp	.+224    	; 0x9c2 <direction+0x150>
 8e2:	ea 5a       	subi	r30, 0xAA	; 170
 8e4:	ff 4f       	sbci	r31, 0xFF	; 255
 8e6:	0c 94 fa 04 	jmp	0x9f4	; 0x9f4 <__tablejump2__>
 8ea:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8ee:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 8f2:	0e 94 ff 03 	call	0x7fe	; 0x7fe <forward>
 8f6:	08 95       	ret
 8f8:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 8fc:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 900:	0e 94 18 04 	call	0x830	; 0x830 <backward>
 904:	08 95       	ret
 906:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 90a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 90e:	0e 94 11 04 	call	0x822	; 0x822 <turnLeft>
 912:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 916:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 91a:	0e 94 0a 04 	call	0x814	; 0x814 <turnRight>
 91e:	08 95       	ret
 920:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 924:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 928:	0e 94 11 04 	call	0x822	; 0x822 <turnLeft>
 92c:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 930:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 934:	0e 94 0a 04 	call	0x814	; 0x814 <turnRight>
 938:	08 95       	ret
 93a:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <SET_SPEED>
 93e:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <SET_SPEED+0x1>
 942:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 946:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 94a:	b9 01       	movw	r22, r18
 94c:	33 23       	and	r19, r19
 94e:	14 f4       	brge	.+4      	; 0x954 <direction+0xe2>
 950:	6f 5f       	subi	r22, 0xFF	; 255
 952:	7f 4f       	sbci	r23, 0xFF	; 255
 954:	75 95       	asr	r23
 956:	67 95       	ror	r22
 958:	0e 94 23 04 	call	0x846	; 0x846 <turnLeftWideForward>
 95c:	08 95       	ret
 95e:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <SET_SPEED>
 962:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <SET_SPEED+0x1>
 966:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 96a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 96e:	99 23       	and	r25, r25
 970:	0c f4       	brge	.+2      	; 0x974 <direction+0x102>
 972:	01 96       	adiw	r24, 0x01	; 1
 974:	95 95       	asr	r25
 976:	87 95       	ror	r24
 978:	0e 94 23 04 	call	0x846	; 0x846 <turnLeftWideForward>
 97c:	08 95       	ret
 97e:	20 91 72 01 	lds	r18, 0x0172	; 0x800172 <SET_SPEED>
 982:	30 91 73 01 	lds	r19, 0x0173	; 0x800173 <SET_SPEED+0x1>
 986:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 98a:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 98e:	b9 01       	movw	r22, r18
 990:	33 23       	and	r19, r19
 992:	14 f4       	brge	.+4      	; 0x998 <direction+0x126>
 994:	6f 5f       	subi	r22, 0xFF	; 255
 996:	7f 4f       	sbci	r23, 0xFF	; 255
 998:	75 95       	asr	r23
 99a:	67 95       	ror	r22
 99c:	0e 94 2e 04 	call	0x85c	; 0x85c <turnLeftWideBackward>
 9a0:	08 95       	ret
 9a2:	60 91 72 01 	lds	r22, 0x0172	; 0x800172 <SET_SPEED>
 9a6:	70 91 73 01 	lds	r23, 0x0173	; 0x800173 <SET_SPEED+0x1>
 9aa:	80 91 72 01 	lds	r24, 0x0172	; 0x800172 <SET_SPEED>
 9ae:	90 91 73 01 	lds	r25, 0x0173	; 0x800173 <SET_SPEED+0x1>
 9b2:	99 23       	and	r25, r25
 9b4:	0c f4       	brge	.+2      	; 0x9b8 <direction+0x146>
 9b6:	01 96       	adiw	r24, 0x01	; 1
 9b8:	95 95       	asr	r25
 9ba:	87 95       	ror	r24
 9bc:	0e 94 2e 04 	call	0x85c	; 0x85c <turnLeftWideBackward>
 9c0:	08 95       	ret
 9c2:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9c6:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9ca:	0e 94 ff 03 	call	0x7fe	; 0x7fe <forward>
 9ce:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9d2:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9d6:	0e 94 18 04 	call	0x830	; 0x830 <backward>
 9da:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9de:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9e2:	0e 94 11 04 	call	0x822	; 0x822 <turnLeft>
 9e6:	80 91 74 01 	lds	r24, 0x0174	; 0x800174 <SPEED0>
 9ea:	90 91 75 01 	lds	r25, 0x0175	; 0x800175 <SPEED0+0x1>
 9ee:	0e 94 0a 04 	call	0x814	; 0x814 <turnRight>
 9f2:	08 95       	ret

000009f4 <__tablejump2__>:
 9f4:	ee 0f       	add	r30, r30
 9f6:	ff 1f       	adc	r31, r31
 9f8:	05 90       	lpm	r0, Z+
 9fa:	f4 91       	lpm	r31, Z
 9fc:	e0 2d       	mov	r30, r0
 9fe:	09 94       	ijmp

00000a00 <__divsf3>:
 a00:	0e 94 14 05 	call	0xa28	; 0xa28 <__divsf3x>
 a04:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_round>
 a08:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_pscB>
 a0c:	58 f0       	brcs	.+22     	; 0xa24 <__divsf3+0x24>
 a0e:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscA>
 a12:	40 f0       	brcs	.+16     	; 0xa24 <__divsf3+0x24>
 a14:	29 f4       	brne	.+10     	; 0xa20 <__divsf3+0x20>
 a16:	5f 3f       	cpi	r21, 0xFF	; 255
 a18:	29 f0       	breq	.+10     	; 0xa24 <__divsf3+0x24>
 a1a:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_inf>
 a1e:	51 11       	cpse	r21, r1
 a20:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_szero>
 a24:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_nan>

00000a28 <__divsf3x>:
 a28:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_split3>
 a2c:	68 f3       	brcs	.-38     	; 0xa08 <__divsf3+0x8>

00000a2e <__divsf3_pse>:
 a2e:	99 23       	and	r25, r25
 a30:	b1 f3       	breq	.-20     	; 0xa1e <__divsf3+0x1e>
 a32:	55 23       	and	r21, r21
 a34:	91 f3       	breq	.-28     	; 0xa1a <__divsf3+0x1a>
 a36:	95 1b       	sub	r25, r21
 a38:	55 0b       	sbc	r21, r21
 a3a:	bb 27       	eor	r27, r27
 a3c:	aa 27       	eor	r26, r26
 a3e:	62 17       	cp	r22, r18
 a40:	73 07       	cpc	r23, r19
 a42:	84 07       	cpc	r24, r20
 a44:	38 f0       	brcs	.+14     	; 0xa54 <__divsf3_pse+0x26>
 a46:	9f 5f       	subi	r25, 0xFF	; 255
 a48:	5f 4f       	sbci	r21, 0xFF	; 255
 a4a:	22 0f       	add	r18, r18
 a4c:	33 1f       	adc	r19, r19
 a4e:	44 1f       	adc	r20, r20
 a50:	aa 1f       	adc	r26, r26
 a52:	a9 f3       	breq	.-22     	; 0xa3e <__divsf3_pse+0x10>
 a54:	35 d0       	rcall	.+106    	; 0xac0 <__divsf3_pse+0x92>
 a56:	0e 2e       	mov	r0, r30
 a58:	3a f0       	brmi	.+14     	; 0xa68 <__divsf3_pse+0x3a>
 a5a:	e0 e8       	ldi	r30, 0x80	; 128
 a5c:	32 d0       	rcall	.+100    	; 0xac2 <__divsf3_pse+0x94>
 a5e:	91 50       	subi	r25, 0x01	; 1
 a60:	50 40       	sbci	r21, 0x00	; 0
 a62:	e6 95       	lsr	r30
 a64:	00 1c       	adc	r0, r0
 a66:	ca f7       	brpl	.-14     	; 0xa5a <__divsf3_pse+0x2c>
 a68:	2b d0       	rcall	.+86     	; 0xac0 <__divsf3_pse+0x92>
 a6a:	fe 2f       	mov	r31, r30
 a6c:	29 d0       	rcall	.+82     	; 0xac0 <__divsf3_pse+0x92>
 a6e:	66 0f       	add	r22, r22
 a70:	77 1f       	adc	r23, r23
 a72:	88 1f       	adc	r24, r24
 a74:	bb 1f       	adc	r27, r27
 a76:	26 17       	cp	r18, r22
 a78:	37 07       	cpc	r19, r23
 a7a:	48 07       	cpc	r20, r24
 a7c:	ab 07       	cpc	r26, r27
 a7e:	b0 e8       	ldi	r27, 0x80	; 128
 a80:	09 f0       	breq	.+2      	; 0xa84 <__divsf3_pse+0x56>
 a82:	bb 0b       	sbc	r27, r27
 a84:	80 2d       	mov	r24, r0
 a86:	bf 01       	movw	r22, r30
 a88:	ff 27       	eor	r31, r31
 a8a:	93 58       	subi	r25, 0x83	; 131
 a8c:	5f 4f       	sbci	r21, 0xFF	; 255
 a8e:	3a f0       	brmi	.+14     	; 0xa9e <__divsf3_pse+0x70>
 a90:	9e 3f       	cpi	r25, 0xFE	; 254
 a92:	51 05       	cpc	r21, r1
 a94:	78 f0       	brcs	.+30     	; 0xab4 <__divsf3_pse+0x86>
 a96:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_inf>
 a9a:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_szero>
 a9e:	5f 3f       	cpi	r21, 0xFF	; 255
 aa0:	e4 f3       	brlt	.-8      	; 0xa9a <__divsf3_pse+0x6c>
 aa2:	98 3e       	cpi	r25, 0xE8	; 232
 aa4:	d4 f3       	brlt	.-12     	; 0xa9a <__divsf3_pse+0x6c>
 aa6:	86 95       	lsr	r24
 aa8:	77 95       	ror	r23
 aaa:	67 95       	ror	r22
 aac:	b7 95       	ror	r27
 aae:	f7 95       	ror	r31
 ab0:	9f 5f       	subi	r25, 0xFF	; 255
 ab2:	c9 f7       	brne	.-14     	; 0xaa6 <__divsf3_pse+0x78>
 ab4:	88 0f       	add	r24, r24
 ab6:	91 1d       	adc	r25, r1
 ab8:	96 95       	lsr	r25
 aba:	87 95       	ror	r24
 abc:	97 f9       	bld	r25, 7
 abe:	08 95       	ret
 ac0:	e1 e0       	ldi	r30, 0x01	; 1
 ac2:	66 0f       	add	r22, r22
 ac4:	77 1f       	adc	r23, r23
 ac6:	88 1f       	adc	r24, r24
 ac8:	bb 1f       	adc	r27, r27
 aca:	62 17       	cp	r22, r18
 acc:	73 07       	cpc	r23, r19
 ace:	84 07       	cpc	r24, r20
 ad0:	ba 07       	cpc	r27, r26
 ad2:	20 f0       	brcs	.+8      	; 0xadc <__divsf3_pse+0xae>
 ad4:	62 1b       	sub	r22, r18
 ad6:	73 0b       	sbc	r23, r19
 ad8:	84 0b       	sbc	r24, r20
 ada:	ba 0b       	sbc	r27, r26
 adc:	ee 1f       	adc	r30, r30
 ade:	88 f7       	brcc	.-30     	; 0xac2 <__divsf3_pse+0x94>
 ae0:	e0 95       	com	r30
 ae2:	08 95       	ret

00000ae4 <__fixsfsi>:
 ae4:	0e 94 79 05 	call	0xaf2	; 0xaf2 <__fixunssfsi>
 ae8:	68 94       	set
 aea:	b1 11       	cpse	r27, r1
 aec:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_szero>
 af0:	08 95       	ret

00000af2 <__fixunssfsi>:
 af2:	0e 94 15 06 	call	0xc2a	; 0xc2a <__fp_splitA>
 af6:	88 f0       	brcs	.+34     	; 0xb1a <__stack+0x1b>
 af8:	9f 57       	subi	r25, 0x7F	; 127
 afa:	98 f0       	brcs	.+38     	; 0xb22 <__stack+0x23>
 afc:	b9 2f       	mov	r27, r25
 afe:	99 27       	eor	r25, r25
 b00:	b7 51       	subi	r27, 0x17	; 23
 b02:	b0 f0       	brcs	.+44     	; 0xb30 <__stack+0x31>
 b04:	e1 f0       	breq	.+56     	; 0xb3e <__stack+0x3f>
 b06:	66 0f       	add	r22, r22
 b08:	77 1f       	adc	r23, r23
 b0a:	88 1f       	adc	r24, r24
 b0c:	99 1f       	adc	r25, r25
 b0e:	1a f0       	brmi	.+6      	; 0xb16 <__stack+0x17>
 b10:	ba 95       	dec	r27
 b12:	c9 f7       	brne	.-14     	; 0xb06 <__stack+0x7>
 b14:	14 c0       	rjmp	.+40     	; 0xb3e <__stack+0x3f>
 b16:	b1 30       	cpi	r27, 0x01	; 1
 b18:	91 f0       	breq	.+36     	; 0xb3e <__stack+0x3f>
 b1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <__fp_zero>
 b1e:	b1 e0       	ldi	r27, 0x01	; 1
 b20:	08 95       	ret
 b22:	0c 94 2f 06 	jmp	0xc5e	; 0xc5e <__fp_zero>
 b26:	67 2f       	mov	r22, r23
 b28:	78 2f       	mov	r23, r24
 b2a:	88 27       	eor	r24, r24
 b2c:	b8 5f       	subi	r27, 0xF8	; 248
 b2e:	39 f0       	breq	.+14     	; 0xb3e <__stack+0x3f>
 b30:	b9 3f       	cpi	r27, 0xF9	; 249
 b32:	cc f3       	brlt	.-14     	; 0xb26 <__stack+0x27>
 b34:	86 95       	lsr	r24
 b36:	77 95       	ror	r23
 b38:	67 95       	ror	r22
 b3a:	b3 95       	inc	r27
 b3c:	d9 f7       	brne	.-10     	; 0xb34 <__stack+0x35>
 b3e:	3e f4       	brtc	.+14     	; 0xb4e <__stack+0x4f>
 b40:	90 95       	com	r25
 b42:	80 95       	com	r24
 b44:	70 95       	com	r23
 b46:	61 95       	neg	r22
 b48:	7f 4f       	sbci	r23, 0xFF	; 255
 b4a:	8f 4f       	sbci	r24, 0xFF	; 255
 b4c:	9f 4f       	sbci	r25, 0xFF	; 255
 b4e:	08 95       	ret

00000b50 <__floatunsisf>:
 b50:	e8 94       	clt
 b52:	09 c0       	rjmp	.+18     	; 0xb66 <__floatsisf+0x12>

00000b54 <__floatsisf>:
 b54:	97 fb       	bst	r25, 7
 b56:	3e f4       	brtc	.+14     	; 0xb66 <__floatsisf+0x12>
 b58:	90 95       	com	r25
 b5a:	80 95       	com	r24
 b5c:	70 95       	com	r23
 b5e:	61 95       	neg	r22
 b60:	7f 4f       	sbci	r23, 0xFF	; 255
 b62:	8f 4f       	sbci	r24, 0xFF	; 255
 b64:	9f 4f       	sbci	r25, 0xFF	; 255
 b66:	99 23       	and	r25, r25
 b68:	a9 f0       	breq	.+42     	; 0xb94 <__floatsisf+0x40>
 b6a:	f9 2f       	mov	r31, r25
 b6c:	96 e9       	ldi	r25, 0x96	; 150
 b6e:	bb 27       	eor	r27, r27
 b70:	93 95       	inc	r25
 b72:	f6 95       	lsr	r31
 b74:	87 95       	ror	r24
 b76:	77 95       	ror	r23
 b78:	67 95       	ror	r22
 b7a:	b7 95       	ror	r27
 b7c:	f1 11       	cpse	r31, r1
 b7e:	f8 cf       	rjmp	.-16     	; 0xb70 <__floatsisf+0x1c>
 b80:	fa f4       	brpl	.+62     	; 0xbc0 <__floatsisf+0x6c>
 b82:	bb 0f       	add	r27, r27
 b84:	11 f4       	brne	.+4      	; 0xb8a <__floatsisf+0x36>
 b86:	60 ff       	sbrs	r22, 0
 b88:	1b c0       	rjmp	.+54     	; 0xbc0 <__floatsisf+0x6c>
 b8a:	6f 5f       	subi	r22, 0xFF	; 255
 b8c:	7f 4f       	sbci	r23, 0xFF	; 255
 b8e:	8f 4f       	sbci	r24, 0xFF	; 255
 b90:	9f 4f       	sbci	r25, 0xFF	; 255
 b92:	16 c0       	rjmp	.+44     	; 0xbc0 <__floatsisf+0x6c>
 b94:	88 23       	and	r24, r24
 b96:	11 f0       	breq	.+4      	; 0xb9c <__floatsisf+0x48>
 b98:	96 e9       	ldi	r25, 0x96	; 150
 b9a:	11 c0       	rjmp	.+34     	; 0xbbe <__floatsisf+0x6a>
 b9c:	77 23       	and	r23, r23
 b9e:	21 f0       	breq	.+8      	; 0xba8 <__floatsisf+0x54>
 ba0:	9e e8       	ldi	r25, 0x8E	; 142
 ba2:	87 2f       	mov	r24, r23
 ba4:	76 2f       	mov	r23, r22
 ba6:	05 c0       	rjmp	.+10     	; 0xbb2 <__floatsisf+0x5e>
 ba8:	66 23       	and	r22, r22
 baa:	71 f0       	breq	.+28     	; 0xbc8 <__floatsisf+0x74>
 bac:	96 e8       	ldi	r25, 0x86	; 134
 bae:	86 2f       	mov	r24, r22
 bb0:	70 e0       	ldi	r23, 0x00	; 0
 bb2:	60 e0       	ldi	r22, 0x00	; 0
 bb4:	2a f0       	brmi	.+10     	; 0xbc0 <__floatsisf+0x6c>
 bb6:	9a 95       	dec	r25
 bb8:	66 0f       	add	r22, r22
 bba:	77 1f       	adc	r23, r23
 bbc:	88 1f       	adc	r24, r24
 bbe:	da f7       	brpl	.-10     	; 0xbb6 <__floatsisf+0x62>
 bc0:	88 0f       	add	r24, r24
 bc2:	96 95       	lsr	r25
 bc4:	87 95       	ror	r24
 bc6:	97 f9       	bld	r25, 7
 bc8:	08 95       	ret

00000bca <__fp_inf>:
 bca:	97 f9       	bld	r25, 7
 bcc:	9f 67       	ori	r25, 0x7F	; 127
 bce:	80 e8       	ldi	r24, 0x80	; 128
 bd0:	70 e0       	ldi	r23, 0x00	; 0
 bd2:	60 e0       	ldi	r22, 0x00	; 0
 bd4:	08 95       	ret

00000bd6 <__fp_nan>:
 bd6:	9f ef       	ldi	r25, 0xFF	; 255
 bd8:	80 ec       	ldi	r24, 0xC0	; 192
 bda:	08 95       	ret

00000bdc <__fp_pscA>:
 bdc:	00 24       	eor	r0, r0
 bde:	0a 94       	dec	r0
 be0:	16 16       	cp	r1, r22
 be2:	17 06       	cpc	r1, r23
 be4:	18 06       	cpc	r1, r24
 be6:	09 06       	cpc	r0, r25
 be8:	08 95       	ret

00000bea <__fp_pscB>:
 bea:	00 24       	eor	r0, r0
 bec:	0a 94       	dec	r0
 bee:	12 16       	cp	r1, r18
 bf0:	13 06       	cpc	r1, r19
 bf2:	14 06       	cpc	r1, r20
 bf4:	05 06       	cpc	r0, r21
 bf6:	08 95       	ret

00000bf8 <__fp_round>:
 bf8:	09 2e       	mov	r0, r25
 bfa:	03 94       	inc	r0
 bfc:	00 0c       	add	r0, r0
 bfe:	11 f4       	brne	.+4      	; 0xc04 <__fp_round+0xc>
 c00:	88 23       	and	r24, r24
 c02:	52 f0       	brmi	.+20     	; 0xc18 <__fp_round+0x20>
 c04:	bb 0f       	add	r27, r27
 c06:	40 f4       	brcc	.+16     	; 0xc18 <__fp_round+0x20>
 c08:	bf 2b       	or	r27, r31
 c0a:	11 f4       	brne	.+4      	; 0xc10 <__fp_round+0x18>
 c0c:	60 ff       	sbrs	r22, 0
 c0e:	04 c0       	rjmp	.+8      	; 0xc18 <__fp_round+0x20>
 c10:	6f 5f       	subi	r22, 0xFF	; 255
 c12:	7f 4f       	sbci	r23, 0xFF	; 255
 c14:	8f 4f       	sbci	r24, 0xFF	; 255
 c16:	9f 4f       	sbci	r25, 0xFF	; 255
 c18:	08 95       	ret

00000c1a <__fp_split3>:
 c1a:	57 fd       	sbrc	r21, 7
 c1c:	90 58       	subi	r25, 0x80	; 128
 c1e:	44 0f       	add	r20, r20
 c20:	55 1f       	adc	r21, r21
 c22:	59 f0       	breq	.+22     	; 0xc3a <__fp_splitA+0x10>
 c24:	5f 3f       	cpi	r21, 0xFF	; 255
 c26:	71 f0       	breq	.+28     	; 0xc44 <__fp_splitA+0x1a>
 c28:	47 95       	ror	r20

00000c2a <__fp_splitA>:
 c2a:	88 0f       	add	r24, r24
 c2c:	97 fb       	bst	r25, 7
 c2e:	99 1f       	adc	r25, r25
 c30:	61 f0       	breq	.+24     	; 0xc4a <__fp_splitA+0x20>
 c32:	9f 3f       	cpi	r25, 0xFF	; 255
 c34:	79 f0       	breq	.+30     	; 0xc54 <__fp_splitA+0x2a>
 c36:	87 95       	ror	r24
 c38:	08 95       	ret
 c3a:	12 16       	cp	r1, r18
 c3c:	13 06       	cpc	r1, r19
 c3e:	14 06       	cpc	r1, r20
 c40:	55 1f       	adc	r21, r21
 c42:	f2 cf       	rjmp	.-28     	; 0xc28 <__fp_split3+0xe>
 c44:	46 95       	lsr	r20
 c46:	f1 df       	rcall	.-30     	; 0xc2a <__fp_splitA>
 c48:	08 c0       	rjmp	.+16     	; 0xc5a <__fp_splitA+0x30>
 c4a:	16 16       	cp	r1, r22
 c4c:	17 06       	cpc	r1, r23
 c4e:	18 06       	cpc	r1, r24
 c50:	99 1f       	adc	r25, r25
 c52:	f1 cf       	rjmp	.-30     	; 0xc36 <__fp_splitA+0xc>
 c54:	86 95       	lsr	r24
 c56:	71 05       	cpc	r23, r1
 c58:	61 05       	cpc	r22, r1
 c5a:	08 94       	sec
 c5c:	08 95       	ret

00000c5e <__fp_zero>:
 c5e:	e8 94       	clt

00000c60 <__fp_szero>:
 c60:	bb 27       	eor	r27, r27
 c62:	66 27       	eor	r22, r22
 c64:	77 27       	eor	r23, r23
 c66:	cb 01       	movw	r24, r22
 c68:	97 f9       	bld	r25, 7
 c6a:	08 95       	ret

00000c6c <__mulsf3>:
 c6c:	0e 94 49 06 	call	0xc92	; 0xc92 <__mulsf3x>
 c70:	0c 94 fc 05 	jmp	0xbf8	; 0xbf8 <__fp_round>
 c74:	0e 94 ee 05 	call	0xbdc	; 0xbdc <__fp_pscA>
 c78:	38 f0       	brcs	.+14     	; 0xc88 <__mulsf3+0x1c>
 c7a:	0e 94 f5 05 	call	0xbea	; 0xbea <__fp_pscB>
 c7e:	20 f0       	brcs	.+8      	; 0xc88 <__mulsf3+0x1c>
 c80:	95 23       	and	r25, r21
 c82:	11 f0       	breq	.+4      	; 0xc88 <__mulsf3+0x1c>
 c84:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_inf>
 c88:	0c 94 eb 05 	jmp	0xbd6	; 0xbd6 <__fp_nan>
 c8c:	11 24       	eor	r1, r1
 c8e:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_szero>

00000c92 <__mulsf3x>:
 c92:	0e 94 0d 06 	call	0xc1a	; 0xc1a <__fp_split3>
 c96:	70 f3       	brcs	.-36     	; 0xc74 <__mulsf3+0x8>

00000c98 <__mulsf3_pse>:
 c98:	95 9f       	mul	r25, r21
 c9a:	c1 f3       	breq	.-16     	; 0xc8c <__mulsf3+0x20>
 c9c:	95 0f       	add	r25, r21
 c9e:	50 e0       	ldi	r21, 0x00	; 0
 ca0:	55 1f       	adc	r21, r21
 ca2:	62 9f       	mul	r22, r18
 ca4:	f0 01       	movw	r30, r0
 ca6:	72 9f       	mul	r23, r18
 ca8:	bb 27       	eor	r27, r27
 caa:	f0 0d       	add	r31, r0
 cac:	b1 1d       	adc	r27, r1
 cae:	63 9f       	mul	r22, r19
 cb0:	aa 27       	eor	r26, r26
 cb2:	f0 0d       	add	r31, r0
 cb4:	b1 1d       	adc	r27, r1
 cb6:	aa 1f       	adc	r26, r26
 cb8:	64 9f       	mul	r22, r20
 cba:	66 27       	eor	r22, r22
 cbc:	b0 0d       	add	r27, r0
 cbe:	a1 1d       	adc	r26, r1
 cc0:	66 1f       	adc	r22, r22
 cc2:	82 9f       	mul	r24, r18
 cc4:	22 27       	eor	r18, r18
 cc6:	b0 0d       	add	r27, r0
 cc8:	a1 1d       	adc	r26, r1
 cca:	62 1f       	adc	r22, r18
 ccc:	73 9f       	mul	r23, r19
 cce:	b0 0d       	add	r27, r0
 cd0:	a1 1d       	adc	r26, r1
 cd2:	62 1f       	adc	r22, r18
 cd4:	83 9f       	mul	r24, r19
 cd6:	a0 0d       	add	r26, r0
 cd8:	61 1d       	adc	r22, r1
 cda:	22 1f       	adc	r18, r18
 cdc:	74 9f       	mul	r23, r20
 cde:	33 27       	eor	r19, r19
 ce0:	a0 0d       	add	r26, r0
 ce2:	61 1d       	adc	r22, r1
 ce4:	23 1f       	adc	r18, r19
 ce6:	84 9f       	mul	r24, r20
 ce8:	60 0d       	add	r22, r0
 cea:	21 1d       	adc	r18, r1
 cec:	82 2f       	mov	r24, r18
 cee:	76 2f       	mov	r23, r22
 cf0:	6a 2f       	mov	r22, r26
 cf2:	11 24       	eor	r1, r1
 cf4:	9f 57       	subi	r25, 0x7F	; 127
 cf6:	50 40       	sbci	r21, 0x00	; 0
 cf8:	9a f0       	brmi	.+38     	; 0xd20 <__mulsf3_pse+0x88>
 cfa:	f1 f0       	breq	.+60     	; 0xd38 <__mulsf3_pse+0xa0>
 cfc:	88 23       	and	r24, r24
 cfe:	4a f0       	brmi	.+18     	; 0xd12 <__mulsf3_pse+0x7a>
 d00:	ee 0f       	add	r30, r30
 d02:	ff 1f       	adc	r31, r31
 d04:	bb 1f       	adc	r27, r27
 d06:	66 1f       	adc	r22, r22
 d08:	77 1f       	adc	r23, r23
 d0a:	88 1f       	adc	r24, r24
 d0c:	91 50       	subi	r25, 0x01	; 1
 d0e:	50 40       	sbci	r21, 0x00	; 0
 d10:	a9 f7       	brne	.-22     	; 0xcfc <__mulsf3_pse+0x64>
 d12:	9e 3f       	cpi	r25, 0xFE	; 254
 d14:	51 05       	cpc	r21, r1
 d16:	80 f0       	brcs	.+32     	; 0xd38 <__mulsf3_pse+0xa0>
 d18:	0c 94 e5 05 	jmp	0xbca	; 0xbca <__fp_inf>
 d1c:	0c 94 30 06 	jmp	0xc60	; 0xc60 <__fp_szero>
 d20:	5f 3f       	cpi	r21, 0xFF	; 255
 d22:	e4 f3       	brlt	.-8      	; 0xd1c <__mulsf3_pse+0x84>
 d24:	98 3e       	cpi	r25, 0xE8	; 232
 d26:	d4 f3       	brlt	.-12     	; 0xd1c <__mulsf3_pse+0x84>
 d28:	86 95       	lsr	r24
 d2a:	77 95       	ror	r23
 d2c:	67 95       	ror	r22
 d2e:	b7 95       	ror	r27
 d30:	f7 95       	ror	r31
 d32:	e7 95       	ror	r30
 d34:	9f 5f       	subi	r25, 0xFF	; 255
 d36:	c1 f7       	brne	.-16     	; 0xd28 <__mulsf3_pse+0x90>
 d38:	fe 2b       	or	r31, r30
 d3a:	88 0f       	add	r24, r24
 d3c:	91 1d       	adc	r25, r1
 d3e:	96 95       	lsr	r25
 d40:	87 95       	ror	r24
 d42:	97 f9       	bld	r25, 7
 d44:	08 95       	ret

00000d46 <__itoa_ncheck>:
 d46:	bb 27       	eor	r27, r27
 d48:	4a 30       	cpi	r20, 0x0A	; 10
 d4a:	31 f4       	brne	.+12     	; 0xd58 <__itoa_ncheck+0x12>
 d4c:	99 23       	and	r25, r25
 d4e:	22 f4       	brpl	.+8      	; 0xd58 <__itoa_ncheck+0x12>
 d50:	bd e2       	ldi	r27, 0x2D	; 45
 d52:	90 95       	com	r25
 d54:	81 95       	neg	r24
 d56:	9f 4f       	sbci	r25, 0xFF	; 255
 d58:	0c 94 af 06 	jmp	0xd5e	; 0xd5e <__utoa_common>

00000d5c <__utoa_ncheck>:
 d5c:	bb 27       	eor	r27, r27

00000d5e <__utoa_common>:
 d5e:	fb 01       	movw	r30, r22
 d60:	55 27       	eor	r21, r21
 d62:	aa 27       	eor	r26, r26
 d64:	88 0f       	add	r24, r24
 d66:	99 1f       	adc	r25, r25
 d68:	aa 1f       	adc	r26, r26
 d6a:	a4 17       	cp	r26, r20
 d6c:	10 f0       	brcs	.+4      	; 0xd72 <__utoa_common+0x14>
 d6e:	a4 1b       	sub	r26, r20
 d70:	83 95       	inc	r24
 d72:	50 51       	subi	r21, 0x10	; 16
 d74:	b9 f7       	brne	.-18     	; 0xd64 <__utoa_common+0x6>
 d76:	a0 5d       	subi	r26, 0xD0	; 208
 d78:	aa 33       	cpi	r26, 0x3A	; 58
 d7a:	08 f0       	brcs	.+2      	; 0xd7e <__utoa_common+0x20>
 d7c:	a9 5d       	subi	r26, 0xD9	; 217
 d7e:	a1 93       	st	Z+, r26
 d80:	00 97       	sbiw	r24, 0x00	; 0
 d82:	79 f7       	brne	.-34     	; 0xd62 <__utoa_common+0x4>
 d84:	b1 11       	cpse	r27, r1
 d86:	b1 93       	st	Z+, r27
 d88:	11 92       	st	Z+, r1
 d8a:	cb 01       	movw	r24, r22
 d8c:	0c 94 c8 06 	jmp	0xd90	; 0xd90 <strrev>

00000d90 <strrev>:
 d90:	dc 01       	movw	r26, r24
 d92:	fc 01       	movw	r30, r24
 d94:	67 2f       	mov	r22, r23
 d96:	71 91       	ld	r23, Z+
 d98:	77 23       	and	r23, r23
 d9a:	e1 f7       	brne	.-8      	; 0xd94 <strrev+0x4>
 d9c:	32 97       	sbiw	r30, 0x02	; 2
 d9e:	04 c0       	rjmp	.+8      	; 0xda8 <strrev+0x18>
 da0:	7c 91       	ld	r23, X
 da2:	6d 93       	st	X+, r22
 da4:	70 83       	st	Z, r23
 da6:	62 91       	ld	r22, -Z
 da8:	ae 17       	cp	r26, r30
 daa:	bf 07       	cpc	r27, r31
 dac:	c8 f3       	brcs	.-14     	; 0xda0 <strrev+0x10>
 dae:	08 95       	ret

00000db0 <_exit>:
 db0:	f8 94       	cli

00000db2 <__stop_program>:
 db2:	ff cf       	rjmp	.-2      	; 0xdb2 <__stop_program>
